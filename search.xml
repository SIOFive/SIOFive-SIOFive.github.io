[{"title":"利用dlopen，dlsym加载动态链接库","url":"http://yoursite.com/2017/11/01/dlsym调用动态链接库/","content":"<p>最近碰到一个需求，程序加载的动态库中有若干个函数，如何根据函数签名从这些函数中返回唯一匹配的函数。</p>\n<p>分析该问题，首先需要知道编译后的目标文件中，每个函数的函数签名是什么。其次，要如何根据函数签名从动态库中获得对应的函数。</p>\n<h1 id=\"函数签名\"><a href=\"#函数签名\" class=\"headerlink\" title=\"函数签名\"></a>函数签名</h1><h2 id=\"C函数签名\"><a href=\"#C函数签名\" class=\"headerlink\" title=\"C函数签名\"></a>C函数签名</h2><p>C函数中，不能通过改变函数的参数列表实现重载，因为只使用函数名作为签名。</p>\n<p>example：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span>  </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (a + b);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sub</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a - b);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mul</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a * b);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">div</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a / b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>将函数编译成动态链接库</strong></p>\n<p>gcc -fPIC -shared calc.c -o libcalc.so</p>\n<p>使用nm查看libcalc.so的函数列表, 可以看到四个对应的函数</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nm libcalc.so </div><div class=\"line\"><span class=\"number\">0000000000000</span>eb0 <span class=\"built_in\">T</span> _add</div><div class=\"line\"><span class=\"number\">0000000000000</span>ef5 <span class=\"built_in\">T</span> _div</div><div class=\"line\"><span class=\"number\">0000000000000</span>ee2 <span class=\"built_in\">T</span> _mul</div><div class=\"line\"><span class=\"number\">0000000000000</span>ed0 <span class=\"built_in\">T</span> _sub</div></pre></td></tr></table></figure>\n<h2 id=\"C-函数签名\"><a href=\"#C-函数签名\" class=\"headerlink\" title=\"C++函数签名\"></a>C++函数签名</h2><p>c++函数以函数名加参数类型作为签名，所以可以通过改变参数列表实现重载。</p>\n<p>将上述文件保存为cpp之后，用g++编译成动态链接库，并查看函数列表</p>\n<p>g++ -fPIC -shared calc.cpp -o libcalc.so</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0000000000000</span>ebc <span class=\"built_in\">T</span> __Z3addii</div><div class=\"line\"><span class=\"number\">0000000000000</span>ef5 <span class=\"built_in\">T</span> __Z3divii</div><div class=\"line\"><span class=\"number\">0000000000000</span>ee2 <span class=\"built_in\">T</span> __Z3mulii</div><div class=\"line\"><span class=\"number\">0000000000000</span>ed0 <span class=\"built_in\">T</span> __Z3subii</div></pre></td></tr></table></figure>\n<p>以加法函数为例，add为函数名，ii表示两个参数分别为int，int</p>\n<p>如果重载add函数，如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">float</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (a + b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译之后的函数签名如下，add的第一个参数为float,第二个为int</p>\n<p>0000000000000eb0 T __Z3addfi</p>\n<h3 id=\"将C-函数签名转换为C函数签名\"><a href=\"#将C-函数签名转换为C函数签名\" class=\"headerlink\" title=\"将C++函数签名转换为C函数签名\"></a>将C++函数签名转换为C函数签名</h3><p>在某些场景下，需要用c来调c++函数，就需要对c++函数做包装，使得函数名长得和C函数名一致。通过extern “C”来实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\">\tcode</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对应的code函数名就与C函数名一致</p>\n<h1 id=\"加载动态库\"><a href=\"#加载动态库\" class=\"headerlink\" title=\"加载动态库\"></a>加载动态库</h1><p>知道了函数的签名，可以通过dlopen, dlsym在动态库中查找对应的函数。</p>\n<ul>\n<li><strong>dlopen</strong>：打开指定动态库， 返回handle句柄给调用进程<ul>\n<li>打开方式有多种，比如<ul>\n<li>RTLD_LAZY:    在dlopen返回前，对于动态库中未定义的符号不执行解析</li>\n<li>RTLD_NOW:        需要在dlopen返回前，解析出所有未定义符号，否则返回错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>dlerror</strong>：    返回出现的错误</li>\n<li><strong>dlsym</strong>：    通过句柄和连接符名称获取函数，并返回该函数指针</li>\n<li><strong>dlclose</strong>：    关闭打开的库</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;dlfcn.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">dlopen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">int</span> mode)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">dlerror</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">dlsym</span><span class=\"params\">(<span class=\"keyword\">void</span> *handle, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *symbol)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dlclose</span><span class=\"params\">(<span class=\"keyword\">void</span> *handle)</span></span>;</div></pre></td></tr></table></figure>\n<p>采用上述生成的libcalc.so, 测试dlsym等函数功能</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;dlfcn.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//动态链接库路径</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LIB_CALCULATE_PATH <span class=\"meta-string\">\"./libcalc.so\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//函数指针</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*CAC_FUNC)</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">int</span>(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)&gt; FUNC;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">void</span> *handle;</div><div class=\"line\">    <span class=\"keyword\">char</span> *error;</div><div class=\"line\">    FUNC func = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//打开动态链接库</span></div><div class=\"line\">    handle = dlopen(LIB_CALCULATE_PATH, RTLD_LAZY);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!handle) &#123;</div><div class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"%s\\n\"</span>, dlerror());</div><div class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//清除之前存在的错误</span></div><div class=\"line\">    dlerror();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取一个函数</span></div><div class=\"line\">    <span class=\"comment\">// 将dlsym返回的 void* 转化为CAC_FUNC的函数指针，然后赋给func</span></div><div class=\"line\">    func = (CAC_FUNC)(dlsym(handle, <span class=\"string\">\"add\"</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> ((error = dlerror()) != <span class=\"literal\">NULL</span>)  &#123;</div><div class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"%s\\n\"</span>, error);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"add: %d\\n\"</span>, func(<span class=\"number\">2</span>,<span class=\"number\">7</span>));</div><div class=\"line\"></div><div class=\"line\">    func = (CAC_FUNC)(dlsym(handle, <span class=\"string\">\"sub\"</span>));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"sub: %d\\n\"</span>, func(<span class=\"number\">9</span>,<span class=\"number\">2</span>));</div><div class=\"line\"></div><div class=\"line\">    func = (CAC_FUNC)dlsym(handle, <span class=\"string\">\"mul\"</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"mul: %d\\n\"</span>, func(<span class=\"number\">3</span>,<span class=\"number\">2</span>));</div><div class=\"line\"></div><div class=\"line\">    func = (CAC_FUNC)dlsym(handle, <span class=\"string\">\"div\"</span>);</div><div class=\"line\">    <span class=\"comment\">//*(void **) (&amp;cac_func) = dlsym(handle, \"div\");</span></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"div: %d\\n\"</span>, func(<span class=\"number\">8</span>,<span class=\"number\">2</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//关闭动态链接库</span></div><div class=\"line\">    dlclose(handle);</div><div class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后编译，运行如下</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  tools gi<span class=\"variable\">t:</span>(master) ✗ g++ -rdynamic -<span class=\"keyword\">o</span> main main.cpp -ldl</div><div class=\"line\">➜  tools gi<span class=\"variable\">t:</span>(master) ✗ ./main </div><div class=\"line\"><span class=\"built_in\">add</span>: <span class=\"number\">2</span></div><div class=\"line\">su<span class=\"variable\">b:</span> <span class=\"number\">7</span></div><div class=\"line\">mu<span class=\"variable\">l:</span> <span class=\"number\">6</span></div><div class=\"line\"><span class=\"keyword\">di</span><span class=\"variable\">v:</span> <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>利用上述的方案，能够方便的使用动态库中的函数，提高灵活性。</p>\n<p><strong>参考资料</strong></p>\n<p><a href=\"http://www.cnblogs.com/Anker/p/3746802.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Anker/p/3746802.html</a></p>\n","categories":["Linux环境编程"],"tags":["dlopen","dlsym","动态库","函数签名"]},{"title":"CMU15213：CSAPP 实验一：DataLab","url":"http://yoursite.com/2017/10/16/cmu15213-datalab/","content":"<h1 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h1><p>《深入理解计算机系统》的第一个实验，内容包括位操作，用二进制表示整数，浮点数，以及相应的操作。实验限定了可选用的操作符，并且有最大次数限制，总体来讲还是非常有趣的。</p>\n<h2 id=\"bitAnd\"><a href=\"#bitAnd\" class=\"headerlink\" title=\"bitAnd\"></a>bitAnd</h2><p>只使用 ~ 和 | 实现 &amp;</p>\n<p>De Morgan定律</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\"> * <span class=\"built_in\">bitAnd</span> - x&amp;y using only ~ <span class=\"built_in\">and</span> | </div><div class=\"line\"> *   Examp<span class=\"symbol\">le:</span> <span class=\"built_in\">bitAnd</span>(<span class=\"number\">6</span>, <span class=\"number\">5</span>) = <span class=\"number\">4</span></div><div class=\"line\"> *   Legal o<span class=\"symbol\">ps:</span> ~ |</div><div class=\"line\"> *   <span class=\"built_in\">Max</span> o<span class=\"symbol\">ps:</span> <span class=\"number\">8</span></div><div class=\"line\"> *   Rati<span class=\"symbol\">ng:</span> <span class=\"number\">1</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">int</span> <span class=\"built_in\">bitAnd</span>(<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> y) &#123;</div><div class=\"line\">  return ~(~x | ~y);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"getByte\"><a href=\"#getByte\" class=\"headerlink\" title=\"getByte\"></a>getByte</h2><p>从一个整数（4字节）中提取第0，1，2，3个字节。每个字节8bits，所以通过右移8*n位，然后取最后8位bits</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\"> * getByte - Extract byte <span class=\"built_in\">n</span> from word x</div><div class=\"line\"> *   Bytes numbered from <span class=\"number\">0</span> (LSB) to <span class=\"number\">3</span> (MSB)</div><div class=\"line\"> *   Exampl<span class=\"symbol\">es:</span> getByte(<span class=\"number\">0</span>x12345678,<span class=\"number\">1</span>) = <span class=\"number\">0</span>x56</div><div class=\"line\"> *   Legal o<span class=\"symbol\">ps:</span> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class=\"line\"> *   <span class=\"built_in\">Max</span> o<span class=\"symbol\">ps:</span> <span class=\"number\">6</span></div><div class=\"line\"> *   Rati<span class=\"symbol\">ng:</span> <span class=\"number\">2</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">int</span> getByte(<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> <span class=\"built_in\">n</span>) &#123;</div><div class=\"line\">  return x&gt;&gt;(<span class=\"built_in\">n</span>&lt;&lt;<span class=\"number\">3</span>) &amp; <span class=\"number\">0</span>xFF;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"logicalShift\"><a href=\"#logicalShift\" class=\"headerlink\" title=\"logicalShift\"></a>logicalShift</h2><p>将一个数逻辑右移，当x为负数时，代码实际上进行的是算术右移，所以要将右移的1改为0</p>\n<p>最高位右移之后的位置为：32-n，所以将-1[1..1]左移动31-n位，得到[1..10..0]。取反之后再&amp;算术右移的数即可。</p>\n<p>但由于不能使用-，使用-n=~n+1. 32-n= 32+~n+1。并且使得每次移位的范围在[0,31]之间，分成两次移位。</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\"> * logicalShift - shift x to the <span class=\"built_in\">right</span> by <span class=\"built_in\">n</span>, using a logical shift</div><div class=\"line\"> *   Can assume that <span class=\"number\">0</span> &lt;= <span class=\"built_in\">n</span> &lt;= <span class=\"number\">31</span></div><div class=\"line\"> *   Exampl<span class=\"symbol\">es:</span> logicalShift(<span class=\"number\">0</span>x87654321,<span class=\"number\">4</span>) = <span class=\"number\">0</span>x08765432</div><div class=\"line\"> *   Legal o<span class=\"symbol\">ps:</span> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class=\"line\"> *   <span class=\"built_in\">Max</span> o<span class=\"symbol\">ps:</span> <span class=\"number\">20</span></div><div class=\"line\"> *   Rati<span class=\"symbol\">ng:</span> <span class=\"number\">3</span> </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">int</span> logicalShift(<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> <span class=\"built_in\">n</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">int</span> tmp = (~<span class=\"number\">0</span>)&lt;&lt;(<span class=\"number\">32</span> + (~<span class=\"built_in\">n</span>));</div><div class=\"line\">  tmp = tmp &lt;&lt; <span class=\"number\">1</span>;</div><div class=\"line\">  return x&gt;&gt;<span class=\"built_in\">n</span> &amp; (~tmp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"bitCount\"><a href=\"#bitCount\" class=\"headerlink\" title=\"bitCount\"></a>bitCount</h2><p>计算二进制中bit为1的个数，由于不能使用循环等操作，这道题难度很大。可以采用一种分治的思想解决。</p>\n<p><img src=\"http://siofive.qiniudn.com/datalab-bitCount.jpg\" alt=\"\"></p>\n<p>为了能够将对应位上的数字相加，需要产生5个mask，分别是0x55555555, 0x33333333, 0x0f0f0f0f, 0x00ff00ff, 0x0000ffff。 分别代表了[1,2,4,8,16]个0和1间隔。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * bitCount - returns count of number of 1's in word</span></div><div class=\"line\"><span class=\"comment\"> *   Examples: bitCount(5) = 2, bitCount(7) = 3</span></div><div class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class=\"line\"><span class=\"comment\"> *   Max ops: 40</span></div><div class=\"line\"><span class=\"comment\"> *   Rating: 4</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">int bitCount(int x) &#123;</div><div class=\"line\">  int _mask1 = <span class=\"number\">0x55</span> | (<span class=\"number\">0x55</span> &lt;&lt; <span class=\"number\">8</span>);   <span class=\"comment\">//  0x5555</span></div><div class=\"line\">  int _mask2 = <span class=\"number\">0x33</span> | (<span class=\"number\">0x33</span> &lt;&lt; <span class=\"number\">8</span>);   <span class=\"comment\">//  0x3333</span></div><div class=\"line\">  int _mask3 = <span class=\"number\">0x0f</span> | (<span class=\"number\">0x0f</span> &lt;&lt; <span class=\"number\">8</span>);   <span class=\"comment\">//  0x0f0f</span></div><div class=\"line\"></div><div class=\"line\">  int mask1 = _mask1 | (_mask1 &lt;&lt; <span class=\"number\">16</span>);  <span class=\"comment\">//  0x55555555 = [0101...0101]</span></div><div class=\"line\">  int mask2 = _mask2 | (_mask2 &lt;&lt; <span class=\"number\">16</span>);  <span class=\"comment\">//  0x33333333 = [0011...0011]</span></div><div class=\"line\">  int mask3 = _mask3 | (_mask3 &lt;&lt; <span class=\"number\">16</span>);  <span class=\"comment\">//  0x0f0f0f0f = [00001111...00001111]</span></div><div class=\"line\">  int mask4 = <span class=\"number\">0xff</span> | (<span class=\"number\">0xff</span> &lt;&lt; <span class=\"number\">16</span>);      <span class=\"comment\">//  0x00ff00ff = [00000000111111110000000011111111]</span></div><div class=\"line\">  int mask5 = <span class=\"number\">0xff</span> | (<span class=\"number\">0xff</span> &lt;&lt; <span class=\"number\">8</span>);       <span class=\"comment\">//  0x0000ffff = [00000000000000001111111111111111]</span></div><div class=\"line\">  </div><div class=\"line\">  x = (x &amp; mask1) + ((x &gt;&gt; <span class=\"number\">1</span>) &amp; mask1);</div><div class=\"line\">  x = (x &amp; mask2) + ((x &gt;&gt; <span class=\"number\">2</span>) &amp; mask2);</div><div class=\"line\">  x = (x &amp; mask3) + ((x &gt;&gt; <span class=\"number\">4</span>) &amp; mask3);</div><div class=\"line\">  x = (x &amp; mask4) + ((x &gt;&gt; <span class=\"number\">8</span>) &amp; mask4);</div><div class=\"line\">  x = (x &amp; mask5) + ((x &gt;&gt; <span class=\"number\">16</span>) &amp; mask5);</div><div class=\"line\">  return x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"bang\"><a href=\"#bang\" class=\"headerlink\" title=\"bang\"></a>bang</h2><p>计算!x，但不能使用！</p>\n<p>只用当x为0时，!x=1, 观察得到只有0和-0的最高位都不为1，其它的都至少有一个1（tmin有两个，-tmin=tmin）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"><span class=\"comment\"> * bang - Compute !x without using !</span></div><div class=\"line\"><span class=\"comment\"> *   Examples: bang(3) = 0, bang(0) = 1</span></div><div class=\"line\"><span class=\"comment\"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class=\"line\"><span class=\"comment\"> *   Max ops: 12</span></div><div class=\"line\"><span class=\"comment\"> *   Rating: 4 </span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bang</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> ((~(x|(~x+<span class=\"number\">1</span>)))&gt;&gt;<span class=\"number\">31</span>) &amp; <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"tmin\"><a href=\"#tmin\" class=\"headerlink\" title=\"tmin\"></a>tmin</h2><p>计算tmin，直接1&lt;&lt;31即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"><span class=\"comment\"> * tmin - return minimum two's complement integer </span></div><div class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class=\"line\"><span class=\"comment\"> *   Max ops: 4</span></div><div class=\"line\"><span class=\"comment\"> *   Rating: 1</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tmin</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"fitsBits\"><a href=\"#fitsBits\" class=\"headerlink\" title=\"fitsBits\"></a>fitsBits</h2><p>这题关键点是理解题意。如果x能够被表示成n-bit的补码，则返回1. 其实问的是，用一个长度为n-bit的二进制表示补码，对应范围为[n-tmin, n-tmax]，问x是否在该范围内。</p>\n<p>观察n-bit能够表示的范围，如果将这个数右移n-1位，如果x为正，此时x全为0，如果x为负，那么x全为1（为-1）。再将x+1之后再右移1位，此时x应该全为0.</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\"> * fitsBits - return <span class=\"number\">1</span> <span class=\"built_in\">if</span> x can be represented as an </div><div class=\"line\"> *  <span class=\"built_in\">n</span>-bit, two's complement integer.</div><div class=\"line\"> *   <span class=\"number\">1</span> &lt;= <span class=\"built_in\">n</span> &lt;= <span class=\"number\">32</span></div><div class=\"line\"> *   Exampl<span class=\"symbol\">es:</span> fitsBits(<span class=\"number\">5</span>,<span class=\"number\">3</span>) = <span class=\"number\">0</span>, fitsBits(-<span class=\"number\">4</span>,<span class=\"number\">3</span>) = <span class=\"number\">1</span></div><div class=\"line\"> *   Legal o<span class=\"symbol\">ps:</span> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class=\"line\"> *   <span class=\"built_in\">Max</span> o<span class=\"symbol\">ps:</span> <span class=\"number\">15</span></div><div class=\"line\"> *   Rati<span class=\"symbol\">ng:</span> <span class=\"number\">2</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">int</span> fitsBits(<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> <span class=\"built_in\">n</span>) &#123;</div><div class=\"line\">  x = (x&gt;&gt;(<span class=\"built_in\">n</span> + ~<span class=\"number\">0</span>)) + <span class=\"number\">1</span>;</div><div class=\"line\">  return !(x&gt;&gt;<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"divpwr2\"><a href=\"#divpwr2\" class=\"headerlink\" title=\"divpwr2\"></a>divpwr2</h2><p>计算x/(2^n), 并且向零取整</p>\n<ul>\n<li>当x为整数的时候，直接右移n为即可。</li>\n<li>当x为负数的时候，由于要向上取整，所以需要加上偏移量。ans = (x+(1&lt;<k)-1)>&gt;k</k)-1)></li>\n</ul>\n<p>所以这道题的关键是先判断是否为负数，若是，加上对应的偏移量。</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\"> * divpwr2 - Compute x/(<span class=\"number\">2</span>^<span class=\"built_in\">n</span>), for <span class=\"number\">0</span> &lt;= <span class=\"built_in\">n</span> &lt;= <span class=\"number\">30</span></div><div class=\"line\"> *  <span class=\"built_in\">Round</span> toward zero</div><div class=\"line\"> *   Exampl<span class=\"symbol\">es:</span> divpwr2(<span class=\"number\">15</span>,<span class=\"number\">1</span>) = <span class=\"number\">7</span>, divpwr2(-<span class=\"number\">33</span>,<span class=\"number\">4</span>) = -<span class=\"number\">2</span></div><div class=\"line\"> *   Legal o<span class=\"symbol\">ps:</span> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class=\"line\"> *   <span class=\"built_in\">Max</span> o<span class=\"symbol\">ps:</span> <span class=\"number\">15</span></div><div class=\"line\"> *   Rati<span class=\"symbol\">ng:</span> <span class=\"number\">2</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">int</span> divpwr2(<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> <span class=\"built_in\">n</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">int</span> s = (x &gt;&gt; <span class=\"number\">31</span>) &amp; <span class=\"number\">1</span>;</div><div class=\"line\">    return (x + (s&lt;&lt;<span class=\"built_in\">n</span>) + ~s + <span class=\"number\">1</span>) &gt;&gt; <span class=\"built_in\">n</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"negate\"><a href=\"#negate\" class=\"headerlink\" title=\"negate\"></a>negate</h2><p>计算-x。-x=~x+1</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"><span class=\"comment\"> * negate - return -x </span></div><div class=\"line\"><span class=\"comment\"> *   Example: negate(1) = -1.</span></div><div class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class=\"line\"><span class=\"comment\"> *   Max ops: 5</span></div><div class=\"line\"><span class=\"comment\"> *   Rating: 2</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">negate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> ~x + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"isPositive\"><a href=\"#isPositive\" class=\"headerlink\" title=\"isPositive\"></a>isPositive</h2><p>如果x&gt;0, 返回1。否则返回0</p>\n<p>这道题咋一看很简单，只需要判断最高位。但是0并不是一个正数，所以需要特殊处理。</p>\n<ul>\n<li>x为0，!x=1, ~x的最高位为1，相减得0</li>\n<li>x为整数，!x=0, ~x的最高位为1，相减得1</li>\n<li>x为负数，!x=0, ~x的最高位为0，相减得0</li>\n</ul>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\"> * isPositive - <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>, <span class=\"keyword\">return</span> <span class=\"number\">0</span> otherwise </div><div class=\"line\"> *   <span class=\"type\">Example</span>: isPositive(-<span class=\"number\">1</span>) = <span class=\"number\">0</span>.</div><div class=\"line\"> *   <span class=\"type\">Legal</span> ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class=\"line\"> *   <span class=\"type\">Max</span> ops: <span class=\"number\">8</span></div><div class=\"line\"> *   <span class=\"type\">Rating</span>: <span class=\"number\">3</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">int</span> isPositive(<span class=\"built_in\">int</span> x) &#123;</div><div class=\"line\">  <span class=\"built_in\">int</span> z = !x;</div><div class=\"line\">  <span class=\"keyword\">return</span> (((~x)&gt;&gt;<span class=\"number\">31</span>) &amp; <span class=\"number\">1</span>) + (~z + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"isLessOrEqual\"><a href=\"#isLessOrEqual\" class=\"headerlink\" title=\"isLessOrEqual\"></a>isLessOrEqual</h2><p>判断 x&lt;=y<br>如果直接用y-x，会溢出。所以这题需要先判断x和y的两者符号是否相同。不同的情况很好处理，如果相同，两者相减并不会发生溢出，再判断即可。</p>\n<p>如果两者相同，x-y&lt;=0, x-y-1&lt;=-1, 即x+~y+1-1&lt;=-1。</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\"> * isLessOrEqual - <span class=\"keyword\">if</span> x &lt;= y  then <span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span> </div><div class=\"line\"> *   <span class=\"type\">Example</span>: isLessOrEqual(<span class=\"number\">4</span>,<span class=\"number\">5</span>) = <span class=\"number\">1</span>.</div><div class=\"line\"> *   <span class=\"type\">Legal</span> ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class=\"line\"> *   <span class=\"type\">Max</span> ops: <span class=\"number\">24</span></div><div class=\"line\"> *   <span class=\"type\">Rating</span>: <span class=\"number\">3</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">int</span> isLessOrEqual(<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> y) &#123;</div><div class=\"line\">  <span class=\"built_in\">int</span> sx = (x&gt;&gt;<span class=\"number\">31</span>) &amp; <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"built_in\">int</span> sy = (y&gt;&gt;<span class=\"number\">31</span>) &amp; <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"built_in\">int</span> sign_diff = sx &amp; !sy;</div><div class=\"line\">  <span class=\"built_in\">int</span> sign_same = !(sx^sy) &amp; (((x+~y)&gt;&gt;<span class=\"number\">31</span>) &amp; <span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> sign_diff | sign_same;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"ilog2\"><a href=\"#ilog2\" class=\"headerlink\" title=\"ilog2\"></a>ilog2</h2><p>ilog2(16)=4</p>\n<p>本质上就是求x的最高位1的位置，可以使用上面bitCount中分治法的思想。ilog2(x)的最大值为31，可以表示为 ilog2(x) = 16a+8b+4c+2d+1e。其中a,b,c,d,e为0或1。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * ilog2 - return floor(log base 2 of x), where x &gt; 0</span></div><div class=\"line\"><span class=\"comment\"> *   Example: ilog2(16) = 4</span></div><div class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class=\"line\"><span class=\"comment\"> *   Max ops: 90</span></div><div class=\"line\"><span class=\"comment\"> *   Rating: 4</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">int ilog2(int x) &#123;</div><div class=\"line\">  <span class=\"comment\">// max(x) = 31</span></div><div class=\"line\">  <span class=\"comment\">// x can be replace by : x = 16*a+8*b+4*c+2*d+1*e</span></div><div class=\"line\">  int ans = <span class=\"number\">0</span>;</div><div class=\"line\">  ans += (!!(x&gt;&gt;<span class=\"number\">16</span>)) &lt;&lt; <span class=\"number\">4</span>;</div><div class=\"line\">  ans += (!!(x&gt;&gt;(<span class=\"number\">8</span>+ans))) &lt;&lt; <span class=\"number\">3</span>;</div><div class=\"line\">  ans += (!!(x&gt;&gt;(<span class=\"number\">4</span>+ans))) &lt;&lt; <span class=\"number\">2</span>;</div><div class=\"line\">  ans += (!!(x&gt;&gt;(<span class=\"number\">2</span>+ans))) &lt;&lt; <span class=\"number\">1</span>;</div><div class=\"line\">  ans += (!!(x&gt;&gt;(<span class=\"number\">1</span>+ans))) &lt;&lt; <span class=\"number\">0</span>;</div><div class=\"line\">  return ans;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"float-neg\"><a href=\"#float-neg\" class=\"headerlink\" title=\"float_neg\"></a>float_neg</h2><p>用unsigned x表示float，并返回-x</p>\n<p>先判断uf是否为NaN，如果是，返回NaN，如果不是的话，返回-uf即可。当浮点数中阶数全为1，而尾数不为0时，表示该数为NaN。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\"> * float_neg - Return bit-level equivalent <span class=\"keyword\">of</span> expression -f <span class=\"keyword\">for</span></div><div class=\"line\"> *   floating point argument f.</div><div class=\"line\"> *   Both <span class=\"keyword\">the</span> argument <span class=\"keyword\">and</span> <span class=\"literal\">result</span> are passed <span class=\"keyword\">as</span> unsigned int's, <span class=\"keyword\">but</span></div><div class=\"line\"> *   they are <span class=\"keyword\">to</span> be interpreted <span class=\"keyword\">as</span> <span class=\"keyword\">the</span> bit-level representations <span class=\"keyword\">of</span></div><div class=\"line\"> *   single-precision floating point values.</div><div class=\"line\"> *   When argument <span class=\"keyword\">is</span> NaN, <span class=\"literal\">return</span> argument.</div><div class=\"line\"> *   Legal ops: Any <span class=\"built_in\">integer</span>/unsigned operations incl. ||, &amp;&amp;. also <span class=\"keyword\">if</span>, <span class=\"keyword\">while</span></div><div class=\"line\"> *   Max ops: <span class=\"number\">10</span></div><div class=\"line\"> *   Rating: <span class=\"number\">2</span></div><div class=\"line\"> */</div><div class=\"line\">unsigned float_neg(unsigned uf) &#123;</div><div class=\"line\">  unsigned t = uf &amp; <span class=\"number\">0x7fffffff</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (t &gt; <span class=\"number\">0x7f800000</span>) <span class=\"literal\">return</span> uf;</div><div class=\"line\"><span class=\"built_in\">  return</span> uf ^ <span class=\"number\">0x80000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"float-i2f\"><a href=\"#float-i2f\" class=\"headerlink\" title=\"float_i2f\"></a>float_i2f</h2><p>将一个int数转化为float</p>\n<p>x=(s&lt;&lt;31) | (exponent&lt;&lt;23) | fraction</p>\n<p>先得到符号位，然后如果x=0，或者x=-tmin，直接返回相应的float。如果x为负数，转化为整数考虑。再分别计算该数的exponent和fraction，在计算fraction的时候需要注意向偶数进位，并且进位之后exponent是否需要改变。具体的细节见代码注释</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"><span class=\"comment\"> * float_i2f - Return bit-level equivalent of expression (float) x</span></div><div class=\"line\"><span class=\"comment\"> *   Result is returned as unsigned int, but</span></div><div class=\"line\"><span class=\"comment\"> *   it is to be interpreted as the bit-level representation of a</span></div><div class=\"line\"><span class=\"comment\"> *   single-precision floating point values.</span></div><div class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></div><div class=\"line\"><span class=\"comment\"> *   Max ops: 30</span></div><div class=\"line\"><span class=\"comment\"> *   Rating: 4</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">unsigned float_i2f(int x) &#123;</div><div class=\"line\">  <span class=\"comment\">// return (s&lt;&lt;31)|(exponent&lt;&lt;23)|fraction</span></div><div class=\"line\">  int s = (x&gt;&gt;<span class=\"number\">31</span>) &amp; <span class=\"number\">1</span>;  <span class=\"comment\">//sign</span></div><div class=\"line\">  int exponent;</div><div class=\"line\">  int fraction = <span class=\"number\">0</span>;</div><div class=\"line\">  int fraction_mask;</div><div class=\"line\">  int delta;</div><div class=\"line\">  int i = <span class=\"number\">30</span>;</div><div class=\"line\">  if (x == <span class=\"number\">0</span>) return x;   <span class=\"comment\">//x=0</span></div><div class=\"line\">  else if (x == <span class=\"number\">0x80000000</span>) &#123; <span class=\"comment\">//x=-tmin, exponent = 31 + 127</span></div><div class=\"line\">    exponent = <span class=\"number\">158</span>;</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    if (s) x = -x;  <span class=\"comment\">//if x is negative, change to positive</span></div><div class=\"line\">    while(!(x&gt;&gt;i)) i--; <span class=\"comment\">//right shift until x=0</span></div><div class=\"line\">    exponent = i + <span class=\"number\">127</span>;</div><div class=\"line\">    x = x &lt;&lt; (<span class=\"number\">31</span> - i);  <span class=\"comment\">//clean zeros in higher bits</span></div><div class=\"line\">    fraction_mask = <span class=\"number\">0x7fffff</span>;</div><div class=\"line\">    fraction = fraction_mask &amp; (x &gt;&gt; <span class=\"number\">8</span>); <span class=\"comment\">//get fraction</span></div><div class=\"line\">    x = x &amp; <span class=\"number\">0xff</span>; <span class=\"comment\">//the lower 8 bits will be truncated</span></div><div class=\"line\">    delta = (x &gt; <span class=\"number\">128</span>) || ((x == <span class=\"number\">128</span>) &amp;&amp; (fraction &amp; <span class=\"number\">1</span>)); <span class=\"comment\">//if x&gt;=odd.5, delta = 1</span></div><div class=\"line\">    fraction += delta;</div><div class=\"line\">    if (fraction &gt;&gt; <span class=\"number\">23</span>) &#123; <span class=\"comment\">//if fraction is larger than 23 bits</span></div><div class=\"line\">      exponent += <span class=\"number\">1</span>;</div><div class=\"line\">      fraction &amp;= fraction_mask;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return (s&lt;&lt;<span class=\"number\">31</span>) | (exponent&lt;&lt;<span class=\"number\">23</span>) | fraction;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"float-twice\"><a href=\"#float-twice\" class=\"headerlink\" title=\"float_twice\"></a>float_twice</h2><p>将给定的unsigned uf表示的float * 2</p>\n<p>如果uf是denormalized，uf的二进制左移1就是该数乘2。如果uf <em> 2还是denormalized，好理解。如果uf </em> 2变成了normalized，阶码变为1，尾数变为0.也成立。</p>\n<p>如果uf是normalized，直接将uf的阶码+1，但如果uf的阶码+1之后全为1，就变成了inf，需要将尾数全部置为0.</p>\n<p>如果uf是NaN或者inf，直接返回uf。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"><span class=\"comment\"> * float_twice - Return bit-level equivalent of expression 2*f for</span></div><div class=\"line\"><span class=\"comment\"> *   floating point argument f.</span></div><div class=\"line\"><span class=\"comment\"> *   Both the argument and result are passed as unsigned int's, but</span></div><div class=\"line\"><span class=\"comment\"> *   they are to be interpreted as the bit-level representation of</span></div><div class=\"line\"><span class=\"comment\"> *   single-precision floating point values.</span></div><div class=\"line\"><span class=\"comment\"> *   When argument is NaN, return argument</span></div><div class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></div><div class=\"line\"><span class=\"comment\"> *   Max ops: 30</span></div><div class=\"line\"><span class=\"comment\"> *   Rating: 4</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">unsigned float_twice(unsigned uf) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> ((uf &amp; <span class=\"number\">0x7f</span>800000) == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//denormalized</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (uf &amp; <span class=\"number\">0x80000000</span>) | (uf &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((uf &amp; <span class=\"number\">0x7f</span>800000) != <span class=\"number\">0x7f</span>800000) &#123;  <span class=\"comment\">//normalized</span></div><div class=\"line\">    uf += (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">23</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> ((uf &amp; <span class=\"number\">0x7f</span>800000) == <span class=\"number\">0x7f</span>800000) uf = uf &gt;&gt; <span class=\"number\">23</span> &lt;&lt; <span class=\"number\">23</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> uf;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> uf;   <span class=\"comment\">// NaN or inf </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>整个实验内容让我更深入的理解计算机如何用二进制表示整数和浮点数，收获很大。可以配套CMU的网上课程学习该书，效果会更好。</p>\n","categories":["深入理解计算机系统"],"tags":["计算机基础","整数表示","浮点数表示"]},{"title":"HDU5157 Harry and magic string（Manacher+差分前缀）","url":"http://yoursite.com/2015/11/04/HDU5157/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5157\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5157</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个字符串s，问有多少对子串对(suba, subb)，使得suba和subb均为回文子串，且两个子串不能有重叠部分。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先可以用Manacher算法预处理出以每个字符（包括两个字符之间的位置）为中心能有多少个回文串。然后用差分前缀处理处pre、suf、sum三个数组。<br>其中pre数组表示到以某个字符结尾的回文串个数，suf表示以某个字符为开头的回文串个数，sum表示以某个字符之后的所有字符为开头的回文串个数。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">210000</span>;</div><div class=\"line\"><span class=\"keyword\">char</span> s[N], str[N];</div><div class=\"line\"><span class=\"keyword\">int</span> n, p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">KP</span><span class=\"params\">(<span class=\"keyword\">int</span> len, <span class=\"keyword\">char</span> *str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        s[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>] = <span class=\"string\">'#'</span>;</div><div class=\"line\">        s[<span class=\"number\">2</span> * i + <span class=\"number\">2</span>] = str[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">2</span> * len;</div><div class=\"line\">    s[<span class=\"number\">0</span>] = s[n + <span class=\"number\">1</span>] = <span class=\"string\">'#'</span>;</div><div class=\"line\">    s[n + <span class=\"number\">2</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> mx = <span class=\"number\">0</span>, id;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mx &gt; i) p[i] = min(p[<span class=\"number\">2</span> * id - i], mx - i);</div><div class=\"line\">        <span class=\"keyword\">else</span> p[i] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(s[i + p[i]] == s[i - p[i]]) p[i]++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p[i] + i &gt; mx) &#123;</div><div class=\"line\">            mx = p[i] + i;</div><div class=\"line\">            id = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ll pre[N / <span class=\"number\">2</span>], suf[N / <span class=\"number\">2</span>], sum[N / <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, str)) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(str);</div><div class=\"line\">        KP(len, str);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= len + <span class=\"number\">1</span>; i++) pre[i] = suf[i] = sum[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">2</span> * len; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> x = i / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) pre[x]++, pre[x + (p[i] / <span class=\"number\">2</span>)]--;</div><div class=\"line\">            <span class=\"keyword\">else</span> pre[x + <span class=\"number\">1</span>]++, pre[x + (p[i] / <span class=\"number\">2</span>) + <span class=\"number\">1</span>]--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span> * len; i &gt;= <span class=\"number\">2</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> x = i / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) suf[x]++, suf[x - (p[i] / <span class=\"number\">2</span>)]--;</div><div class=\"line\">            <span class=\"keyword\">else</span> suf[x]++, suf[x - (p[i] / <span class=\"number\">2</span>)]--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len; i &gt;= <span class=\"number\">1</span>; i--) &#123;</div><div class=\"line\">            suf[i] += suf[i + <span class=\"number\">1</span>];</div><div class=\"line\">            sum[i] += sum[i + <span class=\"number\">1</span>] + suf[i];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ll ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; i++) &#123;</div><div class=\"line\">            pre[i] += pre[i - <span class=\"number\">1</span>];</div><div class=\"line\">            ans += (ll)pre[i] * (sum[i + <span class=\"number\">1</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["ACM"],"tags":["Manacher","差分前缀"]},{"title":"HDU5156 Harry and Christmas tree（dfs序+查询区间内有多少个数）","url":"http://yoursite.com/2015/10/29/HDU5156/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5156\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5156</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一颗树，每个节点上有一些颜色的礼物，现在问以每个节点为根的子树有多少种不同的颜色。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>先把每个节点相同的颜色去除，然后按照dfs序得到一个关于颜色的序列。问题就转化为查询若干个区间内有多少种不同的颜色。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">50000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">500000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g[N], gift[N];</div><div class=\"line\"><span class=\"keyword\">int</span> st[N], ed[N], pos[N], ans[N], mp[<span class=\"number\">2</span> * N], seq[M], s[M], nxt[M];</div><div class=\"line\"><span class=\"keyword\">int</span> tot, n, m;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp1</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"comment\">///按左区间从小到大排</span></div><div class=\"line\">    <span class=\"keyword\">return</span> st[a] &lt; st[b];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"comment\">///按有区间从小到大排</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ed[a] &lt; ed[b];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(p &lt;= tot) &#123;</div><div class=\"line\">        s[p] += v;</div><div class=\"line\">        p += lowbit(p);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(p &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        res += s[p];</div><div class=\"line\">        p -= lowbit(p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    st[u] = tot + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; gift[u].size(); i++) seq[++tot] = gift[u][i];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (v != fa) dfs(v, u);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ed[u] = tot;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    tot = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        g[i].clear();</div><div class=\"line\">        gift[i].clear();</div><div class=\"line\">        pos[i] = i;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m)) &#123;</div><div class=\"line\">        init();</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            g[u].pb(v);</div><div class=\"line\">            g[v].pb(u);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> mx = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            <span class=\"keyword\">if</span> (find(gift[u].begin(), gift[u].end(), v) == gift[u].end()) gift[u].pb(v);</div><div class=\"line\">            mx = max(mx, v);</div><div class=\"line\">        &#125;</div><div class=\"line\">        dfs(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">        <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (tot + <span class=\"number\">5</span>));</div><div class=\"line\">        <span class=\"built_in\">memset</span>(mp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (mx + <span class=\"number\">5</span>));</div><div class=\"line\">        <span class=\"comment\">///按右区间从小到大排</span></div><div class=\"line\">        sort(pos + <span class=\"number\">1</span>, pos + n + <span class=\"number\">1</span>, cmp);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= tot; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!mp[seq[i]]) &#123;</div><div class=\"line\">                add(i, <span class=\"number\">1</span>);</div><div class=\"line\">                mp[seq[i]] = i; <span class=\"comment\">///如果是第一次出现, mp[seq[i]]记录为当前位置</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> now = pos[i];</div><div class=\"line\">            <span class=\"keyword\">while</span>(right &lt;= ed[now]) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(mp[seq[right]] != right) &#123; <span class=\"comment\">///如果不是第一次出现</span></div><div class=\"line\">                    add(mp[seq[right]], <span class=\"number\">-1</span>);  <span class=\"comment\">///减去前一次出现的</span></div><div class=\"line\">                    add(right, <span class=\"number\">1</span>);</div><div class=\"line\">                    mp[seq[right]] = right;   <span class=\"comment\">///重新定义这个数最近一次出现位置</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                right++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            ans[now] = sum(ed[now]) - sum(st[now] - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">        ///按左区间从小到大排</span></div><div class=\"line\"><span class=\"comment\">        for (int i = 1; i &lt;= tot; i++) &#123;</span></div><div class=\"line\"><span class=\"comment\">            if (!mp[seq[i]]) &#123;</span></div><div class=\"line\"><span class=\"comment\">                mp[seq[i]] = i;</span></div><div class=\"line\"><span class=\"comment\">                add(i, 1);</span></div><div class=\"line\"><span class=\"comment\">            &#125;</span></div><div class=\"line\"><span class=\"comment\">        &#125;</span></div><div class=\"line\"><span class=\"comment\">        memset(mp, 0, sizeof(int) * (mx + 5));</span></div><div class=\"line\"><span class=\"comment\">        for (int i = tot; i &gt;= 1; i--) &#123;</span></div><div class=\"line\"><span class=\"comment\">            if (!mp[seq[i]]) nxt[i] = tot + 1;</span></div><div class=\"line\"><span class=\"comment\">            else nxt[i] = mp[seq[i]];</span></div><div class=\"line\"><span class=\"comment\">            mp[seq[i]] = i;</span></div><div class=\"line\"><span class=\"comment\">        &#125;</span></div><div class=\"line\"><span class=\"comment\">        sort(pos + 1, pos + n + 1, cmp1);</span></div><div class=\"line\"><span class=\"comment\">        int t = 1;</span></div><div class=\"line\"><span class=\"comment\">        for (int i = 1; i &lt;= n; i++) &#123;</span></div><div class=\"line\"><span class=\"comment\">            int now = pos[i];</span></div><div class=\"line\"><span class=\"comment\">            while(t &lt;= tot &amp;&amp; t &lt; st[now]) &#123;</span></div><div class=\"line\"><span class=\"comment\">                add(nxt[t++], 1);</span></div><div class=\"line\"><span class=\"comment\">            &#125;</span></div><div class=\"line\"><span class=\"comment\">            //cout&lt;&lt;now&lt;&lt;\" \"&lt;&lt;st[now]&lt;&lt;\" \"&lt;&lt;ed[now]&lt;&lt;endl;</span></div><div class=\"line\"><span class=\"comment\">            ans[now] = sum(ed[now]) - sum(st[now] - 1);</span></div><div class=\"line\"><span class=\"comment\">        &#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, ans[i], i == n ? <span class=\"string\">'\\n'</span> : <span class=\"string\">' '</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["ACM"],"tags":["数据结构","树状数组","dfs序"]},{"title":"ZOJ2112 Dynamic Rankings（动态区间第K大 树状数组套主席树）","url":"http://yoursite.com/2015/10/28/ZOJ2112/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2112\" target=\"_blank\" rel=\"external\">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2112</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>动态查询区间第K大数，带修改</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://www.cnblogs.com/Empress/p/4659824.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Empress/p/4659824.html</a><br>需要将询问离线处理，将一开始的数列用主席树维护。之后修改的部分用N个树状数组来维护，每次更新logn棵树。<br>时间复杂度：nlog^2n<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">60000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r</span></div><div class=\"line\"><span class=\"keyword\">int</span> a[N], Hash[N];</div><div class=\"line\"><span class=\"keyword\">int</span> root[N], ln[N &lt;&lt; <span class=\"number\">5</span>], rn[N &lt;&lt; <span class=\"number\">5</span>], sum[N &lt;&lt; <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> S[N];</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, tot;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> l, r, k;</div><div class=\"line\">    <span class=\"keyword\">bool</span> Q;</div><div class=\"line\">&#125;op[<span class=\"number\">10005</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rt = ++tot;</div><div class=\"line\">    sum[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l != r) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        ln[rt] = build(lson);</div><div class=\"line\">        rn[rt] = build(rson);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rt = ++tot;</div><div class=\"line\">    ln[rt] = ln[pre], rn[rt] = rn[pre], sum[rt] = sum[pre] + val;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &lt;= m) ln[rt] = update(ln[pre], lson, x, val);</div><div class=\"line\">        <span class=\"keyword\">else</span> rn[rt] = update(rn[pre], rson, x, val);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> use[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x &lt;= n) &#123;</div><div class=\"line\">        S[x] = update(S[x], <span class=\"number\">1</span>, m, pos, val);</div><div class=\"line\">        x += lowbit(x);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        ret += sum[ln[use[x]]];</div><div class=\"line\">        x -= lowbit(x);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> lr, <span class=\"keyword\">int</span> rr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= r) <span class=\"keyword\">return</span> l;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = get_sum(v) - get_sum(u) + sum[ln[rr]] - sum[ln[lr]];</div><div class=\"line\">    <span class=\"keyword\">if</span> (tmp &gt;= k) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = u; i; i -= lowbit(i)) use[i] = ln[use[i]];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = v; i; i -= lowbit(i)) use[i] = ln[use[i]];</div><div class=\"line\">        <span class=\"keyword\">return</span> query(u, v, ln[lr], ln[rr], lson, k);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = u; i; i -= lowbit(i)) use[i] = rn[use[i]];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = v; i; i -= lowbit(i)) use[i] = rn[use[i]];</div><div class=\"line\">        <span class=\"keyword\">return</span> query(u, v, rn[lr], rn[rr], rson, k - tmp);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> d)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x &lt;= n) &#123;</div><div class=\"line\">        S[x] = update(S[x], <span class=\"number\">1</span>, m, p, d);</div><div class=\"line\">        x += lowbit(x);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t, q;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</div><div class=\"line\">        m = tot = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">            Hash[++m] = a[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">char</span> s[<span class=\"number\">10</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s);</div><div class=\"line\">            <span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;op[i].l, &amp;op[i].r, &amp;op[i].k);</div><div class=\"line\">                op[i].Q = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;op[i].l, &amp;op[i].r);</div><div class=\"line\">                op[i].Q = <span class=\"number\">0</span>;</div><div class=\"line\">                Hash[++m] = op[i].r;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(Hash + <span class=\"number\">1</span>, Hash + m + <span class=\"number\">1</span>);</div><div class=\"line\">        m = unique(Hash + <span class=\"number\">1</span>, Hash + m + <span class=\"number\">1</span>) - Hash - <span class=\"number\">1</span>;</div><div class=\"line\">        root[<span class=\"number\">0</span>] = build(<span class=\"number\">1</span>, m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) root[i] = update(root[i - <span class=\"number\">1</span>], <span class=\"number\">1</span>, m, lower_bound(Hash + <span class=\"number\">1</span>, Hash + m + <span class=\"number\">1</span>, a[i]) - Hash, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) S[i] = root[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (op[i].Q) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = op[i].l - <span class=\"number\">1</span>; j; j -= lowbit(j)) use[j] = S[j];</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = op[i].r; j; j -= lowbit(j)) use[j] = S[j];</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, Hash[query(op[i].l - <span class=\"number\">1</span>, op[i].r, root[op[i].l - <span class=\"number\">1</span>], root[op[i].r], <span class=\"number\">1</span>, m, op[i].k)]);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                modify(op[i].l, lower_bound(Hash + <span class=\"number\">1</span>, Hash + m + <span class=\"number\">1</span>, a[op[i].l]) - Hash, <span class=\"number\">-1</span>);</div><div class=\"line\">                modify(op[i].l, lower_bound(Hash + <span class=\"number\">1</span>, Hash + m + <span class=\"number\">1</span>, op[i].r) - Hash, <span class=\"number\">1</span>);</div><div class=\"line\">                a[op[i].l] = op[i].r;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["ACM"],"tags":["数据结构","树状数组","主席树"]},{"title":"POJ2104 K-th Number（静态区间第K大 主席树）","url":"http://yoursite.com/2015/10/22/POJ2104/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://poj.org/problem?id=2104\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=2104</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>静态查询区间第K大数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://www.cnblogs.com/Empress/p/4652449.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Empress/p/4652449.html</a><br>主席数利用函数式线段树来维护数列，即每一个前缀维护一个线段树。再利用两个相邻的线段树只需要修改log级别，所以空间也能开下。一般用来解决区间第k大问题</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ln[N &lt;&lt; <span class=\"number\">5</span>], rn[N &lt;&lt; <span class=\"number\">5</span>], sum[N &lt;&lt; <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> tot;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N], root[N], b[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rt = ++tot;</div><div class=\"line\">    sum[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        ln[rt] = build(lson);</div><div class=\"line\">        rn[rt] = build(rson);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rt = ++tot;</div><div class=\"line\">    ln[rt] = ln[pre], rn[rt] = rn[pre], sum[rt] = sum[pre] + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &lt;= m) ln[rt] = update(ln[pre], lson, x);</div><div class=\"line\">        <span class=\"keyword\">else</span> rn[rt] = update(rn[pre], rson, x);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= r) <span class=\"keyword\">return</span> l;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> num = sum[ln[v]] - sum[ln[u]];</div><div class=\"line\">    <span class=\"keyword\">if</span> (num &gt;= k) <span class=\"keyword\">return</span> query(ln[u], ln[v], lson, k);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> query(rn[u], rn[v], rson, k - num);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    tot = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i), b[i] = a[i];</div><div class=\"line\">    sort(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> cnt = unique(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</div><div class=\"line\">    root[<span class=\"number\">0</span>] = build(<span class=\"number\">1</span>, cnt);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = lower_bound(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>, a[i]) - b;</div><div class=\"line\">        root[i] = update(root[i - <span class=\"number\">1</span>], <span class=\"number\">1</span>, cnt, x);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> l, r, k;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;l, &amp;r, &amp;k);</div><div class=\"line\">        <span class=\"keyword\">int</span> x = query(root[l - <span class=\"number\">1</span>], root[r], <span class=\"number\">1</span>, cnt, k);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, b[x]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["ACM"],"tags":["数据结构","主席树"]},{"title":"SPOJ DQUERY - D-query（查询区间内有几个数 离线树状数组OR在线主席树）","url":"http://yoursite.com/2015/10/22/SPOJ-DQUERY/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://www.spoj.com/problems/DQUERY/en/\" target=\"_blank\" rel=\"external\">http://www.spoj.com/problems/DQUERY/en/</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>查询区间内有几个不同的数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://blog.csdn.net/acm_cxlove/article/details/8562634\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/acm_cxlove/article/details/8562634</a></p>\n<ol>\n<li><p>离线树状数组<br>将查询区间按左端点排序<br>对于相同的数，先更新最左边的位置<br>然后根据查询区间，不断更新next，保证查询区间内只记录一个位置<br>维护前缀和用树状数组，时空效率都高</p>\n</li>\n<li><p>在线主席树<br><a href=\"http://www.cnblogs.com/Empress/p/4675386.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Empress/p/4675386.html</a><br>将重复的元素建树。在query的时候把区间内重复的数加起来，用区间长度(r-l+1)去减就是答案<br>(query的是[l, r]之间重复元素的个数)<br>举个例子：1 1 2 1 3 2 3<br>我们从左到右枚举，如果没有重复的，那么树的形态和之前一样，出现重复的则在重复的位置加1，建一颗新树<br>这样我们需要建7颗数<br> 1 2 3 4 5 6 7<br>T0:<br>T1:<br>T2: 1<br>T3: 1<br>T4: 1 1<br>T5: 1 1<br>T6: 1 1 1<br>T7: 1 1 1  1<br>例如查询区间[2，5] 就需要用T5-T1，但是不能直接减，直接减重复的数为2个1。需要统计的是区间[2,5]内重复的个数，正好为1个1.</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>离线树状数组<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">30000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">200000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N], s[N], n, nxt[N];</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> l, r, id;</div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> node &amp; T) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> l &lt; T.l;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; Q[M];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[M];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(p &lt;= n) &#123;</div><div class=\"line\">        s[p] += v;</div><div class=\"line\">        p += lowbit(p);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(p &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        res += s[p];</div><div class=\"line\">        p -= lowbit(p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">        mp.clear();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!mp.count(a[i])) &#123;</div><div class=\"line\">                mp[a[i]] = i;</div><div class=\"line\">                add(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mp.clear();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!mp.count(a[i])) nxt[i] = n + <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> nxt[i] = mp[a[i]];</div><div class=\"line\">            mp[a[i]] = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> q;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;Q[i].l, &amp;Q[i].r);</div><div class=\"line\">            Q[i].id = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(Q, Q + q);</div><div class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>(t &lt;= n &amp;&amp; t &lt; Q[i].l) &#123;</div><div class=\"line\">                add(nxt[t++], <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            ans[Q[i].id] = sum(Q[i].r) - sum(Q[i].l - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在线主席树<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">30000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ln[N &lt;&lt; <span class=\"number\">5</span>], rn[N &lt;&lt; <span class=\"number\">5</span>], sum[N &lt;&lt; <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> tot, root[N], a[N];</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rt = ++tot;</div><div class=\"line\">    sum[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        ln[rt] = build(lson);</div><div class=\"line\">        rn[rt] = build(rson);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> rt = ++tot;</div><div class=\"line\">    ln[rt] = ln[pre], rn[rt] = rn[pre], sum[rt] = sum[pre] + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &lt;= m) ln[rt] = update(ln[pre], lson, x);</div><div class=\"line\">        <span class=\"keyword\">else</span> rn[rt] = update(rn[pre], rson, x);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> rt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= k) <span class=\"keyword\">return</span> sum[v] - sum[u];</div><div class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (k &lt;= m) ans += query(ln[u], ln[v], lson, k);</div><div class=\"line\">    ans += query(rn[u], rn[v], rson, k);</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    tot = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">    root[<span class=\"number\">0</span>] = build(<span class=\"number\">1</span>, n);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mp.find(a[i]) != mp.end()) root[i] = update(root[i - <span class=\"number\">1</span>], <span class=\"number\">1</span>, n, mp[a[i]]);</div><div class=\"line\">        <span class=\"keyword\">else</span> root[i] = root[i - <span class=\"number\">1</span>];</div><div class=\"line\">        mp[a[i]] = i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</div><div class=\"line\">    <span class=\"keyword\">int</span> l, r;</div><div class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;l, &amp;r);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, r - l + <span class=\"number\">1</span> - query(root[l - <span class=\"number\">1</span>], root[r], <span class=\"number\">1</span>, n, l));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","categories":["ACM"],"tags":["数据结构","树状数组","主席树"]},{"title":"HDU 5152 A Strange Problem（线段树+数论）","url":"http://yoursite.com/2015/10/13/hdu5152/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5152\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5152</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>某天你收到了一个信封，信封里是一个奇怪的题目。首先给你一个长度为N的序列，序列为A1,A2,…,AN.然后有M个操作，每个操作为以下三种操作的其中一个：</p>\n<ol>\n<li>输出操作。给你l,r，输出区间和。</li>\n<li>修改操作。给你x，把Ax修改为2^Ax</li>\n<li>加法操作。给你l,r,x，区间加上​​x<br>由于输出操作的结果可能很大，输出结果对2333333取模。</li>\n</ol>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>这道题复杂就是操作2。需要补充一个知识<br>指数循环节：当x &gt;= Phi(C)时, A^x = A ^ (x%Phi(C) + Phi(C)) (mod C). Phi(C)是C的欧拉函数，<br>对于2333333这个模数来说，求18次欧拉函数后就变成了1，所以只需要保存19层第三次操作的加数即可，然后就直接是线段树区间更新和询问操作了<br>参考题解写的代码，主要是计算操作二的时候，用一个vector记录某一位置操作二的个数，其实只需要记录最后的19个操作即可。具体细节见代码</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m, rt &lt;&lt; 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m+1, r, rt &lt;&lt; 1 | 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">2333333</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">50005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> mo[<span class=\"number\">20</span>] = &#123;<span class=\"number\">2333333</span>, <span class=\"number\">2196720</span>, <span class=\"number\">580608</span>, <span class=\"number\">165888</span>, <span class=\"number\">55296</span>, <span class=\"number\">18432</span>, <span class=\"number\">6144</span>, <span class=\"number\">2048</span>, <span class=\"number\">1024</span>, <span class=\"number\">512</span>, <span class=\"number\">256</span>, <span class=\"number\">128</span>, <span class=\"number\">64</span>, <span class=\"number\">32</span>, <span class=\"number\">16</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> pow2[<span class=\"number\">33</span>];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;ll&gt; vt[N];</div><div class=\"line\">ll mark[N &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> len[N &lt;&lt; <span class=\"number\">2</span>], sum[N &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    x += y;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &gt;= mod) x -= mod;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">up</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    sum[rt]  = sum[rt &lt;&lt; <span class=\"number\">1</span>] + sum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</div><div class=\"line\">    add(sum[rt], <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">down</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mark[rt]) &#123;</div><div class=\"line\">        mark[rt &lt;&lt; <span class=\"number\">1</span>] += mark[rt];</div><div class=\"line\">        mark[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += mark[rt];</div><div class=\"line\">        add(sum[rt &lt;&lt; <span class=\"number\">1</span>], <span class=\"number\">1L</span>L * len[rt &lt;&lt; <span class=\"number\">1</span>] * mark[rt] % mod);</div><div class=\"line\">        add(sum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>], <span class=\"number\">1L</span>L * len[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] * mark[rt] % mod);</div><div class=\"line\">        mark[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    mark[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    len[rt] = r - l + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">        vt[l].clear();</div><div class=\"line\">        vt[l].pb(x);</div><div class=\"line\">        sum[rt] = x % mod;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    build(lson);</div><div class=\"line\">    build(rson);</div><div class=\"line\">    up(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class=\"keyword\">return</span> sum[rt];</div><div class=\"line\">    down(rt);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>, ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) add(ret, query(L, R, lson));</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) add(ret, query(L, R, rson));</div><div class=\"line\">    up(rt);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        mark[rt] += v;</div><div class=\"line\">        add(sum[rt], <span class=\"number\">1L</span>L * len[rt] * v % mod);</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    down(rt);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) update(L, R, v, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) update(L, R, v, rson);</div><div class=\"line\">    up(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow_mod</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> mod)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(n) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) ret = <span class=\"number\">1L</span>L * ret * x % mod;</div><div class=\"line\">        x = <span class=\"number\">1L</span>L * x * x % mod;</div><div class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;ll&gt; &amp;v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (v.size() &lt; <span class=\"number\">19</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = v.size() - <span class=\"number\">1</span>;</div><div class=\"line\">        ll ret = v[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v[<span class=\"number\">0</span>] &gt;= mo[pos]) &#123;</div><div class=\"line\">            flag = <span class=\"literal\">true</span>;</div><div class=\"line\">            ret = ret % mo[pos] + mo[pos];</div><div class=\"line\">        &#125;</div><div class=\"line\">        pos--;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; v.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">                ret = (pow_mod(<span class=\"number\">2</span>, ret, mo[pos]) + v[i]) % mo[pos] + mo[pos];</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (ret &gt;= <span class=\"number\">30</span> || pow2[ret] &gt;= mo[pos]) &#123;</div><div class=\"line\">                    flag = <span class=\"literal\">true</span>;</div><div class=\"line\">                    ret = (pow_mod(<span class=\"number\">2</span>, ret, mo[pos]) + v[i]) % mo[pos] + mo[pos];</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    ret = pow2[ret] + v[i];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (ret &gt;= mo[pos]) &#123;</div><div class=\"line\">                        flag = <span class=\"literal\">true</span>;</div><div class=\"line\">                        ret = ret % mo[pos] + mo[pos];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            pos--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> ret % mod;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ll ret = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">17</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = v.size() - <span class=\"number\">18</span>; i &lt; v.size(); i++) &#123;</div><div class=\"line\">            ret = (pow_mod(<span class=\"number\">2</span>, ret, mo[pos]) + v[i]) % mo[pos] + mo[pos];</div><div class=\"line\">            pos--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> ret % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mark[rt]) &#123;</div><div class=\"line\">            vt[l][vt[l].size() - <span class=\"number\">1</span>] += mark[rt];</div><div class=\"line\">            mark[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        vt[l].pb(<span class=\"number\">0</span>);</div><div class=\"line\">        sum[rt] = cal(vt[l]);</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    down(rt);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= m) modify(x, lson);</div><div class=\"line\">    <span class=\"keyword\">else</span> modify(x, rson);</div><div class=\"line\">    up(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    pow2[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">30</span>; i++) pow2[i] = pow2[i - <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> op, l, r, x;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m)) &#123;</div><div class=\"line\">        build(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;op);</div><div class=\"line\">            <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;l, &amp;r);</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, query(l, r, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>));</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">                modify(x, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;l, &amp;r, &amp;x);</div><div class=\"line\">                update(l, r, x, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["线段树","数论"]},{"title":"HDU 5151 Sit sit sit（区间dp）","url":"http://yoursite.com/2015/10/13/hdu5151/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5151\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5151</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n个人陆续坐到n个椅子上，每张椅子为两种颜色中的一种。每个人每次可以选择一个空位置，如果该空位置两边都有人，且两边的椅子颜色不同，那么他便不能坐下，需要离开。现在问n个人全部坐下的方案数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>dp[i][j]表示编号i-j的位置上都有人坐下的方案数。dp[i][i] = 1, dp[i][i+1] = 2<br>dp[i][j] =sum(dp[i][k-1] <em> dp[k+1][j] </em> C(j-i, k-i-1)) 当i-k-1有人坐下，k+1-j有人坐下，此时来的人坐在k的方案数累积<br>C(j-i, k-i-1)表示前面的j-i个人有k-i-1个人选择坐在了左边的方案数</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> CN = <span class=\"number\">111</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1000000007</span>;</div><div class=\"line\">ll c[CN][CN]= &#123;&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cinit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">        c[i][<span class=\"number\">0</span>] = c[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; i; j++) &#123;</div><div class=\"line\">            c[i][j] = c[i - <span class=\"number\">1</span>][j] + c[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (c[i][j] &gt; mod) c[i][j] -= mod;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ll dp[CN][CN];</div><div class=\"line\"><span class=\"keyword\">int</span> n, a[CN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    cinit();</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">            dp[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">            dp[i][i + <span class=\"number\">1</span>] = <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">3</span>; l &lt;= n; l++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i + l &lt;= n; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> j = i + l - <span class=\"number\">1</span>;</div><div class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"comment\">//head</span></div><div class=\"line\">                dp[i][j] += dp[i + <span class=\"number\">1</span>][j];</div><div class=\"line\">                <span class=\"comment\">//mid</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j - <span class=\"number\">1</span>; k++) <span class=\"keyword\">if</span> (a[k - <span class=\"number\">1</span>] == a[k + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                    dp[i][j] += c[l - <span class=\"number\">1</span>][k - i] * dp[i][k - <span class=\"number\">1</span>] % mod * dp[k + <span class=\"number\">1</span>][j] % mod;</div><div class=\"line\">                    dp[i][j] %= mod;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//tail</span></div><div class=\"line\">                dp[i][j] += dp[i][j - <span class=\"number\">1</span>];</div><div class=\"line\">                dp[i][j] %= mod;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, dp[<span class=\"number\">0</span>][n - <span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["区间dp"]},{"title":"HDU 5085 Counting problem（暴力+HashTable）","url":"http://yoursite.com/2015/10/11/hdu5085/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5085\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5085</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>定义f(n,k) = 各位数字的k次方和。例如f(305, 2) = 5^2 + 0^2 + 3^2 = 34<br>给定a,b,k,s。求[a,b]区间内满足f(n,k)=s的数字个数<br>1≤a≤b≤999999999;    1≤k≤15;    1≤S≤10^16</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>把n分为按照长度分为两半部分，前半部分暴力枚举，后半部分加入hash表中，这样将复杂度降到sqrt(n)hash表中记录每种和的情况数。要注意一些细节：</p>\n<ol>\n<li>不妨设一个B=10000，如果a,b都小于B。直接枚举即可</li>\n<li>当b大于B时，ahead = (a-1) / B, atail = a % B   bhead = b / B, btail = b % B<br>将0~B-1的数字加入hash表时，记录一下以ahead开头符合条件的个数resa，再记录一下以bhead开头的符合条件的resb<br>之后枚举[ahead, bhead), 符合条件的累加到resb中，最后答案即为resb-resa</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"comment\">//Hash Table</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;ll, ll&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 10010</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mod  40007</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HashKey</span> &#123;</span></div><div class=\"line\">    ll key;</div><div class=\"line\">    <span class=\"keyword\">int</span> nxt, cnt;</div><div class=\"line\">&#125; e[MAXN];</div><div class=\"line\"><span class=\"keyword\">int</span> link1[MAXN * <span class=\"number\">4</span>], p, k;</div><div class=\"line\">ll s;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(link1, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(link1));</div><div class=\"line\">    p = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(ll key)</span> </span>&#123;</div><div class=\"line\">    e[p].key = key;</div><div class=\"line\">    e[p].cnt = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> modKey = key % mod;</div><div class=\"line\">    <span class=\"keyword\">if</span> (modKey &lt; <span class=\"number\">0</span>) modKey += mod;</div><div class=\"line\">    e[p].nxt = link1[modKey];</div><div class=\"line\">    link1[modKey] = p++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Find</span><span class=\"params\">(ll key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> modKey = key % mod;</div><div class=\"line\">    <span class=\"keyword\">if</span> (modKey &lt; <span class=\"number\">0</span>) modKey += mod;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = link1[modKey]; i != <span class=\"number\">-1</span>; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e[i].key == key) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    ll ans = <span class=\"number\">0</span>, tmp = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> t = x % <span class=\"number\">10</span>;</div><div class=\"line\">        x /= <span class=\"number\">10</span>;</div><div class=\"line\">        tmp = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) tmp *= t;</div><div class=\"line\">        ans += tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ans &gt; s) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;</div><div class=\"line\">    ll ans = calc(x);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ans &gt; s || ans == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> ;</div><div class=\"line\">    <span class=\"keyword\">int</span> k = Find(ans);</div><div class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">-1</span>) add(ans);</div><div class=\"line\">    <span class=\"keyword\">else</span> e[k].cnt++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> ahead)</span> </span>&#123;</div><div class=\"line\">    ll ans = calc(ahead);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ans == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ans &lt;= s) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = Find(s - ans);</div><div class=\"line\">        <span class=\"keyword\">if</span> (x != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> e[x].cnt;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ll a, b;</div><div class=\"line\">    <span class=\"keyword\">int</span> B = <span class=\"number\">10000</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%I64d%I64d%d%I64d\"</span>, &amp;a, &amp;b, &amp;k, &amp;s)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (b &lt; B) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = a; i &lt;= b; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (calc(i) == s) res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\">        <span class=\"keyword\">int</span> bhead = b / B, btail = b % B;</div><div class=\"line\">        <span class=\"keyword\">int</span> ahead = (a - <span class=\"number\">1</span>) / B, atail = (a - <span class=\"number\">1</span>) % B;</div><div class=\"line\">        ll resa = <span class=\"number\">0</span>, resb = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (atail &lt; btail) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= atail; i++) solve(i);</div><div class=\"line\">            resa = work(ahead);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = atail + <span class=\"number\">1</span>; i &lt;= btail; i++) solve(i);</div><div class=\"line\">            resb = work(bhead);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = btail + <span class=\"number\">1</span>; i &lt; B; i++) solve(i);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= btail; i++) solve(i);</div><div class=\"line\">            resb = work(bhead);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = btail + <span class=\"number\">1</span>; i &lt;= atail; i++) solve(i);</div><div class=\"line\">            resa = work(ahead);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = atail + <span class=\"number\">1</span>; i &lt; B; i++) solve(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = ahead; i &lt; bhead; i++) resb += work(i);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, resb - resa);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["HashTable"]},{"title":"HDU 5148 Cities（树dp）","url":"http://yoursite.com/2015/10/10/hdu5148/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5148\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5148</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一棵树，数的节点数为n。问从中选出K个点，使得这些点之间的距离和最小</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>考虑每条边的贡献，一条边会把树分成两部分，若在其中一部分里选择了x个点，则这条边被统计的次数为x<em>(K-x)</em>2. 那么考虑dp[u][i]表示在u的子树中选择了i个点的最小代价，有转移dp[u][i] = min(dp[u][i-j]+ dp[v][j] + j<em>(K-j)</em>2*c)​​<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int, int&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> K, n;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt; pii &gt; g[N];</div><div class=\"line\">ll dp[N][<span class=\"number\">55</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(ll &amp;x, ll v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">-1</span> || x &gt; v) x = v;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    dp[u][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][i].fi, c = g[u][i].se;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        dfs(v, u);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = K - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">1</span>; j--) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dp[u][j] == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; j + k &lt;= K; k++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (dp[v][k] == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                change(dp[u][j + k], dp[u][j] + dp[v][k] + (ll)<span class=\"number\">2</span> * k * (K - k) * c);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t, u, v, c;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;K);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            g[i].clear();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= K; j++) dp[i][j] = <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;u, &amp;v, &amp;c);</div><div class=\"line\">            g[u].pb(&#123;v, c&#125;);</div><div class=\"line\">            g[v].pb(&#123;u, c&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        dfs(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">        ll ans = dp[<span class=\"number\">1</span>][K];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) <span class=\"keyword\">if</span> (dp[i][K] != <span class=\"number\">-1</span>) ans = min(ans, dp[i][K]);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["树dp"]},{"title":"HDU 5183 Negative and Positive (NP)（HashTable）","url":"http://yoursite.com/2015/10/09/hdu5183/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5183\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5183</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定n个数的序列（A0,A1,A2…,An-1) 规定NP-sum(i,j) = Ai - Ai+1 + Ai+2 + (-1)^(j-i)Aj<br>现在给定一个K，问是否有一个NP-sum(i,j)=K<br>1≤n≤1000000,−1000000000≤ai≤1000000000,−1000000000≤K≤1000000000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>sum[i]=a1−a2+a3…。手写一个哈希表来保存所有出现过的sum值,然后根据奇偶性分类判断在哈系表中是否存在对应的子序列满足题意</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"comment\">//Hash Table</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 1001000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mod  4000007</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HashKey</span> &#123;</span></div><div class=\"line\">    ll key;</div><div class=\"line\">    <span class=\"keyword\">int</span> nxt, pos;</div><div class=\"line\">&#125;e[MAXN];</div><div class=\"line\"><span class=\"keyword\">int</span> link1[MAXN * <span class=\"number\">4</span>], p;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(link1, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(link1));</div><div class=\"line\">    p = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(ll key, <span class=\"keyword\">int</span> pos)</span> </span>&#123;</div><div class=\"line\">    e[p].key = key;</div><div class=\"line\">    e[p].pos = pos &amp; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> modKey = key % mod;</div><div class=\"line\">    <span class=\"keyword\">if</span> (modKey &lt; <span class=\"number\">0</span>) modKey += mod;</div><div class=\"line\">    e[p].nxt = link1[modKey];</div><div class=\"line\">    link1[modKey] = p++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Find</span><span class=\"params\">(ll key, <span class=\"keyword\">int</span> odd)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> modKey = key % mod;</div><div class=\"line\">    <span class=\"keyword\">if</span> (modKey &lt; <span class=\"number\">0</span>) modKey += mod;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = link1[modKey]; i != <span class=\"number\">-1</span>; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e[i].key == key &amp;&amp; e[i].pos == odd) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T, n, k, x;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cas = <span class=\"number\">1</span>; cas &lt;= T; cas++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;k);</div><div class=\"line\">        ll s = <span class=\"number\">0</span>;</div><div class=\"line\">        init();</div><div class=\"line\">        add(s, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">bool</span> ok = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &amp; <span class=\"number\">1</span>) s += x;</div><div class=\"line\">            <span class=\"keyword\">else</span> s -= x;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!ok) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Find(s - k, <span class=\"number\">0</span>)) ok = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Find(s + k, <span class=\"number\">1</span>)) ok = <span class=\"literal\">true</span>;</div><div class=\"line\">                add(s, i);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %s.\\n\"</span>, cas, ok ? <span class=\"string\">\"Yes\"</span> : <span class=\"string\">\"No\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["HashTable"]},{"title":"HDU 5084 HeHe（矩阵+强行找规律）","url":"http://yoursite.com/2015/10/09/hdu5084/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5084\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5084</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个矩阵，矩阵的形式如下：<br>M = |tn,   tn+1, …, t2<em>n-1|<br>    |tn-1, tn,   …, t2</em>n-2|<br>    |.                      |<br>    |t1,   t2,   …, tn    |<br>有Q组询问，每次询问A(x,y) 其中A = M * M</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>由于n是1000级别的，所以常规的矩阵乘无法满足条件。<br>观察发现ans[x][y]就是 a[y]<em>a[2</em>n-x] + …. + a[y+n-1]<em>a[n-x+1] 乘的这部分 a[i]</em>a[j] i+j是定值 所以 对于i+j等于某个数的，求个前缀和 最后每个值就O(1)得到了</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</div><div class=\"line\">ll t[<span class=\"number\">2</span> * N], f[<span class=\"number\">3</span> * N][<span class=\"number\">2</span> * N];</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span> * n - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">        f[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">2</span> * n; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt; j &amp;&amp; (i - j) &lt;= <span class=\"number\">2</span> * n - <span class=\"number\">1</span>) f[i][j] = t[j] * t[i - j] + f[i][j - <span class=\"number\">1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">2</span> * n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, t + i);</div><div class=\"line\">        init();</div><div class=\"line\">        ll ans = <span class=\"number\">0</span>, ret = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> r, c, m;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;r, &amp;c);</div><div class=\"line\">            r = (r + ret) % n + <span class=\"number\">1</span>;</div><div class=\"line\">            c = (c + ret) % n + <span class=\"number\">1</span>;</div><div class=\"line\">            ret = f[<span class=\"number\">2</span> * n - r + c][<span class=\"number\">2</span> * n - r] - f[<span class=\"number\">2</span> * n - r + c][n - r];</div><div class=\"line\">            ans += ret;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["想法"]},{"title":"HDU 5021 Revenge of kNN II（二分+树状数组）","url":"http://yoursite.com/2015/10/09/hdu5021/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5021\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5021</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定n个点，每个点有一个值。现在有一些询问，每次用离某点距离最小的K个点的平均值来更新该点的值，如果有两个点距离相同，去index小的点。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ol>\n<li>可以用二分来求每次离该点最近的K个点，二分离该点的距离值即可。注意一些细节问题</li>\n<li>用树状数组来维护距离和</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, q;</div><div class=\"line\"><span class=\"keyword\">int</span> x[N], v[N], rk[N], p[N];</div><div class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; d[N];</div><div class=\"line\"><span class=\"keyword\">double</span> c[N], b[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, x + i, v + i);</div><div class=\"line\">            d[i] = make_pair(x[i], i);</div><div class=\"line\">            c[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(d + <span class=\"number\">1</span>, d + n + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            rk[d[i].second] = i;</div><div class=\"line\">            b[i] = v[d[i].second];</div><div class=\"line\">            p[i] = d[i].first;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;= n; j += j &amp; -j) c[j] += b[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(q--) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> i, k, dis;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;i, &amp;k);</div><div class=\"line\">            dis = x[i];</div><div class=\"line\">            i = rk[i];</div><div class=\"line\">            <span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1e9</span>, mid;</div><div class=\"line\">            <span class=\"keyword\">while</span>(l &lt; r) &#123;</div><div class=\"line\">                mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> sum = upper_bound(p + <span class=\"number\">1</span>, p + n + <span class=\"number\">1</span>, dis + mid) - lower_bound(p + <span class=\"number\">1</span>, p + n + <span class=\"number\">1</span>, dis - mid);</div><div class=\"line\">                <span class=\"keyword\">if</span> (sum &gt;= k + <span class=\"number\">1</span>) r = mid;</div><div class=\"line\">                <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">int</span> L = lower_bound(p + <span class=\"number\">1</span>, p + n + <span class=\"number\">1</span>, dis - r) - p;</div><div class=\"line\">            <span class=\"keyword\">int</span> R = upper_bound(p + <span class=\"number\">1</span>, p + n + <span class=\"number\">1</span>, dis + r) - p - <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (L + k != R) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (d[L].second &lt; d[R].second) --R;</div><div class=\"line\">                <span class=\"keyword\">else</span> ++L;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">double</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = R; j &gt; <span class=\"number\">0</span>; j -= j &amp; -j) sum += c[j];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = L - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j -= j &amp; -j) sum -= c[j];</div><div class=\"line\">            sum -= b[i];</div><div class=\"line\">            sum /= k;</div><div class=\"line\">            ans += sum;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;= n; j += j &amp; -j) c[j] += sum - b[i];</div><div class=\"line\">            b[i] = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3lf\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["树状数组","二分"]},{"title":"HDU 5064 Find Sequence（LIS+dp）","url":"http://yoursite.com/2015/10/07/hdu5064/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5064\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5064</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定n个正整数，这n个数相加为M（0&lt;M≤2^22）。问从这n个数选出一些数，从小到大排序，使得b2-b1≤b3-b2……≤bt-bt-1。求t的最大值</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先考虑解的结构一定是C1,C1……C2,C3……Cm。其中C1&lt;C2&lt;……&lt;Cm。所以可以对ai去重后排序。可以知道此时的ai的个数为sqrt(M)级别的。<br>然后用dp[i][j]表示以aj结尾，ai为倒数第二个数的最优解。dp[i][j] = max(dp[k][i]) + 1, 其中ai-ak≤aj-ai<br>这样的复杂度是O(n^3),其中n为1000级别的，会TLE。<br>发现有一个优化：dp[i][j+1] = max(dp[k][i]) + 1, 其中ai-ak≤aj-ai&lt;aj+1-ai。所以重复的部分只需要计算一次即可。这样复杂度降到O(n^2)</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3000</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N * N], cnt[N], dp[N][N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b) a = b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">        sort(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> cur;</div><div class=\"line\">        cnt[cur = <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[i] == a[cur]) cnt[cur]++;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                a[++cur] = a[i];</div><div class=\"line\">                cnt[cur] = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        n = cur;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) dp[i][i] = cnt[i];</div><div class=\"line\">        <span class=\"keyword\">int</span> k, res, ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            k = i;</div><div class=\"line\">            res = dp[i][i];</div><div class=\"line\">            change(ans, res);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (; k &gt; <span class=\"number\">0</span> &amp;&amp; a[i] - a[k] &lt;= a[j] - a[i]; k--) change(res, dp[k][i] + <span class=\"number\">1</span>);</div><div class=\"line\">                dp[i][j] = res;</div><div class=\"line\">                change(ans, res);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["dp","LIS"]},{"title":"HDU 5020 Revenge of Collinearity（n个点三点共线）","url":"http://yoursite.com/2015/09/29/hdu5020/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5020\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5020</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定n个点，问有多少个三点共线的三元组。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>以每个点为基点进行极角排序，统计三点共线的个数。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1111</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> x[N], y[N];</div><div class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; v[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t, n, tot;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, x + i, y + i);</div><div class=\"line\">        ll ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            tot = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) <span class=\"keyword\">if</span> (i != j) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> dx = x[i] - x[j], dy = y[i] - y[j];</div><div class=\"line\">                <span class=\"keyword\">int</span> d = __gcd(dx, dy);</div><div class=\"line\">                dx /= d, dy /= d;</div><div class=\"line\">                <span class=\"keyword\">if</span> (dx != <span class=\"number\">0</span> &amp;&amp; dy != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (dx &lt; <span class=\"number\">0</span>) dx *= <span class=\"number\">-1</span>, dy *= <span class=\"number\">-1</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> dx = max(dx, -dx), dy = max(dy, -dy);</div><div class=\"line\">                v[tot++] = make_pair(dx, dy);</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(v, v + tot);</div><div class=\"line\">            <span class=\"keyword\">int</span> now = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span> || v[j] != v[j - <span class=\"number\">1</span>]) now = j;</div><div class=\"line\">                ans += j - now;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans / <span class=\"number\">3</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["计算几何","三点共线"]},{"title":"HDU 4992 Primitive Roots（求一个数的所有原根）","url":"http://yoursite.com/2015/09/25/hdu4992/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4992\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4992</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个数n，求n的所有原根，按照从小到大输出，如果没有原根输出-1</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>原根的定义：g^d % p = 1 其中d最小为phi(p)，则g便为一个原根</p>\n<ol>\n<li><p>一个数是否有原根<br> 判断数是否有原根：模n有原根的充要条件是n = 1,2,4,p,2p,p^q，其中p是奇质数，q是任意正整数。</p>\n</li>\n<li><p>若有，找其最小原根<br>然后用欧拉公式求出n的m=φ(n)，从2~n-1遍历找出n的最小原根a：判断a^m % n==1 是否成立<br>计算出所有m的因子（1和m除外）y，若a^y % n==1，则a不可能是n的原根。因为存在性质：如果正整数gcd(a,m) = 1，正整数 d 满足a^d≡1(mod m)，则 d 整除 φ(m)。</p>\n</li>\n<li><p>已知一个原根，得到所有原根<br> 得到所有a^x % n {2&lt;=x&lt;m，gcd(x,m)==1}的值为n的原根<br> 证明：<a href=\"http://blog.csdn.net/solotzg/article/details/39205337\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/solotzg/article/details/39205337</a></p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000000</span></div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxn + <span class=\"number\">10</span>], valid[maxn + <span class=\"number\">10</span>], tot = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> &amp;tot, <span class=\"keyword\">int</span> ans[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!valid[i]) ans[tot++] = i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot &amp;&amp; i * ans[j] &lt;= n; j++) &#123;</div><div class=\"line\">            valid[i * ans[j]] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i % ans[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">///判断是否有原根</span></div><div class=\"line\"><span class=\"comment\">///判断数是否有原根：模n有原根的充要条件是n = 1,2,4,p,2p,p^q，其中p是奇质数，q是任意正整数。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">has_primitive_root</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) n /= <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; ans[i] * ans[i] &lt;= n; i++) <span class=\"keyword\">if</span> (n % ans[i] == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(n % ans[i] == <span class=\"number\">0</span>) n /= ans[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (n != <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">///得到最小的原根</span></div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll a, ll x, ll p)</span> </span>&#123;</div><div class=\"line\">    ll res = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &amp; <span class=\"number\">1</span>) res = res * a % p;</div><div class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        a = a * a % p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">euler</span><span class=\"params\">(ll x)</span> </span>&#123;</div><div class=\"line\">    ll res = x;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; ans[i] * ans[i] &lt;= x; i++) <span class=\"keyword\">if</span> (x % ans[i] == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        res = res / ans[i] * (ans[i] - <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">while</span>(x % ans[i] == <span class=\"number\">0</span>) x /= ans[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">1</span>) res = res / x * (x - <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;ll&gt; a;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">g_test</span><span class=\"params\">(ll g, ll p, ll fhi_n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; i &lt; a.size(); i++)</div><div class=\"line\">        <span class=\"keyword\">if</span> (pow_mod(g, fhi_n / a[i], p) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">primitive_root</span><span class=\"params\">(ll p, ll fhi_n)</span> </span>&#123;</div><div class=\"line\">    a.clear();</div><div class=\"line\">    ll tmp = fhi_n;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; ans[i] * ans[i] &lt;= tmp; i++) <span class=\"keyword\">if</span> (tmp % ans[i] == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//这里还可以用筛素数优化</span></div><div class=\"line\">        a.push_back(ans[i]);</div><div class=\"line\">        <span class=\"keyword\">while</span>(tmp % ans[i] == <span class=\"number\">0</span>) tmp /= ans[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (tmp != <span class=\"number\">1</span>) a.push_back(tmp);</div><div class=\"line\">    ll g = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pow_mod(g, fhi_n, p) != <span class=\"number\">1</span>) &#123; <span class=\"comment\">///要先判断g^fhi_n % p == 1</span></div><div class=\"line\">            g++;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (g_test(g, p, fhi_n)) <span class=\"keyword\">return</span> g;</div><div class=\"line\">        g++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">///根据最小原根得到所有原根</span></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; Getall_primitive_root(<span class=\"keyword\">int</span> g, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> fhi_n) &#123;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</div><div class=\"line\">    res.pb(g);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; fhi_n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (__gcd(i, fhi_n) != <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        res.pb(pow_mod(g, i, n));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    getPrime(maxn, tot, ans);</div><div class=\"line\">    <span class=\"keyword\">int</span> n;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"3\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!has_primitive_root(n)) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ll fhi_n = euler(n);</div><div class=\"line\">        ll g = primitive_root(n, fhi_n);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res = Getall_primitive_root(g, n, fhi_n);</div><div class=\"line\">        sort(res.begin(), res.end());</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; res.size(); i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, res[i], i == res.size() - <span class=\"number\">1</span> ? <span class=\"string\">'\\n'</span> : <span class=\"string\">' '</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["数学","原根"]},{"title":"HDU 4991 Ordered Subsequence（LIS+树状数组）","url":"http://yoursite.com/2015/09/25/hdu4991/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4991\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4991</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个长度为N的序列，问所有长度为M的上升子序列的个数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>另dp[i][j]表示以a[i]为结尾，长度为j的上升子序列的个数，有如下转移方程<br>dp[i][j] = sum(dp[k][j - 1]) 其中k小于i，且a[k]&lt;a[i]<br>朴素的转移是n2<em>m，可以通过树状数组来维护和，复杂度降到n</em>m*log(n)</p>\n<p>取模真心慢。。2s左右的代码，把取模改成减直接300+ms就过了<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">10005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, a[N], b[N];</div><div class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">105</span>][N];</div><div class=\"line\"><span class=\"keyword\">int</span> mod = <span class=\"number\">123456789</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &amp; (-x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x &lt;= n) &#123;</div><div class=\"line\">        s[id][x] += v;</div><div class=\"line\">        <span class=\"keyword\">if</span> (s[id][x] &gt;= mod) s[id][x] -= mod;</div><div class=\"line\">        x += lowbit(x);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">    ll res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        res += s[id][x];</div><div class=\"line\">        <span class=\"keyword\">if</span> (res &gt;= mod) res -= mod;</div><div class=\"line\">        x -= lowbit(x);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i), b[i] = a[i];</div><div class=\"line\">        sort(b, b + n);</div><div class=\"line\">        <span class=\"keyword\">int</span> t = unique(b, b + n) - b;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= m; j++) s[j][i] = <span class=\"number\">0</span>;</div><div class=\"line\">        ll ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> pos = lower_bound(b, b + t, a[i]) - b + <span class=\"number\">1</span>;</div><div class=\"line\">            add(pos, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>; j &lt;= m; j++) &#123;</div><div class=\"line\">                ll tmp = sum(pos - <span class=\"number\">1</span>, j - <span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!tmp) <span class=\"keyword\">break</span>;</div><div class=\"line\">                add(pos, tmp, j);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ans = sum(t, m);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["dp","树状数组","LIS"]},{"title":"HDU 4990 Reading comprehension（分奇偶讨论+矩阵快速幂）","url":"http://yoursite.com/2015/09/25/hdu4990/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4990\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4990</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定n，按照以下程序算出ans。（n为int）<br>    ans=0;<br>    for(i=1;i&lt;=n;i++)<br>    {<br>      if(i&amp;1)ans=(ans<em>2+1)%m;<br>      else ans=ans</em>2%m;<br>    }<br>    printf(“%d\\n”,ans);</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>分奇偶讨论<br>当n为奇数时：fn=4<em>fn-1 + 1，首项为1<br>当n为偶数时：fn=4</em>fn-1 + 2，首项为2<br>之后就矩阵快速幂加速运算即可。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">2</span>;</div><div class=\"line\">ll mod;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    ll a[maxn][maxm];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        n = m = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(a));</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Matrix &amp;b) <span class=\"keyword\">const</span> &#123; <span class=\"comment\">//实现矩阵乘法</span></div><div class=\"line\">        Matrix tmp;</div><div class=\"line\">        tmp.n = n;</div><div class=\"line\">        tmp.m = b.m;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; b.m; j++) tmp.a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!a[i][j]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; b.m; k++)</div><div class=\"line\">                    tmp.a[i][k] += a[i][j] * b.a[j][k], tmp.a[i][k] %= mod;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span><span class=\"params\">(<span class=\"keyword\">const</span> Matrix &amp;b)</span> </span>&#123;</div><div class=\"line\">        n = b.n, m = b.m;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) a[i][j] = b.a[i][j];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"keyword\">int</span> sz)</span> </span>&#123;</div><div class=\"line\">        n = m = sz;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">            a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Matrix A, B;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    A.n = A.m = <span class=\"number\">2</span>;</div><div class=\"line\">    A.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</div><div class=\"line\">    A.a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    A.a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    A.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">Matrix <span class=\"title\">Matrix_pow</span><span class=\"params\">(Matrix A, ll k, ll mod)</span> </span>&#123; <span class=\"comment\">//矩阵快速幂</span></div><div class=\"line\">    Matrix res;</div><div class=\"line\">    res.clear();</div><div class=\"line\">    res.n = res.m = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) res.a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(k) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k &amp; <span class=\"number\">1</span>) res.Copy(A * res);</div><div class=\"line\">        k &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        A.Copy(A * A);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    init();</div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m)) &#123;</div><div class=\"line\">        mod = m;</div><div class=\"line\">        Matrix ans = Matrix_pow(A, n / <span class=\"number\">2</span>, mod);</div><div class=\"line\">        ll res;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) res = ans.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] * <span class=\"number\">1</span> + ans.a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] * <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> res = ans.a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] * <span class=\"number\">2</span>;</div><div class=\"line\">        res = (res + mod) % mod;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, res);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["数学","矩阵"]},{"title":"POJ 3481 Double Queue（SBT平衡二叉树）","url":"http://yoursite.com/2015/09/24/poj3481/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://poj.org/problem?id=3481\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=3481</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个队伍，一开始为空，有四种操作<br>0表示结束<br>1 K P 有一个编号为K的，优先级为P的人加入队伍（队伍中没有相同的K与P）<br>2 优先级最高的人出队<br>3 优先级最低的人出队</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://blog.csdn.net/acm_cxlove/article/details/7790305\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/acm_cxlove/article/details/7790305</a></p>\n<p>平衡二叉树，能够得到第K大的数，也能够求出一个数的rank。<br>这里是找最大值与最小值</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">#include&lt;cstring&gt;</div><div class=\"line\">#include&lt;cstdio&gt;</div><div class=\"line\">#include&lt;algorithm&gt;</div><div class=\"line\">#define <span class=\"built_in\">N</span> <span class=\"number\">1000005</span></div><div class=\"line\">using namespace std;</div><div class=\"line\">struct SBT &#123;</div><div class=\"line\">    //左子树指针，右子树指针，大小，键值</div><div class=\"line\">    <span class=\"built_in\">int</span> <span class=\"built_in\">left</span>, <span class=\"built_in\">right</span>, size, key, <span class=\"built_in\">value</span>;</div><div class=\"line\">    void Init() &#123;</div><div class=\"line\">        <span class=\"built_in\">left</span> = <span class=\"built_in\">right</span> = key = <span class=\"built_in\">value</span> = <span class=\"number\">0</span>;</div><div class=\"line\">        size = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"built_in\">T</span>[<span class=\"built_in\">N</span>];</div><div class=\"line\"><span class=\"built_in\">int</span> root, tot; //根的位置以及节点个数</div><div class=\"line\">//左旋转处理</div><div class=\"line\">void Left_rot(<span class=\"built_in\">int</span> &amp;x) &#123;</div><div class=\"line\">    <span class=\"built_in\">int</span> k = <span class=\"built_in\">T</span>[x].<span class=\"built_in\">right</span>;</div><div class=\"line\">    <span class=\"built_in\">T</span>[x].<span class=\"built_in\">right</span> = <span class=\"built_in\">T</span>[k].<span class=\"built_in\">left</span>;</div><div class=\"line\">    <span class=\"built_in\">T</span>[k].<span class=\"built_in\">left</span> = x;</div><div class=\"line\">    <span class=\"built_in\">T</span>[k].size = <span class=\"built_in\">T</span>[x].size;</div><div class=\"line\">    <span class=\"built_in\">T</span>[x].size = <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[x].<span class=\"built_in\">left</span>].size + <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[x].<span class=\"built_in\">right</span>].size + <span class=\"number\">1</span>;</div><div class=\"line\">    x = k;</div><div class=\"line\">&#125;</div><div class=\"line\">//右旋转处理</div><div class=\"line\">void Right_rot(<span class=\"built_in\">int</span> &amp;x) &#123;</div><div class=\"line\">    <span class=\"built_in\">int</span> k = <span class=\"built_in\">T</span>[x].<span class=\"built_in\">left</span>;</div><div class=\"line\">    <span class=\"built_in\">T</span>[x].<span class=\"built_in\">left</span> = <span class=\"built_in\">T</span>[k].<span class=\"built_in\">right</span>;</div><div class=\"line\">    <span class=\"built_in\">T</span>[k].<span class=\"built_in\">right</span> = x;</div><div class=\"line\">    <span class=\"built_in\">T</span>[k].size = <span class=\"built_in\">T</span>[x].size;</div><div class=\"line\">    <span class=\"built_in\">T</span>[x].size = <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[x].<span class=\"built_in\">left</span>].size + <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[x].<span class=\"built_in\">right</span>].size + <span class=\"number\">1</span>;</div><div class=\"line\">    x = k;</div><div class=\"line\">&#125;</div><div class=\"line\">//调整处理</div><div class=\"line\">void Maintain(<span class=\"built_in\">int</span> &amp;r, bool flag) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span>(flag) &#123; //更新右子树</div><div class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>].<span class=\"built_in\">right</span>].size &gt; <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>].size)</div><div class=\"line\">            Left_rot(r);</div><div class=\"line\">        else <span class=\"built_in\">if</span>(<span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>].<span class=\"built_in\">left</span>].size &gt; <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>].size) &#123;</div><div class=\"line\">            Right_rot(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>);</div><div class=\"line\">            Left_rot(r);</div><div class=\"line\">        &#125; else</div><div class=\"line\">            return;</div><div class=\"line\">    &#125; else &#123; //更新在左子树</div><div class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>].<span class=\"built_in\">left</span>].size &gt; <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>].size)</div><div class=\"line\">            Right_rot(r);</div><div class=\"line\">        else <span class=\"built_in\">if</span>(<span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>].<span class=\"built_in\">right</span>].size &gt; <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>].size) &#123;</div><div class=\"line\">            Left_rot(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>);</div><div class=\"line\">            Right_rot(r);</div><div class=\"line\">        &#125; else</div><div class=\"line\">            return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //更新子树，然后再更新根，直到平衡为止</div><div class=\"line\">    Maintain(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>, <span class=\"built_in\">false</span>);</div><div class=\"line\">    Maintain(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>, <span class=\"built_in\">true</span>);</div><div class=\"line\">    Maintain(r, <span class=\"built_in\">false</span>);</div><div class=\"line\">    Maintain(r, <span class=\"built_in\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">//插入新节点</div><div class=\"line\">void Insert(<span class=\"built_in\">int</span> &amp;r, <span class=\"built_in\">int</span> k, <span class=\"built_in\">int</span> v) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span>(r == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        r = ++tot;</div><div class=\"line\">        <span class=\"built_in\">T</span>[r].Init();</div><div class=\"line\">        <span class=\"built_in\">T</span>[r].key = k;</div><div class=\"line\">        <span class=\"built_in\">T</span>[r].<span class=\"built_in\">value</span> = v;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        <span class=\"built_in\">T</span>[r].size++;</div><div class=\"line\">        <span class=\"built_in\">if</span>(k &lt; <span class=\"built_in\">T</span>[r].key)</div><div class=\"line\">            Insert(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>, k, v);</div><div class=\"line\">        else</div><div class=\"line\">            Insert(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>, k, v);</div><div class=\"line\">        //插入后要调整，保证平衡</div><div class=\"line\">        Maintain(r, k &gt;= <span class=\"built_in\">T</span>[r].key);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//删除结点，利用的是前驱替换</div><div class=\"line\"><span class=\"built_in\">int</span> Remove(<span class=\"built_in\">int</span> &amp;r, <span class=\"built_in\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"built_in\">int</span> d_key;</div><div class=\"line\">    <span class=\"built_in\">if</span>(!r)</div><div class=\"line\">        return <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">T</span>[r].size--;</div><div class=\"line\">    //前者说明就是要删的节点，后两者说明不存在此节点</div><div class=\"line\">    <span class=\"built_in\">if</span>(<span class=\"built_in\">T</span>[r].key == k || (<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span> == <span class=\"number\">0</span> &amp;&amp; k &lt; <span class=\"built_in\">T</span>[r].key) || (<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span> == <span class=\"number\">0</span> &amp;&amp; k &gt; <span class=\"built_in\">T</span>[r].key)) &#123;</div><div class=\"line\">        d_key = <span class=\"built_in\">T</span>[r].key;</div><div class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span> &amp;&amp; <span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>)</div><div class=\"line\">            <span class=\"built_in\">T</span>[r].key = Remove(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>, k + <span class=\"number\">1</span>);</div><div class=\"line\">        else</div><div class=\"line\">            r = <span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span> + <span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>;</div><div class=\"line\">    &#125; else Remove(k &lt; <span class=\"built_in\">T</span>[r].key ? <span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span> <span class=\"symbol\">:</span> <span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>, k);</div><div class=\"line\">&#125;</div><div class=\"line\">//取得最大值，即一直遍历到最右的结点</div><div class=\"line\"><span class=\"built_in\">int</span> Get_Max(<span class=\"built_in\">int</span> r) &#123;</div><div class=\"line\">    while(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>)</div><div class=\"line\">        r = <span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>;</div><div class=\"line\">    return r;</div><div class=\"line\">&#125;</div><div class=\"line\">//取得最小值，即一直遍历到最左的结点</div><div class=\"line\"><span class=\"built_in\">int</span> Get_Min(<span class=\"built_in\">int</span> r) &#123;</div><div class=\"line\">    while(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>)</div><div class=\"line\">        r = <span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>;</div><div class=\"line\">    return r;</div><div class=\"line\">&#125;</div><div class=\"line\">//获得前驱</div><div class=\"line\"><span class=\"built_in\">int</span> Get_Pre(<span class=\"built_in\">int</span> &amp;r, <span class=\"built_in\">int</span> y, <span class=\"built_in\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span>(r == <span class=\"number\">0</span>) return y;</div><div class=\"line\">    <span class=\"built_in\">if</span>(k &gt; <span class=\"built_in\">T</span>[r].key)</div><div class=\"line\">        Get_Pre(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>, r, k);</div><div class=\"line\">    else</div><div class=\"line\">        Get_Pre(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>, y, k);</div><div class=\"line\">&#125;</div><div class=\"line\">//获得后继</div><div class=\"line\"><span class=\"built_in\">int</span> Get_Next(<span class=\"built_in\">int</span> &amp;r, <span class=\"built_in\">int</span> y, <span class=\"built_in\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span>(r == <span class=\"number\">0</span>) return y;</div><div class=\"line\">    <span class=\"built_in\">if</span>(k &lt; <span class=\"built_in\">T</span>[r].key)</div><div class=\"line\">        Get_Next(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>, r, k);</div><div class=\"line\">    else</div><div class=\"line\">        Get_Next(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>, y, k);</div><div class=\"line\">&#125;</div><div class=\"line\">//取得第K小的数，注：暂不能解决有重复数的</div><div class=\"line\"><span class=\"built_in\">int</span> Get_Kth(<span class=\"built_in\">int</span> &amp;r, <span class=\"built_in\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"built_in\">int</span> <span class=\"built_in\">t</span> = <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>].size + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">if</span>(<span class=\"built_in\">t</span> == k) return <span class=\"built_in\">T</span>[r].key;</div><div class=\"line\">    <span class=\"built_in\">if</span>(<span class=\"built_in\">t</span> &lt; k)  return Get_Kth(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>, k - r);</div><div class=\"line\">    else return Get_Kth(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>, k);</div><div class=\"line\">&#125;</div><div class=\"line\">//获得结点的名次</div><div class=\"line\"><span class=\"built_in\">int</span> Get_Rank(<span class=\"built_in\">int</span> &amp;r, <span class=\"built_in\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span>(k &lt; <span class=\"built_in\">T</span>[r].key)</div><div class=\"line\">        return Get_Rank(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>, k);</div><div class=\"line\">    else <span class=\"built_in\">if</span>(k &gt; <span class=\"built_in\">T</span>[r].key)</div><div class=\"line\">        return Get_Rank(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>, k) + <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>].size + <span class=\"number\">1</span>;</div><div class=\"line\">    else</div><div class=\"line\">        return <span class=\"built_in\">T</span>[<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>].size + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">//排序</div><div class=\"line\">void Inorder(<span class=\"built_in\">int</span> &amp;r) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span>(r == <span class=\"number\">0</span>) return;</div><div class=\"line\">    Inorder(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">left</span>);</div><div class=\"line\">    printf(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">T</span>[r].key);</div><div class=\"line\">    Inorder(<span class=\"built_in\">T</span>[r].<span class=\"built_in\">right</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">int</span> main () &#123;</div><div class=\"line\">    root = tot = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">int</span> x, k, p;</div><div class=\"line\">    while(~scanf(<span class=\"string\">\"%d\"</span>, &amp;x)) &#123;</div><div class=\"line\">        <span class=\"built_in\">if</span> (!x) break;</div><div class=\"line\">        <span class=\"built_in\">if</span> (x == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            scanf(<span class=\"string\">\"%d%d\"</span>, &amp;k, &amp;p);</div><div class=\"line\">            Insert(root, p, k);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">if</span> (x == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">int</span> tmp = Get_Max(root);</div><div class=\"line\">            printf(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">T</span>[tmp].<span class=\"built_in\">value</span>);</div><div class=\"line\">            <span class=\"built_in\">if</span> (<span class=\"built_in\">T</span>[tmp].<span class=\"built_in\">value</span>) Remove(root, <span class=\"built_in\">T</span>[tmp].key);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">if</span> (x == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">int</span> tmp = Get_Min(root);</div><div class=\"line\">            printf(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">T</span>[tmp].<span class=\"built_in\">value</span>);</div><div class=\"line\">            <span class=\"built_in\">if</span> (<span class=\"built_in\">T</span>[tmp].<span class=\"built_in\">value</span>) Remove(root, <span class=\"built_in\">T</span>[tmp].key);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["SBT"]},{"title":"HDU 4988 Little Pony and Boast Busters（动态逆序对 树状数组+treap）","url":"http://yoursite.com/2015/09/24/hdu4988/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4988\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4988</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定上下两个排列 A[], B[]，要求询问相同项之间两两连线的交叉数，并支持交换操作</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>题解： <a href=\"http://www.shuizilong.com/house/archives/bestcoder-round-7-solution/\" target=\"_blank\" rel=\"external\">http://www.shuizilong.com/house/archives/bestcoder-round-7-solution/</a><br>静态问题就是求排列 P[] 的逆序对<br>其中 P[i] = pA[B[i]]（这里 pA[] 是 A[] 中某个元素的位置 类似的 pB[] 是 B[] 中某个元素的位置）<br>考察交换操作，无论是交换下排还是上排，都可以看成交换 P[] 中的两项<br>于是转化成动态逆序对问题，支持修改排列中的任意一项。<br>动态逆序对问题等价于区间 kth 大值（区间 Rank）问题。。可以用经典的树套树方法<br>复杂度 O(nlog2n)。</p>\n<p><a href=\"http://blog.csdn.net/u013654696/article/details/38964519\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u013654696/article/details/38964519</a><br><a href=\"http://blog.csdn.net/cq_phqg/article/details/39070857\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/cq_phqg/article/details/39070857</a></p>\n<p>这里其实就是每一个树状数组的结点都是一颗SBT。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;numeric&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;complex&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100005</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SBT</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">//左子树指针，右子树指针，大小，键值</span></div><div class=\"line\">    <span class=\"keyword\">int</span> left,right,size,key;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        left=right=key=<span class=\"number\">0</span>;</div><div class=\"line\">        size=<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;T[N * <span class=\"number\">50</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> tot; <span class=\"comment\">//根的位置以及节点个数</span></div><div class=\"line\"><span class=\"comment\">//左旋转处理</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Left_rot</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> k=T[x].right;</div><div class=\"line\">    T[x].right=T[k].left;</div><div class=\"line\">    T[k].left=x;</div><div class=\"line\">    T[k].size=T[x].size;</div><div class=\"line\">    T[x].size=T[T[x].left].size+T[T[x].right].size+<span class=\"number\">1</span>;</div><div class=\"line\">    x=k;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//右旋转处理</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Right_rot</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> k=T[x].left;</div><div class=\"line\">    T[x].left=T[k].right;</div><div class=\"line\">    T[k].right=x;</div><div class=\"line\">    T[k].size=T[x].size;</div><div class=\"line\">    T[x].size=T[T[x].left].size+T[T[x].right].size+<span class=\"number\">1</span>;</div><div class=\"line\">    x=k;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//调整处理</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Maintain</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;r,<span class=\"keyword\">bool</span> flag)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;  <span class=\"comment\">//更新右子树</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(T[T[T[r].right].right].size&gt;T[T[r].left].size)</div><div class=\"line\">            Left_rot(r);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T[T[T[r].right].left].size&gt;T[T[r].left].size)&#123;</div><div class=\"line\">            Right_rot(T[r].right);</div><div class=\"line\">            Left_rot(r);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//更新在左子树</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(T[T[T[r].left].left].size&gt;T[T[r].right].size)</div><div class=\"line\">            Right_rot(r);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T[T[T[r].left].right].size&gt;T[T[r].right].size)&#123;</div><div class=\"line\">            Left_rot(T[r].left);</div><div class=\"line\">            Right_rot(r);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//更新子树，然后再更新根，直到平衡为止</span></div><div class=\"line\">    Maintain(T[r].left,<span class=\"literal\">false</span>);</div><div class=\"line\">    Maintain(T[r].right,<span class=\"literal\">true</span>);</div><div class=\"line\">    Maintain(r,<span class=\"literal\">false</span>);</div><div class=\"line\">    Maintain(r,<span class=\"literal\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//插入新节点</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;r,<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        r=++tot;</div><div class=\"line\">        T[r].Init();</div><div class=\"line\">        T[r].key=k;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        T[r].size++;</div><div class=\"line\">        <span class=\"keyword\">if</span>(k&lt;=T[r].key)</div><div class=\"line\">            Insert(T[r].left,k);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            Insert(T[r].right,k);</div><div class=\"line\">        <span class=\"comment\">//插入后要调整，保证平衡</span></div><div class=\"line\">        Maintain(r,k&gt;=T[r].key);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//删除结点，利用的是前驱替换</span></div><div class=\"line\"><span class=\"keyword\">int</span> d_key;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Remove</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;r,<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!r)</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    T[r].size--;</div><div class=\"line\">    <span class=\"comment\">//前者说明就是要删的节点，后两者说明不存在此节点</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(T[r].key==k||(T[r].left==<span class=\"number\">0</span>&amp;&amp;k&lt;T[r].key)||(T[r].right==<span class=\"number\">0</span>&amp;&amp;k&gt;T[r].key))&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(T[r].left&amp;&amp;T[r].right) &#123;</div><div class=\"line\">            Remove(T[r].left,k+<span class=\"number\">1</span>);</div><div class=\"line\">            T[r].key = d_key;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            d_key = T[r].key;</div><div class=\"line\">            r=T[r].left+T[r].right;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> Remove(k&lt;=T[r].key?T[r].left:T[r].right,k);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//取得最大值，即一直遍历到最右的结点</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get_Max</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(T[r].right)</div><div class=\"line\">        r=T[r].right;</div><div class=\"line\">    <span class=\"keyword\">return</span> r;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//取得最小值，即一直遍历到最左的结点</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get_Min</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(T[r].left)</div><div class=\"line\">        r=T[r].left;</div><div class=\"line\">    <span class=\"keyword\">return</span> r;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获得前驱</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get_Pre</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;r,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> y;</div><div class=\"line\">    <span class=\"keyword\">if</span>(k&gt;T[r].key)</div><div class=\"line\">        Get_Pre(T[r].right,r,k);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        Get_Pre(T[r].left,y,k);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获得后继</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get_Next</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;r,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> y;</div><div class=\"line\">    <span class=\"keyword\">if</span>(k&lt;T[r].key)</div><div class=\"line\">        Get_Next(T[r].left,r,k);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        Get_Next(T[r].right,y,k);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//取得第K小的数，注：暂不能解决有重复数的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get_Kth</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;r,<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t=T[T[r].left].size+<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(t==k) <span class=\"keyword\">return</span> T[r].key;</div><div class=\"line\">    <span class=\"keyword\">if</span>(t&lt;k)  <span class=\"keyword\">return</span> Get_Kth(T[r].right,k-r);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Get_Kth(T[r].left,k);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获得结点的名次</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get_Rank</span><span class=\"params\">(<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (r) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (T[r].key &lt; k) &#123;</div><div class=\"line\">            ans += T[T[r].left].size + <span class=\"number\">1</span>;</div><div class=\"line\">            r = T[r].right;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> r = T[r].left;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inorder</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    Inorder(T[r].left);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T[r].key);</div><div class=\"line\">    Inorder(T[r].right);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, pa[N], pb[N], root[N], a[N], b[N], p[N];</div><div class=\"line\">LL ans;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &amp; (-x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i; i -= lowbit(i))</div><div class=\"line\">        ret += Get_Rank(root[i], v);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &lt;= n; i += lowbit(i))</div><div class=\"line\">        Insert(root[i], v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Del</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &lt;= n; i += lowbit(i))</div><div class=\"line\">        Remove(root[i], v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    tot = <span class=\"number\">0</span>; ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        root[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        pa[a[i]] = i;</div><div class=\"line\">        pb[b[i]] = i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num = pa[b[i]];</div><div class=\"line\">        ans += Rank(i, num);</div><div class=\"line\">        Add(i, num); p[i] = num;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span> <span class=\"params\">(<span class=\"keyword\">int</span> x , <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// postion x , from p[x] to v</span></div><div class=\"line\">    <span class=\"keyword\">int</span> pre = p[x];</div><div class=\"line\">    Del (x , pre);</div><div class=\"line\">    ans = ans - (Rank (x - <span class=\"number\">1</span> , pre) + (n - x - (Rank (n , pre + <span class=\"number\">1</span>) - Rank (x , pre + <span class=\"number\">1</span>))));</div><div class=\"line\">    p[x] = v;</div><div class=\"line\">    ans = ans + (Rank (x - <span class=\"number\">1</span> , v) + (n - x - (Rank (n , v + <span class=\"number\">1</span>) - Rank (x , v + <span class=\"number\">1</span>))));</div><div class=\"line\">    Add (x , v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span> <span class=\"params\">(<span class=\"keyword\">int</span> k , <span class=\"keyword\">int</span> A , <span class=\"keyword\">int</span> B)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        swap (a[A] , a[B]);</div><div class=\"line\">        pa[a[A]] = A;pa[a[B]] = B;</div><div class=\"line\">        update (pb[a[A]] , A);</div><div class=\"line\">        update (pb[a[B]] , B);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        swap (b[A] , b[B]);</div><div class=\"line\">        pb[b[A]] = A;pb[b[B]] = B;</div><div class=\"line\">        update (A , pa[b[A]]);</div><div class=\"line\">        update (B , pa[b[B]]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i), a[i]++;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, b + i), b[i]++;</div><div class=\"line\">        init();</div><div class=\"line\">        <span class=\"keyword\">int</span> q, k, A, B;</div><div class=\"line\">        <span class=\"keyword\">char</span> op[<span class=\"number\">10</span>];</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</div><div class=\"line\">        LL ret = (LL)n * (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(q--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, op);</div><div class=\"line\">            <span class=\"keyword\">if</span> (op[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ret - ans);</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;k, &amp;A, &amp;B);</div><div class=\"line\">                A++, B++;</div><div class=\"line\">                update(k, A, B);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["动态逆序对","树状数组+treap"]},{"title":"HDU 5451 Best Solver（数学+广义Fibonacci循环节+矩阵快速幂）","url":"http://yoursite.com/2015/09/21/hdu5451/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5451\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5451</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>计算（5+2sqrt(6))^(1+2^x) 向下取整 mod m 其中x为int范围，m为质数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://blog.csdn.net/crazy______/article/details/9021169\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/crazy______/article/details/9021169</a><br><a href=\"http://blog.csdn.net/ACdreamers/article/details/25616461\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/ACdreamers/article/details/25616461</a></p>\n<p>另 fn = (a+sqrt(b))^n + (a-sqrt(b))^n<br>化简得到fn+1 = 2a*fn - fn-1<br>其中0&lt;(a-sqrt(b))^n&lt;1 所以可以用矩阵快速幂来求。<br>但是x很大, 所以要用到循环节。即求广义Fibonacci数列循环节。这里直接用(p+1)(p-1)来做循环节</p>\n<p>官方题解里提到(p^2-p)(p^2-1)是一个通用循环节</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">2</span>;</div><div class=\"line\">ll mod;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    ll a[maxn][maxm];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        n = m = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(a));</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Matrix &amp;b) <span class=\"keyword\">const</span> &#123; <span class=\"comment\">//实现矩阵乘法</span></div><div class=\"line\">        Matrix tmp;</div><div class=\"line\">        tmp.n = n;</div><div class=\"line\">        tmp.m = b.m;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; b.m; j++) tmp.a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!a[i][j]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; b.m; k++)</div><div class=\"line\">                    tmp.a[i][k] += a[i][j] * b.a[j][k], tmp.a[i][k] %= mod;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span><span class=\"params\">(<span class=\"keyword\">const</span> Matrix &amp;b)</span> </span>&#123;</div><div class=\"line\">        n = b.n, m = b.m;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) a[i][j] = b.a[i][j];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"keyword\">int</span> sz)</span> </span>&#123;</div><div class=\"line\">        n = m = sz;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">            a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Matrix A, B;</div><div class=\"line\"><span class=\"function\">Matrix <span class=\"title\">Matrix_pow</span><span class=\"params\">(Matrix A, ll k, ll mod)</span> </span>&#123; <span class=\"comment\">//矩阵快速幂</span></div><div class=\"line\">    Matrix res;</div><div class=\"line\">    res.clear();</div><div class=\"line\">    res.n = res.m = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) res.a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(k) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k &amp; <span class=\"number\">1</span>) res.Copy(A * res);</div><div class=\"line\">        k &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        A.Copy(A * A);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll a, ll n, ll p)</span> </span>&#123;</div><div class=\"line\">    ll res = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) res = res * a % p;</div><div class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        a = a * a % p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> x, m;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    A.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">    A.a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</div><div class=\"line\">    A.a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    A.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    A.n = A.m = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mod = m * m - <span class=\"number\">1</span>;</div><div class=\"line\">    ll k = pow_mod(<span class=\"number\">2</span>, x, mod);</div><div class=\"line\">    mod = m;</div><div class=\"line\">    Matrix ans = Matrix_pow(A, k, mod);</div><div class=\"line\">    ll res = (ans.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] * <span class=\"number\">10</span> + ans.a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] * <span class=\"number\">2</span>) % mod;</div><div class=\"line\">    res = (res - <span class=\"number\">1</span> + mod) % mod;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    init();</div><div class=\"line\">    <span class=\"keyword\">int</span> t, cas = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;x, &amp;m);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %d\\n\"</span>, cas++, work());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["广义Fibonacci数列找循环节","数学"]},{"title":"Acdream 1075 神奇的%系列三（广义Fibonacci数列找循环节）","url":"http://yoursite.com/2015/09/21/ACdream1075/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acdream.info/problem?pid=1075\" target=\"_blank\" rel=\"external\">http://acdream.info/problem?pid=1075</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>我们定义一个f(n)函数，f(n) = a <em> f(n - 1) + b </em> f(n - 2), f(1) = c, f(2) = d.<br>问f(n)在模1000000007情况下的最小循环节。即求最小的m，使对任意的n有f(n) % 1000000007 = f(n + m) % 1000000007.</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://blog.csdn.net/ACdreamers/article/details/25616461\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/ACdreamers/article/details/25616461</a></p>\n<p>c=a<em>a+4</em>b<br>c是模p的二次剩余时，枚举n=p-1的因子<br>c是模的二次非剩余时，枚举的n=(p+1)(p-1)因子</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> ll mod = <span class=\"number\">1000000007</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    ll a[maxn][maxm];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        n = m = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(a));</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Matrix &amp;b) <span class=\"keyword\">const</span> &#123; <span class=\"comment\">//实现矩阵乘法</span></div><div class=\"line\">        Matrix tmp;</div><div class=\"line\">        tmp.n = n;</div><div class=\"line\">        tmp.m = b.m;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; b.m; j++) tmp.a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!a[i][j]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; b.m; k++)</div><div class=\"line\">                    tmp.a[i][k] += a[i][j] * b.a[j][k], tmp.a[i][k] %= mod;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span><span class=\"params\">(<span class=\"keyword\">const</span> Matrix &amp;b)</span> </span>&#123;</div><div class=\"line\">        n = b.n, m = b.m;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) a[i][j] = b.a[i][j];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"keyword\">int</span> sz)</span> </span>&#123;</div><div class=\"line\">        n = m = sz;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">            a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Matrix A, B;</div><div class=\"line\"><span class=\"function\">Matrix <span class=\"title\">Matrix_pow</span><span class=\"params\">(Matrix A, ll k, ll mod)</span> </span>&#123; <span class=\"comment\">//矩阵快速幂</span></div><div class=\"line\">    Matrix res;</div><div class=\"line\">    res.clear();</div><div class=\"line\">    res.n = res.m = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) res.a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(k) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k &amp; <span class=\"number\">1</span>) res.Copy(A * res);</div><div class=\"line\">        k &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        A.Copy(A * A);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll a, ll n, ll p)</span> </span>&#123;</div><div class=\"line\">    ll res = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) res = res * a % p;</div><div class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        a = a * a % p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">legendre</span><span class=\"params\">(ll a, ll p)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> pow_mod(a, (p - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>, p);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ll fac[<span class=\"number\">2</span>][<span class=\"number\">500</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> cnt, ct;</div><div class=\"line\">ll pri[<span class=\"number\">6</span>] = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">109</span>, <span class=\"number\">167</span>, <span class=\"number\">500000003</span>&#125;;</div><div class=\"line\">ll num[<span class=\"number\">6</span>] = &#123;<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, ll pro)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dep == cnt) &#123;</div><div class=\"line\">        fac[<span class=\"number\">1</span>][ct++] = pro;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= num[dep]; i++) &#123;</div><div class=\"line\">        dfs(dep + <span class=\"number\">1</span>, pro);</div><div class=\"line\">        pro *= pri[dep];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    cnt = <span class=\"number\">6</span>;</div><div class=\"line\">    ct = <span class=\"number\">0</span>;</div><div class=\"line\">    dfs(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    sort(fac[<span class=\"number\">1</span>], fac[<span class=\"number\">1</span>] + ct);</div><div class=\"line\">    fac[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    fac[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</div><div class=\"line\">    fac[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"number\">500000003</span>;</div><div class=\"line\">    fac[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = <span class=\"number\">1000000006</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(Matrix A, ll n)</span> </span>&#123;</div><div class=\"line\">    Matrix ans = Matrix_pow(A, n, mod);</div><div class=\"line\">    <span class=\"keyword\">return</span> (ans.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span> &amp;&amp; ans.a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] == <span class=\"number\">0</span> &amp;&amp; ans.a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">0</span> &amp;&amp; ans.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] == <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">ll a, b, c, d;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    init();</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld%lld\"</span>, &amp;a, &amp;b, &amp;c, &amp;d)) &#123;</div><div class=\"line\">        ll t = a * a + <span class=\"number\">4</span> * b;</div><div class=\"line\">        A.n = A.m = <span class=\"number\">2</span>;</div><div class=\"line\">        A.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = a;</div><div class=\"line\">        A.a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = b;</div><div class=\"line\">        A.a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        A.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (legendre(t, mod) == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (check(A, fac[<span class=\"number\">0</span>][i])) &#123;</div><div class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, fac[<span class=\"number\">0</span>][i]);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ct; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (check(A, fac[<span class=\"number\">1</span>][i])) &#123;</div><div class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, fac[<span class=\"number\">1</span>][i]);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["广义Fibonacci数列找循环节","数学"]},{"title":"HDU 4565 So Easy!（矩阵, 数学）","url":"http://yoursite.com/2015/09/20/hdu4565/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4565\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4565</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>s=ceil( (a+sqrt(b))^n ) % m</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://blog.csdn.net/crazy______/article/details/9021169\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/crazy______/article/details/9021169</a></p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> mod;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[maxn][maxm];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        n = m = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(a));</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Matrix &amp;b) <span class=\"keyword\">const</span> &#123; <span class=\"comment\">//实现矩阵乘法</span></div><div class=\"line\">        Matrix tmp;</div><div class=\"line\">        tmp.n = n;</div><div class=\"line\">        tmp.m = b.m;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; b.m; j++) tmp.a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!a[i][j]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; b.m; k++)</div><div class=\"line\">                    tmp.a[i][k] += a[i][j] * b.a[j][k], tmp.a[i][k] %= mod;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span><span class=\"params\">(<span class=\"keyword\">const</span> Matrix &amp;b)</span> </span>&#123;</div><div class=\"line\">        n = b.n, m = b.m;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) a[i][j] = b.a[i][j];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"keyword\">int</span> sz)</span> </span>&#123;</div><div class=\"line\">        n = m = sz;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">            a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Matrix A, B;</div><div class=\"line\"><span class=\"keyword\">int</span> a, b, n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    A.clear(); <span class=\"comment\">//矩阵A是构造的矩阵</span></div><div class=\"line\">    A.n = A.m = <span class=\"number\">2</span>;</div><div class=\"line\">    A.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">2</span> * a % mod;</div><div class=\"line\">    A.a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = (-(a * a - b) % mod + mod) % mod;</div><div class=\"line\">    A.a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    A.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    B.clear();</div><div class=\"line\">    B.n = <span class=\"number\">2</span>;</div><div class=\"line\">    B.m = <span class=\"number\">1</span>;</div><div class=\"line\">    B.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">2</span> * a % mod;</div><div class=\"line\">    B.a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">Matrix <span class=\"title\">Matrix_pow</span><span class=\"params\">(Matrix A, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> mod)</span> </span>&#123; <span class=\"comment\">//矩阵快速幂</span></div><div class=\"line\">    Matrix res;</div><div class=\"line\">    res.clear();</div><div class=\"line\">    res.n = res.m = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) res.a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(k) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k &amp; <span class=\"number\">1</span>) res.Copy(A * res);</div><div class=\"line\">        k &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        A.Copy(A * A);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a, &amp;b, &amp;n, &amp;mod)) &#123;</div><div class=\"line\">        init();</div><div class=\"line\">        A = Matrix_pow(A, n - <span class=\"number\">1</span>, mod);</div><div class=\"line\">        A = A * B;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, A.a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["数学","矩阵"]},{"title":"HDU 4987 Little Pony and Dice（概率dp）","url":"http://yoursite.com/2015/09/20/hdu4987/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4987\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4987</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个 m 面的均匀骰子（[1, m]），然后从 0 出发，根据扔的数字，决定向前走的步数，走到 ≥n 时就停止。<br>求刚好在 n 停止的概率。要求误差 10−5 以内。（1≤m,n≤1e9）</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ol>\n<li><p>当 m 很大时，概率会接近 0，由于误差 10−5，当 m≥600000 时，直接返回 0</p>\n</li>\n<li><p>当n&lt;=m时，到n的概率为 ((1+(1/m))^(n-1))/m<br>计算过程如下：<br>C(n-1,0)/m + C(n-1,1)/m^2 + …. + C(n-1,n-1)/m^n 即一步走到，两步走到，n步走到<br>提出一个1/m, C(n-1,0)+C(n-1,1)/m+…+C(n-1,n-1)/m^(n-1) = (1+1/m)^(n-1)</p>\n</li>\n<li><p>当n&gt;m,且m比较小<br>设dp[i]为走到i的概率，s[i]为前i个概率和<br>if (i &lt;= m) dp[i] = s[i - 1] / m;   //i之前的走一步到达i<br>else dp[i] = (s[i - 1] - s[i - 1 - m]) / m;     //前m个走一步到达i<br>多测试几个数字，会发现当n比较大的时候，答案会收敛于 2/(m+1) </p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">int</span> m, n;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1000000</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> dp[N + <span class=\"number\">100</span>], s[N + <span class=\"number\">100</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;m, &amp;n)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (m &gt;= <span class=\"number\">600000</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"0.00000\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (n &lt;= m) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5lf\\n\"</span>, <span class=\"built_in\">pow</span>(<span class=\"number\">1</span> + <span class=\"number\">1.0</span> / m, n - <span class=\"number\">1</span>) / m);</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>, s[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (i &lt;= m) dp[i] = s[i - <span class=\"number\">1</span>] / m;</div><div class=\"line\">                    <span class=\"keyword\">else</span> dp[i] = (s[i - <span class=\"number\">1</span>] - s[i - <span class=\"number\">1</span> - m]) / m;</div><div class=\"line\">                    s[i] = s[i - <span class=\"number\">1</span>] + dp[i];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (i &gt;= m &amp;&amp; <span class=\"built_in\">abs</span>(dp[i] - <span class=\"number\">2.</span> / (m + <span class=\"number\">1</span>)) &lt;= <span class=\"number\">1e-9</span>) &#123;</div><div class=\"line\">                        n = i;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5lf\\n\"</span>, dp[n]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["概率dp"]},{"title":"HDU 5072 Coprime（同色三角形模型+容斥）","url":"http://yoursite.com/2015/09/20/hdu5072/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5072\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5072</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定n个数，求有多少对(a,b,c)满足两两互质或两两不互质。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>把三个数当做三角形的三个点，两个数之间的关系为边。互质为0，不互质为1.<br>则关系有(0,0,0),(1,1,1)是满足条件的。<br>如果a，b，c不符合条件，必然有一对互质，一对不互质，不妨设a，b互质，b，c不互质，于是我们可以枚举b来统计所有的三元组：如果a，c互质那么这样的三元组中b，c可以互换位置；如果a，c不互质，那么a，b可以互换位置。每个答案被算了两遍。<br>所以只要枚举每个b，统计出k个和它不互质的，那么剩下n-1-k个就是和它互质的，那么三元组就有k*(n-1-k)/2种。</p>\n<p>如何计算所有数中与某一个数字不互质的个数。由于数字小于等于1e5（2<em>3</em>5<em>7</em>11<em>13</em>17&gt;10^5）所以质因子的个数不会超过6个。所以可以用二进制枚举每个数的质因子组合，如果某个数是其倍数，则一定不互质。用容斥原理来计算。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 100000</span></div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxn + <span class=\"number\">10</span>], valid[maxn + <span class=\"number\">10</span>], tot = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> &amp;tot, <span class=\"keyword\">int</span> ans[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!valid[i]) ans[tot++] = i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot &amp;&amp; i * ans[j] &lt;= n; j++) &#123;</div><div class=\"line\">            valid[i * ans[j]] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i % ans[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxn + <span class=\"number\">10</span>][<span class=\"number\">6</span>], b[maxn + <span class=\"number\">10</span>][<span class=\"number\">6</span>], cnt[maxn + <span class=\"number\">10</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">factor</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> a[][<span class=\"number\">6</span>], <span class=\"keyword\">int</span> b[][<span class=\"number\">6</span>], <span class=\"keyword\">int</span> cnt[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp, now;</div><div class=\"line\">    <span class=\"keyword\">int</span> &amp;tot = cnt[n];</div><div class=\"line\">    tot = <span class=\"number\">0</span>;</div><div class=\"line\">    now = n;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; (ll)ans[i] * ans[i] &lt;= now; i++) <span class=\"keyword\">if</span> (now % ans[i] == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        a[n][tot] = ans[i], b[n][tot] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(now % ans[i] == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            b[n][tot]++;</div><div class=\"line\">            now /= ans[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        tot++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (now != <span class=\"number\">1</span>) a[n][tot] = now, b[n][tot++] = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    getPrime(maxn, tot, ans);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= maxn; i++) factor(i, a, b, cnt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> s[maxn + <span class=\"number\">10</span>], num[maxn + <span class=\"number\">10</span>], n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    init();</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, num + i);</div><div class=\"line\">            <span class=\"keyword\">int</span> tot = <span class=\"number\">1</span> &lt;&lt; cnt[num[i]];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> tmp = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cnt[num[i]]; k++) <span class=\"keyword\">if</span> (j &gt;&gt; k &amp; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    tmp *= a[num[i]][k];</div><div class=\"line\">                &#125;</div><div class=\"line\">                s[tmp]++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ll ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> tot = <span class=\"number\">1</span> &lt;&lt; cnt[num[i]];</div><div class=\"line\">            ll res = n;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> tmp = <span class=\"number\">1</span>, x = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cnt[num[i]]; k++) <span class=\"keyword\">if</span> (j &gt;&gt; k &amp; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    tmp *= a[num[i]][k];</div><div class=\"line\">                    x++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x % <span class=\"number\">2</span>) res += s[tmp];</div><div class=\"line\">                <span class=\"keyword\">else</span> res -= s[tmp];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (res) ans += (res - <span class=\"number\">1</span>) * (n - res);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ans = (ll)n * (n - <span class=\"number\">1</span>) * (n - <span class=\"number\">2</span>) / <span class=\"number\">6</span> - ans / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["同色三角形模型","容斥"]},{"title":"ZOJ 3774 Power of Fibonacci（斐波那契数列的幂和）","url":"http://yoursite.com/2015/09/10/zoj3774/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5237\" target=\"_blank\" rel=\"external\">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5237</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>求前n项斐波那契数的k次幂和</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://blog.csdn.net/acdreamers/article/details/23039571\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/acdreamers/article/details/23039571</a><br>由于5是1000000009的二次剩余，所以可以用一个整数来代替sqrt(5) mod 1000000009<br>要注意在求等比数列时q=1的情况</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define pb push_back</span></div><div class=\"line\"><span class=\"meta\">#define INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#define fi first</span></div><div class=\"line\"><span class=\"meta\">#define se second</span></div><div class=\"line\"><span class=\"meta\">#define debug puts(<span class=\"string\">\"=====================\"</span>)<span class=\"comment\">;</span></span></div><div class=\"line\">using namespace std<span class=\"comment\">;</span></div><div class=\"line\">typedef long long ll<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">int</span> N = <span class=\"number\">100005</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">const</span> ll <span class=\"built_in\">mod</span> = <span class=\"number\">1e9</span> + <span class=\"number\">9</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">const</span> ll a = <span class=\"number\">691504013</span><span class=\"comment\">; ///a = (1+sqrt(5))/2</span></div><div class=\"line\"><span class=\"keyword\">const</span> ll b = <span class=\"number\">308495997</span><span class=\"comment\">; ///a = (1-sqrt(5))/2</span></div><div class=\"line\"><span class=\"meta\">#define M 100001</span></div><div class=\"line\">ll inv[N], ba[N], rba[N], A[N], B[N], m<span class=\"comment\">;</span></div><div class=\"line\">ll pow_mod(ll a, ll x, ll p) &#123;</div><div class=\"line\">    ll res = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &amp; <span class=\"number\">1</span>) res = res * a % p<span class=\"comment\">;</span></div><div class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">        a = a * a % p<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\">void init() &#123;</div><div class=\"line\">    inv[<span class=\"number\">0</span>] = inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    ba[<span class=\"number\">0</span>] = ba[<span class=\"number\">1</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    rba[<span class=\"number\">0</span>] = rba[<span class=\"number\">1</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    A[<span class=\"number\">0</span>] = B[<span class=\"number\">0</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    A[<span class=\"number\">1</span>] = a, B[<span class=\"number\">1</span>] = b<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">2</span><span class=\"comment\">; i &lt; M; i++) &#123;</span></div><div class=\"line\">        inv[i] = ((<span class=\"built_in\">mod</span> - <span class=\"built_in\">mod</span> / i) * inv[<span class=\"built_in\">mod</span> % i]) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        ba[i] = (ba[i - <span class=\"number\">1</span>] * i) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        rba[i] = (rba[i - <span class=\"number\">1</span>] * inv[i]) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        A[i] = (A[i - <span class=\"number\">1</span>] * a) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        B[i] = (B[i - <span class=\"number\">1</span>] * b) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    m = pow_mod(<span class=\"number\">383008016</span>, <span class=\"built_in\">mod</span> - <span class=\"number\">2</span>, <span class=\"built_in\">mod</span>)<span class=\"comment\">; ///383008016 = sqrt(5), m = 1/sqrt(5)</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ll C(<span class=\"built_in\">int</span> n, <span class=\"built_in\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (ba[n] * rba[k] % <span class=\"built_in\">mod</span> ) * rba[n - k] % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\">ll solve(ll n, ll k) &#123;</div><div class=\"line\">    ll ans = <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> r = <span class=\"number\">0</span><span class=\"comment\">; r &lt;= k; r++) &#123;</span></div><div class=\"line\">        ll t = A[k - r] * B[r] % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        ll c = C(k, r)<span class=\"comment\">;</span></div><div class=\"line\">        ll tmp = n % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"number\">1</span>) tmp = t * (pow_mod(t, n, <span class=\"built_in\">mod</span>) - <span class=\"number\">1</span>) % <span class=\"built_in\">mod</span> * pow_mod(t - <span class=\"number\">1</span>, <span class=\"built_in\">mod</span> - <span class=\"number\">2</span>, <span class=\"built_in\">mod</span>) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        tmp = tmp * c % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (r &amp; <span class=\"number\">1</span>) ans -= tmp<span class=\"comment\">;</span></div><div class=\"line\">        <span class=\"keyword\">else</span> ans += tmp<span class=\"comment\">;</span></div><div class=\"line\">        ans %= <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ans = ans * pow_mod(m, k, <span class=\"built_in\">mod</span>) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    ans = (ans + <span class=\"built_in\">mod</span>) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ans<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">int</span> main () &#123;</div><div class=\"line\">    <span class=\"built_in\">int</span> t<span class=\"comment\">;</span></div><div class=\"line\">    ll n, k<span class=\"comment\">;</span></div><div class=\"line\">    init()<span class=\"comment\">;</span></div><div class=\"line\">    cin&gt;&gt;t<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        scanf(<span class=\"string\">\"%lld%lld\"</span>, &amp;n, &amp;k)<span class=\"comment\">;</span></div><div class=\"line\">        printf(<span class=\"string\">\"%lld\\n\"</span>, solve(n, k))<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["数论","斐波那契数"]},{"title":"HDU 4959 Poor Akagi（卢卡斯数+二次域运算+等比数列求和）","url":"http://yoursite.com/2015/09/10/hdu4959/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4959\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4959</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>求前n项卢卡斯数的k次幂和</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><a href=\"http://blog.csdn.net/ahm001/article/details/38724607\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/ahm001/article/details/38724607</a><br>其实知道了卢卡斯数的通项公式，就比较容易计算了。这道题目因为sqrt(5)不是1000000007的二次剩余，所以就不能够用之前把sqrt(5)当做一个整数的方式来处理。<br>但是可以用定义二次域运算的方式来处理此题，重定义二次域上的运算</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define pb push_back</span></div><div class=\"line\"><span class=\"meta\">#define INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#define fi first</span></div><div class=\"line\"><span class=\"meta\">#define se second</span></div><div class=\"line\"><span class=\"meta\">#define debug puts(<span class=\"string\">\"=====================\"</span>)<span class=\"comment\">;</span></span></div><div class=\"line\">using namespace std<span class=\"comment\">;</span></div><div class=\"line\">typedef long long ll<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">int</span> N = <span class=\"number\">100005</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">const</span> ll <span class=\"built_in\">mod</span> = <span class=\"number\">1e9</span> + <span class=\"number\">7</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"meta\">#define pll pair&lt;ll, ll&gt;</span></div><div class=\"line\">pll operator + (pll a, pll b) &#123;</div><div class=\"line\">    a.fi = (a.fi + b.fi) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    a.se = (a.se + b.se) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\">pll operator * (pll a, pll b) &#123;</div><div class=\"line\">    pll c<span class=\"comment\">;</span></div><div class=\"line\">    c.fi = (a.fi * b.fi + <span class=\"number\">5</span> * a.se * b.se) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    c.se = (a.fi * b.se + a.se * b.fi) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> c<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\">ll pow_mod(ll a, ll x, ll p) &#123;</div><div class=\"line\">    ll res = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &amp; <span class=\"number\">1</span>) res = res * a % p<span class=\"comment\">;</span></div><div class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">        a = a * a % p<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\">pll operator / (pll a, pll b) &#123;</div><div class=\"line\">    pll c = a * pll(b.fi, (<span class=\"built_in\">mod</span> - b.se) % <span class=\"built_in\">mod</span>)<span class=\"comment\">;</span></div><div class=\"line\">    ll multi = ((b.fi * b.fi - <span class=\"number\">5</span> * b.se * b.se) % <span class=\"built_in\">mod</span> + <span class=\"built_in\">mod</span>) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> c * pll(pow_mod(multi, <span class=\"built_in\">mod</span> - <span class=\"number\">2</span>, <span class=\"built_in\">mod</span>), <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\">pll pow_mod(pll a, ll x) &#123;</div><div class=\"line\">    pll res(<span class=\"number\">1</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &amp; <span class=\"number\">1</span>) res = res * a<span class=\"comment\">;</span></div><div class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">        a = a * a<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\">ll inv[N], ba[N], rba[N]<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"meta\">#define M 100001</span></div><div class=\"line\">void init() &#123;</div><div class=\"line\">    inv[<span class=\"number\">0</span>] = inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    ba[<span class=\"number\">0</span>] = ba[<span class=\"number\">1</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    rba[<span class=\"number\">0</span>] = rba[<span class=\"number\">1</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">2</span><span class=\"comment\">; i &lt; M; i++) &#123;</span></div><div class=\"line\">        inv[i] = ((<span class=\"built_in\">mod</span> - <span class=\"built_in\">mod</span> / i) * inv[<span class=\"built_in\">mod</span> % i]) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        ba[i] = (ba[i - <span class=\"number\">1</span>] * i) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">        rba[i] = (rba[i - <span class=\"number\">1</span>] * inv[i]) % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ll C(<span class=\"built_in\">int</span> n, <span class=\"built_in\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (ba[n] * rba[k] % <span class=\"built_in\">mod</span>) * rba[n - k] % <span class=\"built_in\">mod</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">int</span> main () &#123;</div><div class=\"line\">    ll rev2 = pow_mod(<span class=\"number\">2</span>, <span class=\"built_in\">mod</span> - <span class=\"number\">2</span>, <span class=\"built_in\">mod</span>)<span class=\"comment\">;</span></div><div class=\"line\">    pll a(rev2, (<span class=\"built_in\">mod</span> - <span class=\"number\">1</span>) * rev2 % <span class=\"built_in\">mod</span>)<span class=\"comment\">;</span></div><div class=\"line\">    pll b(rev2, rev2)<span class=\"comment\">;</span></div><div class=\"line\">    init()<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"built_in\">int</span> t<span class=\"comment\">;</span></div><div class=\"line\">    ll n, k<span class=\"comment\">;</span></div><div class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>, &amp;t)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        scanf(<span class=\"string\">\"%I64d%I64d\"</span>, &amp;n, &amp;k)<span class=\"comment\">;</span></div><div class=\"line\">        pll ans(<span class=\"number\">0</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span><span class=\"comment\">; i &lt;= k; i++) &#123;</span></div><div class=\"line\">            ll c = C(k, i)<span class=\"comment\">;</span></div><div class=\"line\">            pll q = pow_mod(a, i) * pow_mod(b, k - i)<span class=\"comment\">;</span></div><div class=\"line\">            pll qn = pow_mod(q, n + <span class=\"number\">1</span>)<span class=\"comment\">;</span></div><div class=\"line\">            pll e(<span class=\"built_in\">mod</span> - <span class=\"number\">1</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">            pll s<span class=\"comment\">;</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (q.first == <span class=\"number\">1</span> &amp;&amp; q.second == <span class=\"number\">0</span>) s = q * pll((n + <span class=\"number\">1</span>) % <span class=\"built_in\">mod</span> * c % <span class=\"built_in\">mod</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">            <span class=\"keyword\">else</span> s = (qn + e) / (q + e) * pll(c, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">            ans = ans + s<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        printf(<span class=\"string\">\"%d\\n\"</span>, (ans.first + <span class=\"built_in\">mod</span>) % <span class=\"built_in\">mod</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["数论","卢卡斯数","二次域运算"]},{"title":"HDU 4958 Poor Rukaw（dp + 期望）","url":"http://yoursite.com/2015/09/03/hdu4958/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4958\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4958</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个游戏，桌上有n个数字，A，B轮流轮流操作，每次操作从中选择两个数字x，y，并将其改为abs(x-y)。这样轮流操作，最后剩下为偶数则A得分，否则B得分，得的分数为一开始的数字个数。一轮游戏之后，所有所有数字复原，输的人可以选择干掉一个数字。然后游戏继续，此时输的人先操作。一开始A先操作，且A每次选择对自己最优的方案（他想要获得更高的分数），而B的每一次操作都是随机的。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>观察发现：奇 - 奇 = 偶；奇 - 偶 = 奇； 偶 - 偶 = 偶<br>所以奇数每次都是成对消失的。对于每一轮游戏，谁获胜都是确定的。<br>所以就可以用记忆化搜索来解决此题。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> dp[N][N][<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> w)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dp[x][y][w] != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> dp[x][y][w];</div><div class=\"line\">    <span class=\"keyword\">if</span> (x + y == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x % <span class=\"number\">2</span> == <span class=\"number\">0</span>) ans = x + y, s = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!s) &#123;</div><div class=\"line\">        <span class=\"keyword\">double</span> t1 = <span class=\"number\">0</span>, t2 = <span class=\"number\">0</span>, p = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>) ans += dfs(x - <span class=\"number\">1</span>, y, <span class=\"number\">0</span>) * x / (x + y);</div><div class=\"line\">        <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) ans += dfs(x, y - <span class=\"number\">1</span>, <span class=\"number\">0</span>) * y / (x + y);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ans += dfs(x - <span class=\"number\">1</span>, y, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//cout&lt;&lt;x&lt;&lt;\" \"&lt;&lt;y&lt;&lt;\" \"&lt;&lt;ans&lt;&lt;endl;</span></div><div class=\"line\">    dp[x][y][w] = ans;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;t;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">1000</span>; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">1000</span>; j++)</div><div class=\"line\">            dp[i][j][<span class=\"number\">0</span>] = dp[i][j][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, u;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;u);</div><div class=\"line\">            <span class=\"keyword\">if</span> (u % <span class=\"number\">2</span> == <span class=\"number\">1</span>) x++;</div><div class=\"line\">            <span class=\"keyword\">else</span> y++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, (<span class=\"keyword\">int</span>)(<span class=\"number\">3</span> * dfs(x, y, <span class=\"number\">1</span>) + <span class=\"number\">0.5</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["dp","期望"]},{"title":"hihiCoder 1033 交错和（数位dp）","url":"http://yoursite.com/2015/09/03/hihiCoder1033/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://hihocoder.com/problemset/problem/1033\" target=\"_blank\" rel=\"external\">http://hihocoder.com/problemset/problem/1033</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>规定f(x)为x的各位交错和，现在给定一个区间[l,r]，求区间内满足f(x)=k的所有x的和</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>很明显是数位dp的思想，但是状态比较多。<br>dp[fh][one][pos][psum]来表示符号为fh，前缀零的状态one，当前位pos，以及该位以后的交错和为psum的个数<br>sum[fh][one][pos][psum]则表示所有这些数的和<br>之后的转移dp比较容易，个数累加即可，sum则相对复杂，详见代码<br>这里one这个状态很关键，因为当前面全为前缀零时，fh其实是没有意义的，所以如果不单独开一维维护one，会导致结果错误</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pll pair<span class=\"meta-string\">&lt;ll, ll&gt;</span></span></div><div class=\"line\">ll l, r, k;</div><div class=\"line\">ll dp[<span class=\"number\">2</span>][<span class=\"number\">2</span>][<span class=\"number\">20</span>][<span class=\"number\">400</span>];</div><div class=\"line\">ll sum[<span class=\"number\">2</span>][<span class=\"number\">2</span>][<span class=\"number\">20</span>][<span class=\"number\">400</span>];</div><div class=\"line\">ll base[<span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> bit[<span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"function\">pll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> psum, <span class=\"keyword\">bool</span> fh, <span class=\"keyword\">bool</span> one, <span class=\"keyword\">bool</span> flag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (psum == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> ss;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!flag) &#123;</div><div class=\"line\">        ss = psum + <span class=\"number\">200</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dp[fh][one][pos][ss] != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> &#123;dp[fh][one][pos][ss], sum[fh][one][pos][ss]&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> u = flag ? bit[pos] : <span class=\"number\">9</span>;</div><div class=\"line\">    ll ans = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</div><div class=\"line\">    pll tmp;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= u; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> nxt = flag &amp;&amp; i == u;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!i &amp;&amp; one) &#123;</div><div class=\"line\">            tmp = dfs(pos - <span class=\"number\">1</span>, psum, <span class=\"number\">1</span>, <span class=\"number\">1</span>, nxt);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (fh) tmp = dfs(pos - <span class=\"number\">1</span>, psum + i, <span class=\"number\">0</span>, <span class=\"number\">0</span>, nxt);</div><div class=\"line\">            <span class=\"keyword\">else</span> tmp = dfs(pos - <span class=\"number\">1</span>, psum - i, <span class=\"number\">1</span>, <span class=\"number\">0</span>, nxt);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ans = (ans + tmp.fi) % mod;</div><div class=\"line\">        res = (res + (i * base[pos] % mod * tmp.fi % mod) + tmp.se) % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ss &lt; <span class=\"number\">0</span>) debug;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!flag) dp[fh][one][pos][ss] = ans, sum[fh][one][pos][ss] = res;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;ans, res&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">calc</span><span class=\"params\">(ll x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        bit[pos++] = x % <span class=\"number\">10</span>;</div><div class=\"line\">        x /= <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pll tmp = dfs(pos - <span class=\"number\">1</span>, -k, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> tmp.se;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    base[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">19</span>; i++) base[i] = base[i - <span class=\"number\">1</span>] * <span class=\"number\">10</span> % mod;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dp));</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld\"</span>, &amp;l, &amp;r, &amp;k)) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, (calc(r) - calc(l - <span class=\"number\">1</span>) + mod) % mod);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["数位dp"]},{"title":"HDU 4933 Miaomiao's Function（数位dp+大数）","url":"http://yoursite.com/2015/09/02/hdu4933/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4933\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4933</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>一道数学题，题意不好描述，见题面吧。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>题目中的f(x)比较好求，主要是求g(x)。<br>g(x)定义为x的各个位数交错和，现在要求一个区间[l, r]的g(x)和。显然是用数位dp做。<br>不过数据比较大，需要用到大数。<br>dp[pos][one]表示到pos位，前面是否全为零的交错和</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bigint</span> &#123;</span> <span class=\"comment\">//flag表示正负，a数组从低位到高位, 从1开始</span></div><div class=\"line\">    <span class=\"keyword\">int</span> flag;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">210</span>];</div><div class=\"line\">    bigint() &#123;</div><div class=\"line\">        flag=<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span> a);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">200</span>; i &gt;= <span class=\"number\">0</span>; i--) a[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; i &gt;= <span class=\"number\">1</span>; i--) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, a[i]);</div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">bigint <span class=\"keyword\">operator</span> +(bigint a, bigint b);</div><div class=\"line\">bigint <span class=\"keyword\">operator</span> -(bigint a, bigint b);</div><div class=\"line\">bigint <span class=\"keyword\">operator</span> +(bigint a, bigint b) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a.flag==b.flag) &#123;</div><div class=\"line\">        bigint c;</div><div class=\"line\">        <span class=\"keyword\">int</span> g=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">200</span>; i++) &#123;</div><div class=\"line\">            c.a[i]=a.a[i]+b.a[i]+g;</div><div class=\"line\">            g=c.a[i]/<span class=\"number\">10</span>;</div><div class=\"line\">            c.a[i]%=<span class=\"number\">10</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        c.flag=a.flag;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a.flag==<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            b.flag=<span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> a-b;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            a.flag=<span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> b-a;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> bigint &amp;a, <span class=\"keyword\">const</span> bigint &amp;b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">200</span>; i&gt;=<span class=\"number\">1</span>; i--) <span class=\"keyword\">if</span> (a.a[i]!=b.a[i]) <span class=\"keyword\">if</span> (a.a[i]&lt;b.a[i]) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">bigint <span class=\"keyword\">operator</span> -(bigint a, bigint b) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a.flag==<span class=\"number\">-1</span> || b.flag==<span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a.flag==<span class=\"number\">-1</span> &amp;&amp; b.flag==<span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            a.flag=<span class=\"number\">1</span>;</div><div class=\"line\">            b.flag=<span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> b-a;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a.flag==<span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            a.flag=<span class=\"number\">1</span>;</div><div class=\"line\">            a=a+b;</div><div class=\"line\">            a.flag=<span class=\"number\">-1</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> a;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (b.flag==<span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            b.flag=<span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> a+b;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cmp(a,b)==<span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        a=b-a;</div><div class=\"line\">        a.flag=<span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\">    bigint c;</div><div class=\"line\">    <span class=\"keyword\">int</span> g=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">200</span>; i++) &#123;</div><div class=\"line\">        c.a[i]=a.a[i]-b.a[i]-g;</div><div class=\"line\">        <span class=\"keyword\">if</span> (c.a[i]&lt;<span class=\"number\">0</span>) c.a[i]+=<span class=\"number\">10</span>, g=<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> g=<span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div><div class=\"line\">bigint <span class=\"keyword\">operator</span> *(bigint a, <span class=\"keyword\">int</span> t) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (t==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">        bigint c;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (t&lt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">        a.flag*=<span class=\"number\">-1</span>;</div><div class=\"line\">        t*=<span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> g=<span class=\"number\">0</span>;</div><div class=\"line\">    bigint c;</div><div class=\"line\">    c.flag=a.flag;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">200</span>; i++) &#123;</div><div class=\"line\">        c.a[i]=a.a[i]*t+g;</div><div class=\"line\">        g=c.a[i]/<span class=\"number\">10</span>;</div><div class=\"line\">        c.a[i]%=<span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">iszero</span><span class=\"params\">(bigint z)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">200</span>; i++) <span class=\"keyword\">if</span> (z.a[i]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">bigint <span class=\"title\">toBigint</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(s+<span class=\"number\">1</span>);</div><div class=\"line\">    bigint c;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=len;i&gt;=<span class=\"number\">1</span>;i--) c.a[len-i+<span class=\"number\">1</span>]=s[i]-<span class=\"string\">'0'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">bigint <span class=\"title\">toBigint</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> flag=<span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a&lt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">        a=-a;</div><div class=\"line\">        flag=<span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> cnt=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(a) &#123;</div><div class=\"line\">        s[cnt++]=(a%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);</div><div class=\"line\">        a/=<span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j=cnt<span class=\"number\">-1</span>; i&lt;j; i++,j--)</div><div class=\"line\">        swap(s[i],s[j]);</div><div class=\"line\">    s[cnt]=<span class=\"string\">'\\0'</span>;</div><div class=\"line\">    bigint q=toBigint(s);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!flag)</div><div class=\"line\">        q.flag=<span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> q;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modd</span><span class=\"params\">(bigint c, <span class=\"keyword\">int</span> z)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> g=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">200</span>; i&gt;=<span class=\"number\">1</span>; i--) g=(g*<span class=\"number\">10</span>+c.a[i])%z;</div><div class=\"line\">    <span class=\"keyword\">if</span> (c.flag==<span class=\"number\">-1</span>) g*=<span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> g;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">char</span> l[<span class=\"number\">105</span>], r[<span class=\"number\">105</span>];</div><div class=\"line\">bigint base[<span class=\"number\">105</span>], g[<span class=\"number\">105</span>], dp[<span class=\"number\">105</span>][<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">105</span>][<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> bit[<span class=\"number\">105</span>];</div><div class=\"line\"><span class=\"function\">bigint <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">bool</span> one, <span class=\"keyword\">bool</span> flag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pos == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!flag) <span class=\"keyword\">return</span> toBigint(<span class=\"number\">45</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> toBigint(bit[<span class=\"number\">0</span>] * (bit[<span class=\"number\">0</span>] + <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!flag &amp;&amp; vis[pos][one]) <span class=\"keyword\">return</span> dp[pos][one];</div><div class=\"line\">    <span class=\"keyword\">int</span> u = flag ? bit[pos] : <span class=\"number\">9</span>;</div><div class=\"line\">    bigint ans;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= u; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> nxt;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flag &amp;&amp; i == u) nxt = <span class=\"number\">1</span>, ans = ans + g[pos - <span class=\"number\">1</span>] * i;</div><div class=\"line\">        <span class=\"keyword\">else</span> nxt = <span class=\"number\">0</span>, ans = ans + base[pos] * i;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!i &amp;&amp; one) ans = ans + dfs(pos - <span class=\"number\">1</span>, <span class=\"number\">1</span>, nxt);</div><div class=\"line\">        <span class=\"keyword\">else</span> ans = ans - dfs(pos - <span class=\"number\">1</span>, <span class=\"number\">0</span>, nxt);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!flag) &#123;</div><div class=\"line\">        vis[pos][one] = <span class=\"number\">1</span>;</div><div class=\"line\">        dp[pos][one] = ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">bigint <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"built_in\">strlen</span>(s);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pos; i++) bit[pos - i - <span class=\"number\">1</span>] = s[i] - <span class=\"string\">'0'</span>;</div><div class=\"line\">    bigint tmp;</div><div class=\"line\">    tmp.a[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    g[<span class=\"number\">0</span>].clear();</div><div class=\"line\">    g[<span class=\"number\">0</span>].a[<span class=\"number\">1</span>] = bit[<span class=\"number\">0</span>];</div><div class=\"line\">    g[<span class=\"number\">0</span>] = g[<span class=\"number\">0</span>] + tmp;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; pos; i++) g[i] = g[i - <span class=\"number\">1</span>] + base[i] * bit[i];</div><div class=\"line\">    <span class=\"keyword\">return</span> dfs(pos - <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    bigint R = calc(r);</div><div class=\"line\">    bigint L = calc(l);</div><div class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"built_in\">strlen</span>(l);</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!k) res += bit[i];</div><div class=\"line\">        <span class=\"keyword\">else</span> res -= bit[i];</div><div class=\"line\">        k ^= <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    bigint tmp = toBigint(res);</div><div class=\"line\">    tmp = R - L + tmp;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iszero(tmp)) &#123;</div><div class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">\"Error!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    res = modd(tmp, <span class=\"number\">9</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (res &lt;= <span class=\"number\">0</span>) res += <span class=\"number\">9</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> s = modd(tmp, res);</div><div class=\"line\">    <span class=\"keyword\">if</span> (s &lt; <span class=\"number\">0</span>) s += res;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, s);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    base[<span class=\"number\">0</span>].a[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) base[i] = base[i - <span class=\"number\">1</span>] * <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> _;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;_;</div><div class=\"line\">    <span class=\"keyword\">while</span>(_--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s%s\"</span>, l, r);</div><div class=\"line\">        solve();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["数位dp","大数"]},{"title":"HDU 5145 NPY and girls（区间查询+莫队算法）","url":"http://yoursite.com/2015/08/27/hdu5145/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5145\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5145</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n个数，m个询问，每次询问区间[l,r]中数字全排列的个数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先区间全排列为：(r-l+1)! / (a1! <em> a2! ……) 其中ai为每种数的个数。<br>假设已经知道当前区间[l,r]的值f, 那么[l,r+1]就是f </em> (r-l+2) / ai (其中ai为新加进来数的个数)。这里用莫队算法来进行维护</p>\n<p>莫队算法可以用nsqrt(n)的复杂度解决一切离线不修改的区间查询问题 [从(l,r)-&gt;(l+1,r)的递推复杂度必须为O(1)]<br>算法参考：<a href=\"http://blog.csdn.net/huzecong/article/details/8576908\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huzecong/article/details/8576908</a><br>          <a href=\"http://blog.csdn.net/bossup/article/details/39236275\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/bossup/article/details/39236275</a><br>莫队算法可以把区间当做二维的点，然后求出曼哈顿最小生成树，之后从起点dfs出答案。<br>但是上述代码比较复杂，另一种方式是把n分块，分成sqrt(n)块。然后把所有查询离线，然后先按照l属于的块号从小到大排序，如果两者在同一块，则按照r从小到大排序。之后遍历一遍得到答案</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e4</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1000000007</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, B;</div><div class=\"line\"><span class=\"keyword\">int</span> c[N], cnt[N], res[N];</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> l, r, id;</div><div class=\"line\">&#125;a[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node s, node v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s.l / B == v.l / B) <span class=\"keyword\">return</span> s.r &lt; v.r;</div><div class=\"line\">    <span class=\"keyword\">return</span> s.l &lt; v.l;</div><div class=\"line\">&#125;</div><div class=\"line\">ll inv[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    inv[<span class=\"number\">0</span>] = inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) inv[i] = inv[mod % i] * (mod - mod / i) % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    init(<span class=\"number\">30000</span>);</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, c + i);</div><div class=\"line\">            cnt[c[i]] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a[i].l, &amp;a[i].r);</div><div class=\"line\">            a[i].l--, a[i].r--;</div><div class=\"line\">            a[i].id = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        B = <span class=\"built_in\">sqrt</span>(n + <span class=\"number\">0.5</span>);</div><div class=\"line\">        sort(a, a + m, cmp);</div><div class=\"line\">        <span class=\"keyword\">int</span> L = a[<span class=\"number\">0</span>].l, R = a[<span class=\"number\">0</span>].l - <span class=\"number\">1</span>;</div><div class=\"line\">        ll ans = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>(R &lt; a[i].r) &#123;</div><div class=\"line\">                R++;</div><div class=\"line\">                cnt[c[R]]++;</div><div class=\"line\">                ans = ans * (R - L + <span class=\"number\">1</span>) % mod;</div><div class=\"line\">                ans = ans * inv[cnt[c[R]]] % mod;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span>(R &gt; a[i].r) &#123;</div><div class=\"line\">                ans = ans * inv[R - L + <span class=\"number\">1</span>] % mod;</div><div class=\"line\">                ans = ans * cnt[c[R]] % mod;</div><div class=\"line\">                cnt[c[R]]--;</div><div class=\"line\">                R--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span>(L &gt; a[i].l) &#123;</div><div class=\"line\">                L--;</div><div class=\"line\">                cnt[c[L]]++;</div><div class=\"line\">                ans = ans * (R - L + <span class=\"number\">1</span>) % mod;</div><div class=\"line\">                ans = ans * inv[cnt[c[L]]] % mod;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span>(L &lt; a[i].l) &#123;</div><div class=\"line\">                ans = ans * inv[R - L + <span class=\"number\">1</span>] % mod;</div><div class=\"line\">                ans = ans * cnt[c[L]] % mod;</div><div class=\"line\">                cnt[c[L]]--;</div><div class=\"line\">                L++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res[a[i].id] = ans;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["莫队算法"]},{"title":"HDU 5144 NPY and shot（物理题 OR 三分）","url":"http://yoursite.com/2015/08/27/hdu5144/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5144\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5144</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个高度H, 从H处抛出一个初速度为v的小球，问小球最远能到哪里。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>可以直接推公式<br>vtcos(0) = s<br>vtsin(0) = 0.5<em>g</em>t^2 - h<br>把角度消去，得到一个关于t^2的二次方程，要是这个方程有解，判别式必须≥0。所以s = v <em> sqrt(2.0 </em> g <em> h + v </em> v) / g;</p>\n<p>也可以直接三分s（比三分角度精确）</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">double</span> g = <span class=\"number\">9.8</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;t;</div><div class=\"line\">    <span class=\"keyword\">int</span> h, v;</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;h, &amp;v);</div><div class=\"line\">        <span class=\"keyword\">double</span> s = v * <span class=\"built_in\">sqrt</span>(<span class=\"number\">2.0</span> * g * h + v * v) / g;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2f\\n\"</span>, s);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["想法","枚举"]},{"title":"HYSBZ 1588 营业额统计（Splay树）","url":"http://yoursite.com/2015/08/27/HYSBZ1588/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=1588\" target=\"_blank\" rel=\"external\">http://www.lydsy.com/JudgeOnline/problem.php?id=1588</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>在n天里，每天读入一个数，规定这个数的贡献值为与之前所有数字之差的绝对值的最小值，第一个数的贡献值为它本身。求总的值</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>这道题算是伸展树的入门题。题目数据有个bug（即可能数字个数小于n，如果小于n就把少的数字全部当做0）</p>\n<p>算法的参考资料：<br><a href=\"http://blog.csdn.net/acm_cxlove/article/details/7815019\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/acm_cxlove/article/details/7815019</a><br><a href=\"http://wenku.baidu.com/view/7f0ff024ccbff121dd3683ac.html\" target=\"_blank\" rel=\"external\">http://wenku.baidu.com/view/7f0ff024ccbff121dd3683ac.html</a><br><a href=\"http://www.cnblogs.com/kuangbin/archive/2012/10/07/2714068.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/kuangbin/archive/2012/10/07/2714068.html</a><br><a href=\"http://wenku.baidu.com/link?url=amATxXzsEjjYrr4xw7OnIht8Iv8J7tx-brB6cwpVKfvujPO4p0iOMI46TECbQ4catynY5nOrlRkf2ZGRroXfU2wpSHCnehQCBDq0TYp_ddy&amp;qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"external\">http://wenku.baidu.com/link?url=amATxXzsEjjYrr4xw7OnIht8Iv8J7tx-brB6cwpVKfvujPO4p0iOMI46TECbQ4catynY5nOrlRkf2ZGRroXfU2wpSHCnehQCBDq0TYp_ddy&amp;qq-pf-to=pcqq.c2c</a></p>\n<p>splay树的关键在于splay操作，每次插入一个节点后，都将该节点旋到根节点。均摊复杂度为O(logn)，可以避免普通二叉查找树在某些情况下退化成一条链<br>这道题相当于每次插入一个数字后，找到其前驱和后继，比较两者与其的差即可。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100005</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">1e9</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SplayTree</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> pre[N], key[N], ch[N][<span class=\"number\">2</span>], root, cnt;  <span class=\"comment\">///分别表示父结点，键值，左右孩子(0为左孩子，1为右孩子),根结点，结点数量</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\troot = cnt = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">///新建一个结点</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NewNode</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;r, <span class=\"keyword\">int</span> father, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        r = ++cnt;</div><div class=\"line\">        pre[r] = father;</div><div class=\"line\">        key[r] = k;</div><div class=\"line\">        ch[r][<span class=\"number\">0</span>] = ch[r][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;  <span class=\"comment\">///左右孩子为空</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">///旋转，kind为1为右旋，kind为0为左旋</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> kind)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> y = pre[x];</div><div class=\"line\">        <span class=\"comment\">///类似SBT，要把其中一个分支先给父节点</span></div><div class=\"line\">        ch[y][!kind] = ch[x][kind];</div><div class=\"line\">        pre[ch[x][kind]] = y;</div><div class=\"line\">        <span class=\"comment\">///如果父节点不是根结点，则要和父节点的父节点连接起来</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(pre[y])</div><div class=\"line\">            ch[pre[y]][ch[pre[y]][<span class=\"number\">1</span>] == y] = x;</div><div class=\"line\">        pre[x] = pre[y];</div><div class=\"line\">        ch[x][kind] = y;</div><div class=\"line\">        pre[y] = x;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">///Splay调整，将根为r的子树调整为goal</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Splay</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> goal)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(pre[r]!=goal) &#123;</div><div class=\"line\">            <span class=\"comment\">///父节点即是目标位置，goal为0表示，父节点就是根结点</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(pre[pre[r]] == goal)</div><div class=\"line\">                Rotate(r, ch[pre[r]][<span class=\"number\">0</span>] == r);</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> y = pre[r];</div><div class=\"line\">                <span class=\"keyword\">int</span> kind = ch[pre[y]][<span class=\"number\">0</span>] == y;</div><div class=\"line\">                <span class=\"comment\">///两个方向不同，则先左旋再右旋</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(ch[y][kind] == r) &#123;</div><div class=\"line\">                    Rotate(r, !kind);</div><div class=\"line\">                    Rotate(r, kind);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">///两个方向相同，相同方向连续两次</span></div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    Rotate(y, kind);</div><div class=\"line\">                    Rotate(r, kind);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">///更新根结点</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(goal == <span class=\"number\">0</span>) root = r;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> r = root;</div><div class=\"line\">        <span class=\"keyword\">while</span>(ch[r][key[r] &lt; k]) &#123;</div><div class=\"line\">            <span class=\"comment\">///不重复插入</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(key[r] == k) &#123;</div><div class=\"line\">                Splay(r,<span class=\"number\">0</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            r = ch[r][key[r] &lt; k];</div><div class=\"line\">        &#125;</div><div class=\"line\">        NewNode(ch[r][k &gt; key[r]], r, k);</div><div class=\"line\">        <span class=\"comment\">///将新插入的结点更新至根结点</span></div><div class=\"line\">        Splay(ch[r][k &gt; key[r]], <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">///找前驱，即左子树的最右结点</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_pre</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> tmp = ch[x][<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span>(tmp == <span class=\"number\">0</span>)  <span class=\"keyword\">return</span> inf;</div><div class=\"line\">        <span class=\"keyword\">while</span>(ch[tmp][<span class=\"number\">1</span>])</div><div class=\"line\">            tmp = ch[tmp][<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">return</span> key[x] - key[tmp];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">///找后继，即右子树的最左结点</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_next</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> tmp = ch[x][<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span>(tmp == <span class=\"number\">0</span>)  <span class=\"keyword\">return</span> inf;</div><div class=\"line\">        <span class=\"keyword\">while</span>(ch[tmp][<span class=\"number\">0</span>])</div><div class=\"line\">            tmp = ch[tmp][<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">return</span> key[tmp] - key[x];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;sp;</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)) &#123;</div><div class=\"line\">        sp.init();</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> num;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;num) == EOF) num = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!i) &#123;</div><div class=\"line\">                ans += num;</div><div class=\"line\">                sp.NewNode(sp.root, <span class=\"number\">0</span>, num);</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sp.Insert(num) == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> a = sp.get_next(sp.root);</div><div class=\"line\">            <span class=\"keyword\">int</span> b = sp.get_pre(sp.root);</div><div class=\"line\">            ans += min(a, b);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["Splay"]},{"title":"HDU 5143 NPY and arithmetic progression（枚举+想法）","url":"http://yoursite.com/2015/08/27/hdu5143/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5143\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5143</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有1,2,3,4四种数字，个数分别为a1,a2,a3,a4。现在要把这些数分成很多组，其中每组都是等差数列，且每组的个数必须大于等于3。问有没有解</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>观察可以发现等差数列只可能是(1,2,3)(1,2,3,4)(2,3,4)以及3个以上相同的数字。然后三个以上的(1,2,3)可以化为多个(1,1,1)(2,2,2)(3,3,3)和j个(1,2,3)。其中j≤2，其他的相同。所以可以枚举这三种特殊的等差数列的个数，剩下的1,2,3,4的个数≥3或者等于0一定可以。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">int</span> x;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;t;</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">        <span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">            m = m * <span class=\"number\">2</span> + x % <span class=\"number\">2</span>;</div><div class=\"line\">            x /= <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, m);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["想法","枚举"]},{"title":"HDU 5141 LIS again（LIS+dp+线段树）","url":"http://yoursite.com/2015/08/26/hdu5141/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5141\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5141</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n个数的序列，另该序列的最长上升子序列的长度为k。求该序列中子串满足最长上升子序列长度也为k的个数。1≤n≤100000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先我们用线段树可以求出以第i位为结尾的最大长度。假如当前dp[i]=k, 如果可以求得以i结尾，符合条件的最短子串，那么用左边的长度 * 右边的长度就是符合条件的个数。当然，如果后面还有一个符合dp[i’]=k, 那么右边只能到i’-1, 之后的在i’时在计算，可以避免重复<br>可以用线段树维护以i结尾符合条件的lis最靠右的起始位置。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m, rt &lt;&lt; 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int, int&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N], b[N], n, cnt;</div><div class=\"line\"><span class=\"keyword\">int</span> f[N][<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> mx[N &lt;&lt; <span class=\"number\">2</span>], id[N &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> ans;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mx[rt &lt;&lt; <span class=\"number\">1</span>] &lt; mx[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]) mx[rt] = mx[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>], id[rt] = id[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">else</span> mx[rt] = mx[rt &lt;&lt; <span class=\"number\">1</span>], id[rt] = id[rt &lt;&lt; <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</div><div class=\"line\">        mx[rt] = id[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    build(lson);</div><div class=\"line\">    build(rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">pii <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mkp(mx[rt], id[rt]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    pii t1, t2;</div><div class=\"line\">    t1.first = <span class=\"number\">0</span>, t2.first = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) t1 = query(L, R, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) t2 = query(L, R, rson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (t1.first &lt; t2.first) <span class=\"keyword\">return</span> t2;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> t1;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        mx[rt] = x, id[rt] = y;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) update(L, R, x, y, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) update(L, R, x, y, rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i), b[i] = a[i];</div><div class=\"line\">        sort(b, b + n);</div><div class=\"line\">        cnt = unique(b, b + n) - b;</div><div class=\"line\">        ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) a[i] = lower_bound(b, b + cnt, a[i]) - b + <span class=\"number\">1</span>; <span class=\"comment\">//, cout&lt;&lt;a[i]&lt;&lt;endl;</span></div><div class=\"line\">        build(<span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"comment\">//debug;</span></div><div class=\"line\">        pii tmp;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[i] == <span class=\"number\">1</span>) tmp.first = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> tmp = query(<span class=\"number\">1</span>, a[i] - <span class=\"number\">1</span>, <span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (tmp.first == <span class=\"number\">0</span>) tmp.second = i + <span class=\"number\">1</span>;</div><div class=\"line\">            tmp.first++;</div><div class=\"line\">            f[i][<span class=\"number\">0</span>] = tmp.first, f[i][<span class=\"number\">1</span>] = tmp.second;</div><div class=\"line\">            ans = max(ans, tmp.first);</div><div class=\"line\">            <span class=\"comment\">//cout&lt;&lt;f[i][0]&lt;&lt;\" \"&lt;&lt;f[i][1]&lt;&lt;endl;</span></div><div class=\"line\">            update(a[i], a[i], tmp.first, tmp.second, <span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ll res = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt; pii &gt; g;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"keyword\">if</span> (f[i][<span class=\"number\">0</span>] == ans) &#123;</div><div class=\"line\">            g.push_back(mkp(i + <span class=\"number\">1</span>, f[i][<span class=\"number\">1</span>]));</div><div class=\"line\">        &#125;</div><div class=\"line\">        g.push_back(mkp(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g.size() - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">            res += (ll)(g[i + <span class=\"number\">1</span>].first - g[i].first) * g[i].second;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, res);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["dp","线段树","LIS"]},{"title":"HDU 5110 Alexandra and COS（dp+分块）","url":"http://yoursite.com/2015/08/26/hdu5110/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5110\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5110</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一张n*m的地图，其中一些格点上有宝藏。现在有一种探测器，只能够探测到其前方西北到东北距离为d的倍数的格点，定义该距离max(|x1-x|,|y1-y|)。现在给q个探测器，分别求出其能够探测到的宝石数量。1≤n,m,d≤1000,1≤q≤500000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>直接暴力的做时间复杂度为q<em>n</em>case, 会超时。<br>需要用分块的方式来做。g[d][n][m]表示在(n,m)点，距离为d的数量。<br>那么可以用右三角形-左三角形， 即g[d][x][y] = gr[d][x][y] - gl[d][x -1][y]<br>当d比sqrt(n)小时，可以预处理出来复杂度为n<em>m</em>sqrt(n)，反之可以直接暴力算</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">#include&lt;iostream&gt;</span></div><div class=\"line\"><span class=\"section\">#include&lt;cmath&gt;</span></div><div class=\"line\"><span class=\"section\">#include&lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"section\">#include&lt;cstring&gt;</span></div><div class=\"line\"><span class=\"section\">#include&lt;string&gt;</span></div><div class=\"line\"><span class=\"section\">#include&lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"section\">#include&lt;vector&gt;</span></div><div class=\"line\"><span class=\"section\">#define pb push_back</span></div><div class=\"line\"><span class=\"section\">#define INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"section\">#define fi first</span></div><div class=\"line\"><span class=\"section\">#define se second</span></div><div class=\"line\"><span class=\"section\">#define debug puts(\"=====================\");</span></div><div class=\"line\">using namespace std;</div><div class=\"line\">typedef long long ll;</div><div class=\"line\">int n, m, q, x, y, d, B;</div><div class=\"line\">int a[<span class=\"string\">1010</span>][<span class=\"symbol\">1010</span>], sa[<span class=\"string\">1010</span>][<span class=\"symbol\">33</span>], gl[<span class=\"string\">1010</span>][<span class=\"symbol\">1010</span>], gr[<span class=\"string\">1010</span>][<span class=\"symbol\">1010</span>], g[<span class=\"string\">33</span>][<span class=\"symbol\">1010</span>][<span class=\"string\">1010</span>];</div><div class=\"line\">//a[<span class=\"string\">i</span>][<span class=\"symbol\">j</span>]表示第i行的前j个和 sa[<span class=\"string\">i</span>][<span class=\"symbol\">j</span>]表示从i行其前i行间距为j的和</div><div class=\"line\">//gl[<span class=\"string\">i</span>][<span class=\"symbol\">j</span>]表示以(i,j)为边界的左三角形和 gr表示右三角形和 两者相减为g</div><div class=\"line\">char ch;</div><div class=\"line\">void work() &#123;</div><div class=\"line\"><span class=\"code\">    int ans = 0;</span></div><div class=\"line\"><span class=\"code\">    for (int i = x; i &gt; 0; i -= d) &#123;</span></div><div class=\"line\"><span class=\"code\">        int L = max(1, y - x + i), R = min(m, y + x - i);</span></div><div class=\"line\"><span class=\"code\">        ans += a[i][R] - a[i][L - 1];</span></div><div class=\"line\"><span class=\"code\">    &#125;</span></div><div class=\"line\"><span class=\"code\">    printf(\"%d\\n\", ans);</span></div><div class=\"line\">&#125;</div><div class=\"line\">void solve() &#123;</div><div class=\"line\"><span class=\"code\">    B = sqrt(0.5 + n);</span></div><div class=\"line\"><span class=\"code\">    for (int i = 1; i &lt;= n; ++i)</span></div><div class=\"line\"><span class=\"code\">        for (int j = 1; j &lt;= B; ++j) &#123;</span></div><div class=\"line\"><span class=\"code\">            if (i &lt; j) sa[i][j] = a[i][m];</span></div><div class=\"line\"><span class=\"code\">            else sa[i][j] = sa[i - j][j] + a[i][m];</span></div><div class=\"line\"><span class=\"code\">        &#125;</span></div><div class=\"line\"><span class=\"code\">    for (int k = 1; k &lt;= B; ++k) &#123;</span></div><div class=\"line\"><span class=\"code\">        for (int i = 1; i &lt;= n; ++i) &#123;</span></div><div class=\"line\"><span class=\"code\">            for (int j = 1; j &lt;= m; ++j) &#123;</span></div><div class=\"line\"><span class=\"code\">                //gl</span></div><div class=\"line\"><span class=\"code\">                if (i &lt;= k || j &lt;= k) gl[i][j] = a[i][j];</span></div><div class=\"line\"><span class=\"code\">                else gl[i][j] = gl[i - k][j - k] + a[i][j];</span></div><div class=\"line\"><span class=\"code\">                //gr</span></div><div class=\"line\"><span class=\"code\">                if (i &lt;= k) gr[i][j] = a[i][j];</span></div><div class=\"line\"><span class=\"code\">                else if (j + k &gt; m) gr[i][j] = sa[i - k][k] + a[i][j];</span></div><div class=\"line\"><span class=\"code\">                else gr[i][j] = gr[i - k][j + k] + a[i][j];</span></div><div class=\"line\"><span class=\"code\">                //g</span></div><div class=\"line\"><span class=\"code\">                g[k][i][j] = gr[i][j] - gl[i][j - 1];</span></div><div class=\"line\"><span class=\"code\">            &#125;</span></div><div class=\"line\"><span class=\"code\">        &#125;</span></div><div class=\"line\"><span class=\"code\">    &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\">char str[1111];</div><div class=\"line\">int main() &#123;</div><div class=\"line\"><span class=\"code\">    while(~scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q)) &#123;</span></div><div class=\"line\"><span class=\"code\">        for (int i = 1; i &lt;= n; ++i) &#123;</span></div><div class=\"line\"><span class=\"code\">            scanf(\"%s\", str + 1);</span></div><div class=\"line\"><span class=\"code\">            a[i][0] = 0;</span></div><div class=\"line\"><span class=\"code\">            for (int j = 1; j &lt;= m; ++j) &#123;</span></div><div class=\"line\"><span class=\"code\">                a[i][j] = a[i][j - 1];</span></div><div class=\"line\"><span class=\"code\">                if (str[j] == 'X') ++a[i][j];</span></div><div class=\"line\"><span class=\"code\">            &#125;</span></div><div class=\"line\"><span class=\"code\">        &#125;</span></div><div class=\"line\"><span class=\"code\">        solve();</span></div><div class=\"line\"><span class=\"code\">        while(q--) &#123;</span></div><div class=\"line\"><span class=\"code\">            scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;d);</span></div><div class=\"line\"><span class=\"code\">            if (d &gt; B) work();</span></div><div class=\"line\"><span class=\"code\">            else printf(\"%d\\n\", g[d][x][y]);</span></div><div class=\"line\"><span class=\"code\">        &#125;</span></div><div class=\"line\"><span class=\"code\">    &#125;</span></div><div class=\"line\"><span class=\"code\">    return 0;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["分块","dp"]},{"title":"HDU 5125 magic balls（LIS+dp+树状数组）","url":"http://yoursite.com/2015/08/26/hdu5125/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5125\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5125</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有两排球，每排有n个。每个球有一个体积vi。现在要从第一排中选一些球，使得这些球的体积为最长上升序列。你可以使用m次魔法，每次可以把第一排的一个球换成第二排对应位置的球。求最长的子序列长度。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>最长上升子序列可以用树状数组或者线段树维护。dp[i]表示以第i个数结尾的最长上升子序列长度。每加入一个新数，查询比该数小的数的dp最大值mx，用mx+1更新该数的dp值<br>回到这道题，我们先对球的体积进行离散化。用dp[i][j]表示到i个位置，使用了j次交换的最值，那么有如下转移方程：<br>dp[i][j] = max(dp[k][j] + 1) 其中k&lt;i,且s[j][k]&lt;a[i]<br>dp[i][j] = max(dp[k][j - 1] + 1) 其中k&lt;i,且s[j-1][k]&lt;b[i]<br>其中s[j]表示交换了j次时，需要维护的树状数组的情况<br>这道题用线段树维护常数太大，容易T。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N], b[N], c[N * <span class=\"number\">2</span>], n, m, cnt;</div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">bit</span>[N][N * <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> lowbit(<span class=\"keyword\">int</span> x) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> x &amp; (-x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">void</span> add(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> v) &#123;</div><div class=\"line\">    <span class=\"built_in\">while</span>(p &lt;= cnt) &#123;</div><div class=\"line\">        <span class=\"built_in\">bit</span>[i][p] = <span class=\"built_in\">max</span>(<span class=\"built_in\">bit</span>[i][p], v);</div><div class=\"line\">        p += lowbit(p);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> sum(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> p) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">while</span>(p &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        res = <span class=\"built_in\">max</span>(res, <span class=\"built_in\">bit</span>[i][p]);</div><div class=\"line\">        p -= lowbit(p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> main () &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"built_in\">while</span>(t--) &#123;</div><div class=\"line\">        scanf(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        cnt = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            scanf(<span class=\"string\">\"%d%d\"</span>, a + i, b + i);</div><div class=\"line\">            c[cnt++] = a[i];</div><div class=\"line\">            c[cnt++] = b[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(c, c + cnt); cnt = unique(c, c + cnt) - c;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) a[i] = lower_bound(c, c + cnt, a[i]) - c;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) b[i] = lower_bound(c, c + cnt, b[i]) - c;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)</div><div class=\"line\">            <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= cnt; j++) <span class=\"built_in\">bit</span>[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> mx = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"built_in\">min</span>(i + <span class=\"number\">1</span>, m); j &gt;= <span class=\"number\">0</span>; j--) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> k = sum(j, a[i] - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">                mx = <span class=\"built_in\">max</span>(mx, k);</div><div class=\"line\">                add(j, a[i], k);</div><div class=\"line\">                <span class=\"built_in\">if</span> (j) &#123;</div><div class=\"line\">                    k = sum(j - <span class=\"number\">1</span>, b[i] - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">                    mx = <span class=\"built_in\">max</span>(mx, k);</div><div class=\"line\">                    add(j, b[i], k);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        printf(<span class=\"string\">\"%d\\n\"</span>, mx);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["dp","树状数组","LIS"]},{"title":"HDU 5106 Bits Problem（数位dp）","url":"http://yoursite.com/2015/08/26/hdu5106/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5106\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5106</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个二进制r，一个整数n，求[0, r)这个区间内满足其二进制中1的个数为n的数字和，答案对1e9+7取模<br>n≤1000， 0≤R&lt;2^1000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>如果只需要求满足的数的个数，只需要开dp[1000][1000]的数组，dp[pos][one]表示到pos位，1的个数为one的个数<br>因为要记录总和，只需要再开一维sum[1000][1000]，sum[pos][one]表示这些所有数的和<br>在状态转移的时候，sum就是 当前枚举的位所代表的数 * 之后的种类数 + 之后的和 的累加</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;ll, ll&gt;</span></span></div><div class=\"line\">ll dp[<span class=\"number\">1001</span>][<span class=\"number\">1001</span>];</div><div class=\"line\">ll sum[<span class=\"number\">1001</span>][<span class=\"number\">1001</span>];</div><div class=\"line\">ll base[<span class=\"number\">1001</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> bit[<span class=\"number\">1011</span>], n;</div><div class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">1011</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1000000007</span>;</div><div class=\"line\"><span class=\"function\">pii <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> one, <span class=\"keyword\">bool</span> flag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (one &gt; n) <span class=\"keyword\">return</span> &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (one == n) <span class=\"keyword\">return</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!flag &amp;&amp; dp[pos][one] != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;dp[pos][one], sum[pos][one]&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> u = flag ? bit[pos] : <span class=\"number\">1</span>;</div><div class=\"line\">    ll ans = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</div><div class=\"line\">    pii tmp;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= u; i++) &#123;</div><div class=\"line\">        tmp = dfs(pos - <span class=\"number\">1</span>, one + i, i == u &amp;&amp; flag);</div><div class=\"line\">        ans = (ans + tmp.first) % mod;</div><div class=\"line\">        res = (res + i * base[pos] * tmp.first + tmp.second) % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!flag) dp[pos][one] = ans, sum[pos][one] = res;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;ans, res&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> len;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">calc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> pos = len;</div><div class=\"line\">    <span class=\"keyword\">int</span> one = <span class=\"number\">0</span>;</div><div class=\"line\">    ll tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pos; i++) &#123;</div><div class=\"line\">        bit[i] = s[pos - i - <span class=\"number\">1</span>] - <span class=\"string\">'0'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (bit[i]) one++;</div><div class=\"line\">        tmp = (tmp * <span class=\"number\">2</span> + s[i] - <span class=\"string\">'0'</span>) % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (one != n) tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (dfs(pos - <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).se - tmp + mod) % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">            dp[i][j] = <span class=\"number\">-1</span>;</div><div class=\"line\">            sum[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    base[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000</span>; i++) base[i] = <span class=\"number\">2</span> * base[i - <span class=\"number\">1</span>] % mod;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%s\"</span>, &amp;n, s)) &#123;</div><div class=\"line\">        len = <span class=\"built_in\">strlen</span>(s);</div><div class=\"line\">        <span class=\"keyword\">if</span> (len &lt; n) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        init();</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, calc());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["数位dp"]},{"title":"ZOJ 3816 Generalized Palindromic Number（dp）","url":"http://yoursite.com/2015/08/25/zoj3816/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3816\" target=\"_blank\" rel=\"external\">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3816</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>规定广义回文为：将字符串中相同的字符压缩为一个之后为回文串。例如：11233221-&gt;12321<br>现在给定一个n，求小于n的最大一个数，使其为广义回文串。（1≤n≤1e18）</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>从最后一位（最右位）开始改动，一直改动到第一位（第一位最小到1，不能到0）。如果改动某一位可以得到一个回文串，答案就是这个数字。<br>现在假设改动到第k位：另dp[l][r]表示从第l位到第r位的符合回文的最大串<br>dp[l][r] = max(前缀和 <em> base[r - L + 1] + dp[L][j] </em> base[r - j] + 后缀和)<br>上述公式中：L为从l+1开始第一个与l不同的位，因为11121…的下一个状态直接转到21…(相同的1可以压缩)<br>j从r-1一直到k, 即把(j+1, r)的位全部变为l位</p>\n<p>需要注意当r&lt;=k时，此时dp[l][r]是已经确定的，我一开始直接判断该串是否为回文，但是这样不对。需要把右边和l-1相同的位全部压缩之后再判断。<br>例如：3443，当k为3，第三位为3时，dp[2][3] = 43，即3433，此时3433是广义回文，但43不是。所以应该判断4是不是为回文。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\">ll n;</div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">bit</span>[<span class=\"number\">22</span>], len;</div><div class=\"line\">ll dp[<span class=\"number\">22</span>][<span class=\"number\">22</span>];</div><div class=\"line\"><span class=\"keyword\">void</span> work(ll n) &#123;</div><div class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; g;</div><div class=\"line\">    len = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">while</span>(n) &#123;</div><div class=\"line\">        g.pb(n % <span class=\"number\">10</span>);</div><div class=\"line\">        n /= <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    len = g.<span class=\"built_in\">size</span>();</div><div class=\"line\">    reverse(g.<span class=\"built_in\">begin</span>(), g.<span class=\"built_in\">end</span>());</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; i++) <span class=\"built_in\">bit</span>[i] = g[i - <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> k;</div><div class=\"line\">ll base[<span class=\"number\">22</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> check(vector&lt;<span class=\"keyword\">int</span>&gt; g) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = g.<span class=\"built_in\">size</span>();</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = len - <span class=\"number\">1</span>; i &lt; j; i++, j--) <span class=\"built_in\">if</span> (g[i] != g[j]) <span class=\"built_in\">return</span> false;</div><div class=\"line\">    <span class=\"built_in\">return</span> true;</div><div class=\"line\">&#125;</div><div class=\"line\">ll dfs(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span> (dp[l][r] != <span class=\"number\">-1</span>) <span class=\"built_in\">return</span> dp[l][r];</div><div class=\"line\">    <span class=\"built_in\">if</span> (l &gt; k) &#123; <span class=\"comment\">//l&gt;k,此时(l,r)为9...9最大</span></div><div class=\"line\">        dp[l][r] = base[r - l + <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"built_in\">return</span> dp[l][r];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">if</span> (r &lt;= k) &#123; <span class=\"comment\">//r &lt;= k，此时(l,r)串为已知串</span></div><div class=\"line\">        vector&lt;<span class=\"keyword\">int</span>&gt; g;</div><div class=\"line\">        ll ss = <span class=\"number\">0</span>;</div><div class=\"line\">        ss = ss * <span class=\"number\">10</span> + <span class=\"built_in\">bit</span>[l];</div><div class=\"line\">        g.pb(<span class=\"built_in\">bit</span>[l]);</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</div><div class=\"line\">            ss = ss * <span class=\"number\">10</span> + <span class=\"built_in\">bit</span>[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> R = r;</div><div class=\"line\">        <span class=\"built_in\">while</span>(<span class=\"built_in\">bit</span>[R] == <span class=\"built_in\">bit</span>[l - <span class=\"number\">1</span>] &amp;&amp; l &gt; <span class=\"number\">1</span>) R--; <span class=\"comment\">//需要把右边的压缩</span></div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= R; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">if</span> (<span class=\"built_in\">bit</span>[i] != <span class=\"built_in\">bit</span>[i - <span class=\"number\">1</span>]) g.pb(<span class=\"built_in\">bit</span>[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">if</span> (check(g)) <span class=\"built_in\">return</span> dp[l][r] = ss; <span class=\"comment\">//如果压缩后为回文串，修改值</span></div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> L;</div><div class=\"line\">    <span class=\"built_in\">for</span> (L = l + <span class=\"number\">1</span>; L &lt;= k; L++) &#123; <span class=\"comment\">//把L变为第一个不与l位相同的</span></div><div class=\"line\">        <span class=\"built_in\">if</span> (<span class=\"built_in\">bit</span>[L] != <span class=\"built_in\">bit</span>[L - <span class=\"number\">1</span>]) <span class=\"built_in\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">if</span> (L == k + <span class=\"number\">1</span>) ;</div><div class=\"line\">    <span class=\"built_in\">else</span> <span class=\"built_in\">if</span> (L == k) &#123;</div><div class=\"line\">        <span class=\"built_in\">if</span> (<span class=\"built_in\">bit</span>[L] == <span class=\"built_in\">bit</span>[L - <span class=\"number\">1</span>]) L = k + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"built_in\">else</span> L = k;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ll mx = <span class=\"number\">-1</span>;</div><div class=\"line\">    ll ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt; L; i++) ans = ans * <span class=\"number\">10</span> + <span class=\"built_in\">bit</span>[i]; <span class=\"comment\">//前缀和</span></div><div class=\"line\">    ll tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j = r - <span class=\"number\">1</span>; j &gt;= k; j--) &#123;</div><div class=\"line\">        tmp = tmp * <span class=\"number\">10</span> + <span class=\"built_in\">bit</span>[l]; <span class=\"comment\">//后缀和</span></div><div class=\"line\">        ll res = dfs(L, j);</div><div class=\"line\">        <span class=\"built_in\">if</span> (res != <span class=\"number\">-1</span>) mx = <span class=\"built_in\">max</span>(ans * base[r - L + <span class=\"number\">1</span>] + res * base[r - j] + tmp, mx);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">if</span> (mx &gt;= <span class=\"number\">0</span>) dp[l][r] = mx;</div><div class=\"line\">    <span class=\"built_in\">return</span> mx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> main () &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    base[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">18</span>; i++) base[i] = base[i - <span class=\"number\">1</span>] * <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"built_in\">while</span>(t--) &#123;</div><div class=\"line\">        scanf(<span class=\"string\">\"%lld\"</span>, &amp;n);</div><div class=\"line\">        work(n);</div><div class=\"line\">        <span class=\"keyword\">bool</span> flag = false;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = len; i &gt;= <span class=\"number\">1</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> x = <span class=\"built_in\">bit</span>[i];</div><div class=\"line\">            <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j = x - <span class=\"number\">1</span>; j &gt;= (i == <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>; j--) &#123;</div><div class=\"line\">                k = i;</div><div class=\"line\">                memset(dp, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dp));</div><div class=\"line\">                <span class=\"built_in\">bit</span>[i] = j;</div><div class=\"line\">                dfs(<span class=\"number\">1</span>, len);</div><div class=\"line\">                <span class=\"built_in\">if</span> (dp[<span class=\"number\">1</span>][len] != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">                    printf(<span class=\"string\">\"%lld\\n\"</span>, dp[<span class=\"number\">1</span>][len]);</div><div class=\"line\">                    flag = true;</div><div class=\"line\">                    <span class=\"built_in\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">bit</span>[i] = x;</div><div class=\"line\">            <span class=\"built_in\">if</span> (flag) <span class=\"built_in\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">if</span> (!flag) &#123; <span class=\"comment\">//像100之类的数，上面的dp跑不出来，这里特别输出即可</span></div><div class=\"line\">            printf(<span class=\"string\">\"%lld\\n\"</span>, base[len - <span class=\"number\">1</span>] - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["dp"]},{"title":"ZOJ 3810 A Volcanic Island（构造 + 四色定理）","url":"http://yoursite.com/2015/08/25/zoj3810/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3810\" target=\"_blank\" rel=\"external\">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3810</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>用 n 块面积为 n 的图块拼满一个 n*n 的矩阵图，并且 n 块图只有四种颜色，相邻的图块不能有相同的颜色，任意的两块不能有相同的形状，包括旋转，对称；</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>当n≤4时，只有n=1可以构造<br>当n≥5时一定有解。<br>当n为5时：<br>1 1 1 3 4<br>1 3 3 3 4<br>1 3 2 2 4<br>2 2 2 1 4<br>1 1 1 1 4<br>当n为6时：<br>1 1 1 1 3 4<br>1 3 3 3 3 4<br>1 3 1 1 1 4<br>1 1 1 2 2 4<br>2 2 2 2 1 4<br>1 1 1 1 1 4<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cctype&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">105</span>][<span class=\"number\">105</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=n; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span>(a[i][j]) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                    <span class=\"built_in\">putchar</span>(<span class=\"string\">'R'</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                    <span class=\"built_in\">putchar</span>(<span class=\"string\">'Y'</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                    <span class=\"built_in\">putchar</span>(<span class=\"string\">'G'</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">                    <span class=\"built_in\">putchar</span>(<span class=\"string\">'B'</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">go</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(a));</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) a[i][n]=<span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> color=<span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>; k&lt;=n/<span class=\"number\">2</span>; k++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> j;</div><div class=\"line\">        <span class=\"keyword\">if</span>(color==<span class=\"number\">1</span>) color=<span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> color=<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(a[k][j])<span class=\"keyword\">break</span>;</div><div class=\"line\">            a[k][j]=color;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(j--; j&lt;=n<span class=\"number\">-1</span>; j++)</div><div class=\"line\">            a[k+<span class=\"number\">1</span>][j]=color;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n/<span class=\"number\">2</span>+<span class=\"number\">2</span>; i&lt;=n; i++)</div><div class=\"line\">        a[i][n<span class=\"number\">-1</span>]=<span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=n<span class=\"number\">-1</span>; j&gt;=<span class=\"number\">0</span>; j--) &#123;</div><div class=\"line\">        a[n/<span class=\"number\">2</span>+<span class=\"number\">2</span>][j]=<span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a[n/<span class=\"number\">2</span>+<span class=\"number\">1</span>][j]==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">            a[n/<span class=\"number\">2</span>+<span class=\"number\">1</span>][j]=<span class=\"number\">3</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n/<span class=\"number\">2</span>+<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a[i][<span class=\"number\">1</span>])<span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(color==<span class=\"number\">1</span>)color=<span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> color=<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(; j&lt;=n<span class=\"number\">-2</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(a[i][j])<span class=\"keyword\">break</span>;</div><div class=\"line\">            a[i][j]=color;</div><div class=\"line\">        &#125;</div><div class=\"line\">        j--;</div><div class=\"line\">        <span class=\"keyword\">int</span> k=i;</div><div class=\"line\">        <span class=\"keyword\">for</span>(; k&lt;=n; k++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(a[k][j+<span class=\"number\">1</span>]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</div><div class=\"line\">            a[k][j]=color;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(; j&lt;=n<span class=\"number\">-2</span>; j++)</div><div class=\"line\">            a[k][j]=color;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T_T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T_T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T_T--) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</div><div class=\"line\">        <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Y\"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No solution!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        go(n);</div><div class=\"line\">        print(n);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["构造","四色定理"]},{"title":"ZOJ 3811 Untrusted Patrol（想法）","url":"http://yoursite.com/2015/08/25/zoj3811/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3811\" target=\"_blank\" rel=\"external\">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3811</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n个点，m条无向边。给出k个能够记录的点，会记录第一次经过该点的时间。现在有L个点，保证这些点都是能够记录的点，且是按照时间从小到大排序的。问根据这些记录能否判断一个人有没有可能已经访问过所有的点。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先可以知道当L != K 时一定为no。</p>\n<ol>\n<li>先把第一个访问到的记录点、以及它能够走到的所有非记录的点标记为已访问过。</li>\n<li>接下来每碰到一个新的访问点，只需要看与它相连的点是否有被访问过，如果有则该点一定可以到达。然后再1的方式往访问过的集合里添加新点。</li>\n<li>最后需要判断是否所有的点都被访问过。</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g[N];</div><div class=\"line\"><span class=\"keyword\">int</span> t, n, m, k, l, has[N], is[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    has[u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!has[v] &amp;&amp; !is[v]) dfs(v);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;n, &amp;m, &amp;k);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) g[i].clear(), has[i] = is[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;u), is[u] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            g[u].pb(v); g[v].pb(u);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;l);</div><div class=\"line\">        <span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l != k) &#123;</div><div class=\"line\">            flag = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;u);</div><div class=\"line\">        dfs(u);</div><div class=\"line\">        l--;</div><div class=\"line\">        <span class=\"keyword\">while</span>(l--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;u);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!flag) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">                v = g[u][i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (has[v]) &#123;</div><div class=\"line\">                    s = <span class=\"number\">1</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!s) flag = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> dfs(u);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"keyword\">if</span> (has[i]) s++;</div><div class=\"line\">            <span class=\"keyword\">if</span> (s == n) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Yes\"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM"],"tags":["想法"]},{"title":"HDU 5103 RootedTree（状压dp, 树dp）","url":"http://yoursite.com/2015/08/19/hdu5103/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5103\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5103</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一棵树，给定n个节点，问有多少颗有根树，使得每个子树都满足以下条件：子树的根为i，子树上的点数为ti，li&lt;=ti&lt;=ri</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>dp[i][S] 表示以i为根节点，拥有孩子S（二进制数状态的方案数<br>sub[S] 表示S状态下森林的方案数<br>sum[S] 表示S状态的有根树的方案数</p>\n<p>可以知道<br>dp[i][S] = sub[ S^(1&lt;&lt;i) ] {L[i]&lt;=|S|&lt;=R[i]}<br>sum[S] = dp[i][S] { i=0,1,2,3,,,n-1 | S&amp;1&lt;&lt;i!=0  }<br>sub[S] = sub[S] +  sum[H]*sub[S^H]{ H为s的子集 ，这里有可能会计算重复，所以先固定S中的某一个点一定在H中，这样可以避免重复计算}</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include&lt;iostream&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;cmath&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;cstring&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;string&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;vector&gt;</span></div><div class=\"line\"><span class=\"comment\">#define pb push_back</span></div><div class=\"line\"><span class=\"comment\">#define INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"comment\">#define fi first</span></div><div class=\"line\"><span class=\"comment\">#define se second</span></div><div class=\"line\"><span class=\"comment\">#define debug puts(\"=====================\");</span></div><div class=\"line\">using namespace std;</div><div class=\"line\">typedef long long ll;</div><div class=\"line\">const <span class=\"keyword\">int</span> mod = <span class=\"number\">1</span>e9 + <span class=\"number\">7</span>;</div><div class=\"line\">ll dp[<span class=\"number\">15</span>][<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">15</span>], sum[<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">15</span>], <span class=\"function\"><span class=\"keyword\">sub</span>[1 &lt;&lt; 15]</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> l[<span class=\"number\">15</span>], r[<span class=\"number\">15</span>], n;</div><div class=\"line\"><span class=\"keyword\">int</span> cal(<span class=\"keyword\">int</span> <span class=\"keyword\">s</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"keyword\">if</span> (<span class=\"keyword\">s</span> &gt;&gt; i &amp; <span class=\"number\">1</span>) res++;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> main () &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"number\">_</span>;</div><div class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>, &amp;<span class=\"number\">_</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">_</span>--) &#123;</div><div class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">sub</span>[0] = <span class=\"title\">sum</span>[0] = 1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            scanf(<span class=\"string\">\"%d%d\"</span>, l + i, r + i);</div><div class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> tot = (<span class=\"number\">1</span> &lt;&lt; n);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> <span class=\"keyword\">s</span> = <span class=\"number\">1</span>; <span class=\"keyword\">s</span> &lt; tot; <span class=\"keyword\">s</span>++) &#123;</div><div class=\"line\">            sum[<span class=\"keyword\">s</span>] = <span class=\"function\"><span class=\"keyword\">sub</span>[<span class=\"title\">s</span>] = 0</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> cnt = cal(<span class=\"keyword\">s</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">                dp[i][<span class=\"keyword\">s</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((<span class=\"keyword\">s</span> &gt;&gt; i &amp; <span class=\"number\">1</span>) &amp;&amp; l[i] &lt;= cnt &amp;&amp; cnt &lt;= r[i]) &#123;</div><div class=\"line\">                    dp[i][<span class=\"keyword\">s</span>] = <span class=\"function\"><span class=\"keyword\">sub</span>[<span class=\"title\">s</span> ^ (1 &lt;&lt; <span class=\"title\">i</span>)]</span>;</div><div class=\"line\">                    sum[<span class=\"keyword\">s</span>] = (sum[<span class=\"keyword\">s</span>] + dp[i][<span class=\"keyword\">s</span>]) % mod;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++) <span class=\"keyword\">if</span> (<span class=\"keyword\">s</span> &gt;&gt; j &amp; <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> left = <span class=\"keyword\">s</span>; left; left = (left - <span class=\"number\">1</span>) &amp; <span class=\"keyword\">s</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!(left &gt;&gt; j &amp; <span class=\"number\">1</span>)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">sub</span>[<span class=\"title\">s</span>] = (<span class=\"title\">sub</span>[<span class=\"title\">s</span>] + (<span class=\"title\">sum</span>[<span class=\"title\">left</span>] * <span class=\"title\">sub</span>[<span class=\"title\">s</span> ^ <span class=\"title\">left</span>]) % <span class=\"title\">mod</span>) % <span class=\"title\">mod</span></span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, sum[tot - <span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14564193  2015-08-19 00:21:01 Accepted    5103    327MS   3680K   1526 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["状压dp"]},{"title":"HDU 5058 Harry And Math Teacher（dp+矩阵+线段树）","url":"http://yoursite.com/2015/08/18/hdu5058/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5058\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5058</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n层楼，每一层有两扇门。从第i层楼到第i+1层楼有4条路，即从i层的每扇门到i+1层的每扇门都有一条路。现在有两种操作，一种是将第i层到第i+1层的某条路给干掉（或者重新修好）。另一种是询问从第i层到第j层有多少不同的路。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>假设到第i层的第一扇门为dp[i][1]种，第二扇们有dp[i][2]中。那么<br>dp[i + 1][1] = a1 <em> dp[i][1] + a2 </em> dp[i][2]<br>dp[i + 1][2] = b1 <em> dp[i][2] + b2 </em> dp[i][2]<br>所以就相当于从第i层到第i+1层只需要乘以一个转换矩阵即可。而一开始转换矩阵中元素都为1。当有一条路被干掉则变为0<br>于是这道题就变成线段树维护矩阵乘积，单点更新，区间求乘积</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m, rt &lt;&lt; 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">50000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> ll mod = <span class=\"number\">1000000007</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    ll a[<span class=\"number\">2</span>][<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clr</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(a));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uni</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) a[i][j] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">one</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">            a[i][i] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) <span class=\"built_in\">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\">ll <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ll ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) ans += a[i][j], ans %= mod;</div><div class=\"line\">        <span class=\"keyword\">return</span> ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    node <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> node &amp; T) &#123;</div><div class=\"line\">        node tmp;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(tmp.a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(tmp.a));</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++)</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">2</span>; k++)</div><div class=\"line\">                    tmp.a[i][j] += a[i][k] * T.a[k][j], tmp.a[i][j] %= mod;</div><div class=\"line\">        <span class=\"keyword\">return</span> tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;mul[N &lt;&lt; <span class=\"number\">2</span>], tmp;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    mul[rt].clr();</div><div class=\"line\">    mul[rt] = mul[rt &lt;&lt; <span class=\"number\">1</span>] * mul[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</div><div class=\"line\">        mul[rt].uni();</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    build(lson);</div><div class=\"line\">    build(rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        mul[rt].a[y][z] ^= <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"comment\">//mul[rt].out();</span></div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) update(L, R, y, z, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) update(L, R, y, z, rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">node <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mul[rt];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    node ret;</div><div class=\"line\">    ret.one();</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) ret = ret * query(L, R, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) ret = ret * query(L, R, rson);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> op, a, b, x, y, z;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m)) &#123;</div><div class=\"line\">        n--;</div><div class=\"line\">        build(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;op);</div><div class=\"line\">            <span class=\"keyword\">if</span> (op == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</div><div class=\"line\">                tmp = query(a, b - <span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, tmp.get());</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;x, &amp;y, &amp;z);</div><div class=\"line\">                <span class=\"keyword\">if</span> (y == <span class=\"number\">1</span> &amp;&amp; z == <span class=\"number\">1</span>) y = <span class=\"number\">0</span>, z = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (y == <span class=\"number\">1</span> &amp;&amp; z == <span class=\"number\">2</span>) y = <span class=\"number\">0</span>, z = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (y == <span class=\"number\">2</span> &amp;&amp; z == <span class=\"number\">1</span>) y = <span class=\"number\">1</span>, z = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> y = <span class=\"number\">1</span>, z = <span class=\"number\">1</span>;</div><div class=\"line\">                update(x, x, y, z, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14562794  2015-08-18 21:47:28 Accepted    5068    795MS   5688K   2508 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["dp","线段树","矩阵"]},{"title":"HDU 5067 Harry And Dig Machine（状压dp）","url":"http://yoursite.com/2015/08/18/hdu5067/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5067\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5067</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n*m的格点，其中有一些点有东西（不超过10个点）。现在需要从左上角出发，每次只能朝相邻的方向走，问把所有的东西都拿到，然后回到起点的最小时间。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>状压dp：dp[i][j]为走过i中所有点（i为二进制），且当前在j这个点的最小值。dp[i | 1 &lt;&lt; k][k] = (dp[i][j] + dist[j][k]) 其中k为之前没有走过的点<br>这道题由于数据比较小，用next_permutation也能过。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, cnt;</div><div class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; s[<span class=\"number\">12</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">2000</span>][<span class=\"number\">12</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; x, pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(x.fi - y.fi) + <span class=\"built_in\">abs</span>(x.se - y.se);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m)) &#123;</div><div class=\"line\">        cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> u;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;u);</div><div class=\"line\">                <span class=\"keyword\">if</span> (u) s[cnt++] = make_pair(i, j);</div><div class=\"line\">            &#125;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(dp, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dp));</div><div class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> tot = <span class=\"number\">1</span> &lt;&lt; cnt;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tot; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; cnt; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!i) dp[i | (<span class=\"number\">1</span> &lt;&lt; j)][j] = get(s[j], &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!(i &gt;&gt; j &amp; <span class=\"number\">1</span>)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (dp[i][j] != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cnt; k++) <span class=\"keyword\">if</span> (!(i &gt;&gt; k &amp; <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">                            <span class=\"keyword\">int</span> st = i | (<span class=\"number\">1</span> &lt;&lt; k);</div><div class=\"line\">                            <span class=\"keyword\">if</span> (dp[st][k] == <span class=\"number\">-1</span>) dp[st][k] = dp[i][j] + get(s[j], s[k]);</div><div class=\"line\">                            <span class=\"keyword\">else</span> dp[st][k] = min(dp[st][k], dp[i][j] + get(s[j], s[k]));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = INF;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++) &#123;</div><div class=\"line\">            ans = min(ans, dp[tot - <span class=\"number\">1</span>][i] + get(s[i], &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cnt == <span class=\"number\">0</span>) ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14562788    2015-08-18 21:47:01    Accepted    5067    0MS    1656K    1379 B    G++    SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["状压dp"]},{"title":"HDU 5060 War（计算几何）","url":"http://yoursite.com/2015/08/18/hdu5060/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5060\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5060</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个球A：x^2+y^2+z^2 &lt;= r^2 以及一个圆柱体B：x^2+y^2 &lt;= hr^2 且 |z|&lt;=hz<br>定义VC为两者相交的体积，VU为两者的体积并。求VC/VU</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>球冠体积：一个球被一个截面所截，其中截面距离球心的距离l。则球冠体积为：π<em>h</em>h*(r-h/3) 其中h=r-l</p>\n<p>这道题先求出VC，然后VU=A+B-VC。VC的求法有5种情况</p>\n<ol>\n<li>hr &gt;= r &amp;&amp; hz &gt;= r （球在圆柱体内）</li>\n<li>hr &gt;= r &amp;&amp; hz &lt; r （球被圆柱体的两个底面分别截去一个球冠）</li>\n<li>hr &lt; r &amp;&amp; hr <em> hr + hz </em> hz &lt;= r * r （圆柱体在球内）</li>\n<li>hr &lt; r &amp;&amp; hz &gt;= r （圆柱体的圆半径小于球半径，但是圆柱体的长度大于球的长度）</li>\n<li>（圆柱体的圆半径小于球半径，但是圆柱体的长度小于球的长度）</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI cos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> r, hr, hz;</div><div class=\"line\"><span class=\"keyword\">double</span> vc, vu;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">s</span><span class=\"params\">(<span class=\"keyword\">double</span> l)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> h = r - l;</div><div class=\"line\">    <span class=\"keyword\">return</span> PI * h * h * (r - h / <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf%lf\"</span>, &amp;r, &amp;hr, &amp;hz)) &#123;</div><div class=\"line\">        <span class=\"keyword\">double</span> sq = <span class=\"number\">4.0</span> / <span class=\"number\">3</span> * PI * r * r * r;</div><div class=\"line\">        <span class=\"keyword\">double</span> sz = PI * hr * hr * <span class=\"number\">2</span> * hz;</div><div class=\"line\">        <span class=\"keyword\">if</span> (hr &gt;= r &amp;&amp; hz &gt;= r) &#123;</div><div class=\"line\">            vc = sq;</div><div class=\"line\">            vu = sz;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hr &gt;= r &amp;&amp; hz &lt; r) &#123;</div><div class=\"line\">            vc = sq - <span class=\"number\">2</span> * s(hz);</div><div class=\"line\">            vu = sz + sq - vc;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hr &lt; r &amp;&amp; hr * hr + hz * hz &lt;= r * r) &#123;</div><div class=\"line\">            vc = sz;</div><div class=\"line\">            vu = sq;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hr &lt; r &amp;&amp; hz &gt;= r) &#123;</div><div class=\"line\">            <span class=\"keyword\">double</span> hz1 = <span class=\"built_in\">sqrt</span>(r * r - hr * hr);</div><div class=\"line\">            vc = PI * hr * hr * <span class=\"number\">2</span> * hz1 + <span class=\"number\">2</span> * s(hz1);</div><div class=\"line\">            vu = sz + sq - vc;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">double</span> hz1 = <span class=\"built_in\">sqrt</span>(r * r - hr * hr);</div><div class=\"line\">            vc = PI * hr * hr * <span class=\"number\">2</span> * hz1 + <span class=\"number\">2</span> * s(hz1) - <span class=\"number\">2</span> * s(hz);</div><div class=\"line\">            vu = sz + sq - vc;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.6lf\\n\"</span>, vc / vu);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14562534  2015-08-18 21:30:17 Accepted    5060    2340MS  1596K   1056 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["计算几何","球冠体积"]},{"title":"HDU 5102 The K-th Distance（想法）","url":"http://yoursite.com/2015/08/17/hdu5102/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5067\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5067</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一棵树n个节点，每条边都为1。现在把每两个点之间的距离放在一起，按照从大到小排列。问前k个的和为多少？保证k小于等于min(1e6, n*(n-1)/2)</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>把所有边(u,v)以及(v,u)放入队列，队列每弹出一个元素(u,v)，对于所有与v相邻的点w，如果w≠u，就把(v,w)入队，这样就能一个一个生成前K小的距离。 注意到每条边实际上会入队两次，只要把K翻倍且把ans除以2即可，时间复杂度为O(n+K)</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1 &lt;&lt; 30</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, k, m;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g[N];</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> u, v, l;</div><div class=\"line\">&#125;tmp;</div><div class=\"line\">node q[M * <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;k);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) g[i].clear();</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, l;</div><div class=\"line\">        k *= <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> st = <span class=\"number\">0</span>, ed = <span class=\"number\">0</span>;</div><div class=\"line\">        ll ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            g[u].pb(v);</div><div class=\"line\">            g[v].pb(u);</div><div class=\"line\">            <span class=\"keyword\">if</span> (ed &lt; k) q[ed++] = &#123;u, v, <span class=\"number\">1</span>&#125;, ans++;</div><div class=\"line\">            <span class=\"keyword\">if</span> (ed &lt; k) q[ed++] = &#123;v, u, <span class=\"number\">1</span>&#125;, ans++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(ed &lt; k) &#123;</div><div class=\"line\">            tmp = q[st++];</div><div class=\"line\">            u = tmp.u, v = tmp.v, l = tmp.l;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[v].size(); i++) <span class=\"keyword\">if</span> (g[v][i] != u &amp;&amp; ed &lt; k)&#123;</div><div class=\"line\">                q[ed++] = &#123;v, g[v][i], l + <span class=\"number\">1</span>&#125;;</div><div class=\"line\">                ans += l + <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans / <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14550969  2015-08-17 22:24:35 Accepted    5102    920MS   31204K  1099 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["想法"]},{"title":"HDU 4986 Little Pony and Alohomora Part I（递推+调和级数）","url":"http://yoursite.com/2015/08/16/hdu4986/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4986\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4986</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n个盒子，每个盒子都有唯一一把钥匙可以打开它。现在将钥匙随机放在盒子里，问最少需要撬开几个盒子才能打开所有的盒子，求期望。其实就是求随机排列的期望循环个数。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>递推：假设f[n]为打开n个盒子的期望，当多了一个盒子时，如果该盒子装的是自己的钥匙，则需要多撬一次。如果装的是其他盒子的钥匙，相当于之前有一个循环多了一个数，但是次数不变。所以f[n+1] = (f[n]+1 + f[n]*n)/(n+1) = 1/(n+1) + f[n]。而f[1] = 1<br>这是数列为调和级数：当n很大的时候为log2(n+1) + 0.57721566490153286060651209(欧拉常数)</p>\n<p>一个数位于循环长度为k的概率为1/n(与k无关) 证明如下：<br><img src=\"http://siofive.qiniudn.com/hdu4986.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">double</span> a[<span class=\"number\">200000</span> + <span class=\"number\">100</span>];</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> euler 0.57721566490153286060651209</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">200000</span>; i++) &#123;</div><div class=\"line\">\t\tans += <span class=\"number\">1.0</span> / i;</div><div class=\"line\">\t\ta[i] = ans;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">200000</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.4f\\n\"</span>, a[n]);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.4f\\n\"</span>, <span class=\"built_in\">log</span>(n) + euler);</div><div class=\"line\">\t&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14534921    2015-08-16 17:59:18    Accepted    4986    0MS    3140K    565 B    G++    SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["递推","调和级数","置换"]},{"title":"Codeforces 55D Beautiful numbers（数位DP）","url":"http://yoursite.com/2015/08/16/CF55D/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/problemset/problem/55/D\" target=\"_blank\" rel=\"external\">http://codeforces.com/problemset/problem/55/D</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个数字n，如果n能被它数位上的每一个非零数字整除，这个数就被称为Beautiful number。为给定区间[l, r]内有多少个Beautiful numbers。其中1≤l≤r≤9*1e18</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>一个数能被其所有数位上的非零数字整除，即被他们的最小公倍数整除，而1~9的lcm为2520。所以数位dp时只需要保存前面那些位的最小公倍数即可，到边界就把所有位的lcm求出了，为了判断这个数能不能被lcm整除，还需要保存这个数的值，显然记录是不行的。其实只要记录这个数模2520即可。这样可以设计如下dp：dfs(pos,mod,lcm,f)。pos为当前位，mod为模2520的值，lcm为最小公倍数，f表示前面是否达到上限。但其实1~9的所有最小公倍数只有48个。这样开dp[20][2520][48]的数组即可。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>标称<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">2520</span>;</div><div class=\"line\">ll dp[<span class=\"number\">20</span>][mod][<span class=\"number\">48</span>];</div><div class=\"line\">ll l, r;</div><div class=\"line\"><span class=\"keyword\">int</span> num[mod + <span class=\"number\">10</span>], cnt, t, bit[<span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= mod; i++) <span class=\"keyword\">if</span> (mod % i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tnum[i] = cnt++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!y) <span class=\"keyword\">return</span> x;</div><div class=\"line\">\t<span class=\"keyword\">return</span> gcd(y, x % y);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lcm</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x / gcd(x, y) * y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> prelcm, <span class=\"keyword\">bool</span> flag)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> (pre % prelcm == <span class=\"number\">0</span>);</div><div class=\"line\">\tll ret = dp[pos][pre][num[prelcm]];</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!flag &amp;&amp; ret != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t<span class=\"keyword\">int</span> u = flag ? bit[pos] : <span class=\"number\">9</span>;</div><div class=\"line\">\tret = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= u; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> now = (pre * <span class=\"number\">10</span> + i) % mod;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> nowlcm = prelcm;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i) nowlcm = lcm(prelcm, i);</div><div class=\"line\">\t\tret += dfs(pos - <span class=\"number\">1</span>, now, nowlcm, (i == u ? <span class=\"number\">1</span> : <span class=\"number\">0</span>) &amp;&amp; flag);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!flag) dp[pos][pre][num[prelcm]] = ret;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">calc</span><span class=\"params\">(ll x)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">\t\tbit[pos++] = x % <span class=\"number\">10</span>;</div><div class=\"line\">\t\tx /= <span class=\"number\">10</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> dfs(pos - <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tinit();</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(dp, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dp));</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%I64d%I64d\"</span>, &amp;l, &amp;r);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, calc(r) - calc(l - <span class=\"number\">1</span>));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","categories":["ACM"],"tags":["数位dp"]},{"title":"HDU 5057 Argestes and Sequence（树状数组+离线 OR 分块）","url":"http://yoursite.com/2015/08/08/hdu5057/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5057\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5057</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n个数，m个询问。每个询问有两种操作，一个改变某一个数，即a[x]=y。还有一个是询问[l,r]区间内从右往左第d位为p的数字个数。<br>1≤n,m≤1e5, 0≤a[i]≤2^31 - 1, 1&lt;=D&lt;=10, 0&lt;=P&lt;=9</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>第一眼想法是给每一位每一个数字种一棵树状数组。这样需要开dp[10][10][100000]，然而这道题比较变态，会爆内存。（可以用char + unsigned short 来表示。刚好可以卡过。。）</p>\n<p>比较好的方式是分块：<br>分成400块，每块256个数。block[i][j][x]表示x块内第i为为p的数字总数。<br>当修改一个数的时候，O(1)的修改块内统计信息即可。<br>当查询一个区间时，如果在区间在同一个块，直接找一遍。如果不在同一个块内，则单独跑左右两块，然后中间整块的直接相加。复杂度为O(sqrt(n))</p>\n<p>还有一个用时间换空间的方式：<br>由于开不了3维的数组，那么我们开2维的数组，然后对每一位都算一遍所有的操作。<br>即把所有的操作离线下来，然后对每一位进行一次操作。不过在每次操作之前需要把数变为一开始的数。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>分块<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> block[<span class=\"number\">400</span>][<span class=\"number\">11</span>][<span class=\"number\">10</span>]; <span class=\"comment\">//400 blocks, each 256</span></div><div class=\"line\"><span class=\"keyword\">int</span> dig[<span class=\"number\">100100</span>][<span class=\"number\">11</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> t, n, m, l, r, d, p;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"built_in\">memset</span>(block, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(block));</div><div class=\"line\">        <span class=\"keyword\">int</span> u;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;u);</div><div class=\"line\">            <span class=\"keyword\">int</span> x = i &gt;&gt; <span class=\"number\">8</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">10</span>; j++) &#123;</div><div class=\"line\">                ++block[x][j][dig[i][j] = u % <span class=\"number\">10</span>];</div><div class=\"line\">                u /= <span class=\"number\">10</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">char</span> ch;</div><div class=\"line\">        <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">            ch = getchar();</div><div class=\"line\">            <span class=\"keyword\">while</span>(ch != <span class=\"string\">'S'</span> &amp;&amp; ch != <span class=\"string\">'Q'</span>) ch = getchar();</div><div class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'S'</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;l, &amp;r);</div><div class=\"line\">                <span class=\"keyword\">int</span> x = l &gt;&gt; <span class=\"number\">8</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">10</span>; j++) &#123;</div><div class=\"line\">                    --block[x][j][dig[l][j]];</div><div class=\"line\">                    ++block[x][j][dig[l][j] = r % <span class=\"number\">10</span>];</div><div class=\"line\">                    r /= <span class=\"number\">10</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;l, &amp;r, &amp;d, &amp;p);</div><div class=\"line\">                <span class=\"keyword\">int</span> bl = ((l - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">8</span>) + <span class=\"number\">1</span>, br = r &gt;&gt; <span class=\"number\">8</span>, ans = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (bl &lt;= br) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> bls = bl &lt;&lt; <span class=\"number\">8</span>, brs = br &lt;&lt; <span class=\"number\">8</span>;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt; bls; i++) ans += (dig[i][d] == p);</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = brs; i &lt;= r; i++) ans += (dig[i][d] == p);</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = bl; i &lt; br; i++) ans += block[i][d][p];</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt;= r; i++) ans += (dig[i][d] == p);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>树状数组+离线<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> t, n, m;</div><div class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">10</span>][N];</div><div class=\"line\"><span class=\"keyword\">int</span> b[N], c[N], ans[N];</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> op;</div><div class=\"line\">\t<span class=\"keyword\">int</span> l, r, d, p;</div><div class=\"line\">&#125;p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> dig, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(p &lt;= n) &#123;</div><div class=\"line\">\t\ta[dig][p] += v;</div><div class=\"line\">\t\tp += lowbit(p);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> dig)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(p) &#123;</div><div class=\"line\">\t\tres += a[dig][p];</div><div class=\"line\">\t\tp -= lowbit(p);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clr</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= n; j++) a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">int</span> u;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, b + i), c[i] = b[i];</div><div class=\"line\">        <span class=\"keyword\">char</span> ch;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">\t\t\tch = getchar();</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(ch != <span class=\"string\">'S'</span> &amp;&amp; ch != <span class=\"string\">'Q'</span>) ch = getchar();</div><div class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'Q'</span>) &#123;</div><div class=\"line\">\t\t\t\tp[i].op = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;p[i].l, &amp;p[i].r, &amp;p[i].d, &amp;p[i].p);</div><div class=\"line\">                p[i].d--;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            \tp[i].op = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;p[i].l, &amp;p[i].r);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> now = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tclr();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">\t\t\t\tb[j] = c[j];</div><div class=\"line\">\t\t\t\tadd(j, (b[j] / now) % <span class=\"number\">10</span>, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p[j].op == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (p[j].d != i) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t\t\tans[j] = get(p[j].r, p[j].p) - get(p[j].l - <span class=\"number\">1</span>, p[j].p);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> x = (b[p[j].l] / now) % <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\t\t\tadd(p[j].l, x, <span class=\"number\">-1</span>);</div><div class=\"line\">\t\t\t\t\tx = (p[j].r / now) % <span class=\"number\">10</span>;</div><div class=\"line\">\t\t\t\t\tadd(p[j].l, x, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\tb[p[j].l] = p[j].r;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tnow *= <span class=\"number\">10</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) <span class=\"keyword\">if</span> (p[i].op) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14402325    2015-08-07 23:47:34    Accepted    5057    904MS    6060K    1808 B    G++    SIO__Five 分块</li>\n<li>14402693    2015-08-08 01:01:00    Accepted    5057    967MS    8624K    1894 B    G++    SIO__Five 树状数组+离线</li>\n</ul>\n","categories":["ACM"],"tags":["分块","树状数组","离线"]},{"title":"HDU 4994 Revenge of Nim（博弈）","url":"http://yoursite.com/2015/08/04/hdu4994/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4994\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4994</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n堆石头，从左往右排列，每堆石头有ai个石头（ai&gt;0)。现在两个人轮流取石头，规定每次只能从最左边的一堆取若干个（可以取完，最少取一个）。问先手赢还是输？</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>假设当前堆的石头个数大于1，那么这个人必赢。因为除了这堆、剩下的如果为必败态，那么可以将这堆取完，让对手面临必败态，反之，可以取到只剩下一个，然后让对手取一个石头，自己面临必胜态。注意有可能全是1的情况</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> t, n, a[<span class=\"number\">1111</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">1111</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[i] != <span class=\"number\">1</span>) x = min(i, x);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">1111</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Yes\"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">2</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Yes\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14346124  2015-08-04 21:34:58 Accepted    4994    15MS    1576K   569 B   G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["博弈"]},{"title":"HDU 5303 Delicious Apples（贪心+背包）","url":"http://yoursite.com/2015/07/31/hdu5303/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5303\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5303</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个长度为L的圆形场地，有n种苹果树，每种苹果树距离原点距离为xi，有ai个苹果。现在有人从原点开始摘苹果，篮子最多装k个苹果，且每次摘完之后必须回到原点才能清空篮子。问他最少需要走多少距离。<br>保证总的苹果小于等于10^5</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>如果从中点断开，把圆分成两半，则两边的贪心取，然后折道返回，可以得到解。但是这不是最优解，有可能最后剩下一些苹果，一次性绕一个圆形取完。可以发现，最多只能绕一圈。但是发现这个结论之后，还是不好处理。一个巧妙的想法是：<br>把每一个苹果当做一个点，分成左右两部分，然后分别处理。举左边一半为例，以sum[i]表示把前i个苹果全部取回的最小代价，则有：<br>sum[i] = d<a href=\"i &lt;= k\">i</a><br>sum[i] = sum[i - k] + d<a href=\"i &gt; k\">i</a><br>之后枚举需要走一圈摘的苹果（可以发现这些苹果一定是离原点最远的k个点）</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">int</span> t, n, k, m, l;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; a, b;</div><div class=\"line\">ll s1[N], s2[N];</div><div class=\"line\"><span class=\"keyword\">void</span> work(vector&lt;<span class=\"keyword\">int</span>&gt; &amp;a, ll * s) &#123;</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">if</span> (i &lt; k) s[i + <span class=\"number\">1</span>] = a[i];</div><div class=\"line\">        <span class=\"built_in\">else</span> s[i + <span class=\"number\">1</span>] = s[i + <span class=\"number\">1</span> - k] + a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> main () &#123;</div><div class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"built_in\">while</span>(t--) &#123;</div><div class=\"line\">        scanf(<span class=\"string\">\"%d%d%d\"</span>, &amp;l, &amp;n, &amp;k);</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        a.<span class=\"built_in\">clear</span>();</div><div class=\"line\">        b.<span class=\"built_in\">clear</span>();</div><div class=\"line\">        m = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            scanf(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            m += v;</div><div class=\"line\">            <span class=\"built_in\">if</span> (u &gt; l / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                u = l - u;</div><div class=\"line\">                <span class=\"built_in\">while</span>(v--) b.pb(u);</div><div class=\"line\">            &#125; <span class=\"built_in\">else</span> <span class=\"built_in\">while</span>(v--) a.pb(u);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>());</div><div class=\"line\">        sort(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</div><div class=\"line\">        work(a, s1);</div><div class=\"line\">        work(b, s2);</div><div class=\"line\">        ll ans = s1[a.<span class=\"built_in\">size</span>()] * <span class=\"number\">2</span> + s2[b.<span class=\"built_in\">size</span>()] * <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"built_in\">if</span> (m &lt;= k) ans = <span class=\"built_in\">min</span>(ans, (ll)l);</div><div class=\"line\">        <span class=\"built_in\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>() &amp;&amp; i &lt;= k; i++) &#123;</div><div class=\"line\">                ll res = s1[a.<span class=\"built_in\">size</span>() - i] * <span class=\"number\">2</span> + s2[b.<span class=\"built_in\">size</span>() - (k - i)] * <span class=\"number\">2</span> + l;</div><div class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, res);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        printf(<span class=\"string\">\"%I64d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14277804  2015-07-31 17:14:30 Accepted    5303    889MS   3308K   1345 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["想法","贪心","背包"]},{"title":"HDU 5301 Buildings（数学, 想法）","url":"http://yoursite.com/2015/07/29/hdu5301/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5301\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5301</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n<em>m的矩形，其中在(x,y)位置有一个坏的1</em>1的矩形不能用，现在问要将该矩阵用其他小矩阵填满，且这些小矩阵至少要和大矩阵的四条边中的一条边有一些公共部分。现在要是这些小矩形中最大的面积最小，求该面积。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先如果没有坏的矩形，假设最后分得的矩形为a<em>b，那么一定还可以继续分为1</em>b或者1<em>a的形式，答案一定为min(n + 1, m + 1)/2。<br>现在加入了一个坏的矩形，如下图所示：<br><img src=\"http://siofive.qiniudn.com/hdu5301.png\" alt=\"\"><br>其中up和down都不包括小矩形，而left和right都包括该小矩形。<br>假设不考虑坏矩形，答案应该为ans=(n+1)/2<br>考虑坏矩形，如果min(left, right) &lt;= ans, 那么左半边或者右边边直接用n</em>min(left, right)划分，另一边则还按照原先的划分。<br>如果min(left,right) &gt; ans，那么就应该用min(max(up, down), min(left, right))中的来划分。（这里还要注意如果up==down的话，最小值还是ans）<br>最后有一个trick：如果n==m &amp;&amp; x == y &amp;&amp; 2 * x + 1 == n 那么答案应该为 n/2</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, x, y;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;n, &amp;m, &amp;x, &amp;y)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &gt; m) swap(n, m), swap(x, y);</div><div class=\"line\">        <span class=\"keyword\">int</span> t = (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> up = x - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> dw = n - x;</div><div class=\"line\">        <span class=\"keyword\">int</span> lf = y;</div><div class=\"line\">        <span class=\"keyword\">int</span> rg = m - y + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (min(lf, rg) &gt; t &amp;&amp; up != dw) t = min(max(up, dw), min(lf, rg));</div><div class=\"line\">        <span class=\"keyword\">if</span> ((n == m) &amp;&amp; (n % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &amp;&amp; (x == y) &amp;&amp; (x * <span class=\"number\">2</span> - <span class=\"number\">1</span> == n)) t = n / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, t);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14246606  2015-07-29 21:59:37 Accepted    5301    15MS    1564K   625 B   G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["数学","想法"]},{"title":"HDU 5305 Friends（搜索）","url":"http://yoursite.com/2015/07/29/hdu5305/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5305\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5305</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n个人，如果两两之间是朋友，这种友情有两种性质，一是离线朋友，二是在线朋友。现在有m个朋友关系，问每一个人的离线朋友和在线朋友数相等的情况数。<br>其中1≤n≤8,0≤m≤n*(n-1)/2</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>我的想法是：这个图会有很多个联通块，所以对于每一个联通块，进行搜索。搜索时，每找到一个人，便枚举其离线和在线的所有情况，然后找下一个人，最后所有人都分配好之后答案加1。不同联通块之间答案相乘。需要注意如果m为0答案为1。</p>\n<p>看了标程之后，不得不佩服，代码写的非常犀利。具体是；<br>从第一个点开始，如果和其他点有边相连，则先把边赋值为+1，然后搜索与第一个点相连的下一个点，并对边继续赋值。如果最后全部赋值完之后，该点的边符合条件，则继续搜下一个点。在回溯的时候在把该边赋值为-1。这样从第一个点搜到最后一个点即可得到答案。（dfs的过程不好描述。。具体看代码）</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>标称<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> T, a[<span class=\"number\">10</span>][<span class=\"number\">10</span>], n, m, ans, du[<span class=\"number\">10</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &gt; n) ans++; <span class=\"comment\">//找到一个答案</span></div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (y &gt; n) &#123; <span class=\"comment\">//x点的所有边已经赋值完</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (du[x]) <span class=\"keyword\">return</span> ; <span class=\"comment\">//du[x] != 0 表示赋值失败</span></div><div class=\"line\">        dfs(x + <span class=\"number\">1</span>, x + <span class=\"number\">2</span>); <span class=\"comment\">//成功，搜索下一个点</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[x][y]) &#123;</div><div class=\"line\">            du[x]++;</div><div class=\"line\">            du[y]++;</div><div class=\"line\">            dfs(x, y + <span class=\"number\">1</span>);</div><div class=\"line\">            du[x] -= <span class=\"number\">2</span>;</div><div class=\"line\">            du[y] -= <span class=\"number\">2</span>;</div><div class=\"line\">            dfs(x, y + <span class=\"number\">1</span>);</div><div class=\"line\">            du[x]++;</div><div class=\"line\">            du[y]++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> dfs(x, y + <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;T;</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</div><div class=\"line\">                a[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            a[u][v] = a[v][u] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ans = <span class=\"number\">0</span>;</div><div class=\"line\">        dfs(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>比赛写的搜索+二进制枚举<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">8</span>][<span class=\"number\">8</span>], n, m, T;</div><div class=\"line\"><span class=\"keyword\">int</span> b[<span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g[<span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> cnt;</div><div class=\"line\"><span class=\"keyword\">int</span> l[<span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    l[cnt++] = u;</div><div class=\"line\">    b[u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!b[v]) dfs(v);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> fk = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (i == cnt) &#123;</div><div class=\"line\">        fk++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (i &gt; cnt) <span class=\"keyword\">return</span> ;</div><div class=\"line\">    <span class=\"keyword\">int</span> od = <span class=\"number\">0</span>, ev = <span class=\"number\">0</span>, u = l[i];</div><div class=\"line\">    <span class=\"keyword\">int</span> out[<span class=\"number\">8</span>], cc = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> ii = <span class=\"number\">0</span>; ii &lt; g[u].size(); ii++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][ii];</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[u][v] == <span class=\"number\">1</span>) od++;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[u][v] == <span class=\"number\">2</span>) ev++;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[u][v] == <span class=\"number\">0</span>) out[cc++] = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cc == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (od == ev) work(i + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">1</span> &lt;&lt; cc;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; t; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> ck = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cc; k++) <span class=\"keyword\">if</span> (j &gt;&gt; k &amp; <span class=\"number\">1</span>) ck++;</div><div class=\"line\">            <span class=\"keyword\">if</span> (ck + od != g[u].size() / <span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> sb[<span class=\"number\">8</span>];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> ii = <span class=\"number\">0</span>; ii &lt; n; ii++)</div><div class=\"line\">                sb[ii] = a[u][ii];</div><div class=\"line\">            <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; cc; k++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> v = out[k];</div><div class=\"line\">                <span class=\"keyword\">if</span> (j &gt;&gt; k &amp; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    a[u][v] = a[v][u] = <span class=\"number\">1</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    a[u][v] = a[v][u] = <span class=\"number\">2</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cc; k++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> v = out[k];</div><div class=\"line\">            &#125;</div><div class=\"line\">            work(i + <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> ii = <span class=\"number\">0</span>; ii &lt; n; ii++)</div><div class=\"line\">                a[u][ii] = a[ii][u] = sb[ii];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;T;</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) g[i].clear();</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; m; l++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            u--, v--;</div><div class=\"line\">            g[u].pb(v);</div><div class=\"line\">            g[v].pb(u);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (m % <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"keyword\">if</span> (g[i].size() % <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">                flag = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flag) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(b, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(b));</div><div class=\"line\">        <span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(a));</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"keyword\">if</span> (!b[i] &amp;&amp; g[i].size()) &#123;</div><div class=\"line\">                cnt = <span class=\"number\">0</span>;</div><div class=\"line\">                dfs(i);</div><div class=\"line\">                fk = <span class=\"number\">0</span>;</div><div class=\"line\">                work(<span class=\"number\">0</span>);</div><div class=\"line\">                ans *= fk;</div><div class=\"line\">            &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14244955  2015-07-29 20:27:28 Accepted    5305    31MS    1408K   672 B   G++ SIO__Five 标称</li>\n<li>14244711  2015-07-29 20:16:34 Accepted    5305    93MS    1616K   2849 B  G++ SIO__Five 二进制枚举</li>\n</ul>\n","categories":["ACM"],"tags":["搜索"]},{"title":"HDU 5297 Y sequence（数论，容斥，迭代）","url":"http://yoursite.com/2015/07/29/hdu5297/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5297\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5297</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>定义一个序列，其中每一个数都不能表示为a^b(其中2≤b≤r)。现在给定n和r。问排在第n位的数字是多少？<br>其中n≤2*1e18,2≤r≤62</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>乍一看这道题完全没有想法。<br>其实可以先考虑任意给定一个数字n，求n排在第几位。这就需要把2, 3, …… r次方的数都删去。可以发现删去2次方时，4次方，8次方，以此类推的都被删过了。所以我们只需要考虑质数即可。<br>当然，这样还是有问题，比如6次方在删2次方、3次方时被多干掉一次，所以需要用容斥定理。我之前一直以为容斥要用dfs来搜。今天学到了一个新姿势。详细见代码<br>需要注意的细节是1肯定不行，所以最后要删去。<br>求出来数字n是多少位之后，就可以搞了。常见的想法是二分，但是这道题目的区间特别大，二分并不合适。<br>这里采用了迭代的思想，假设当前now排在第m位，距离第n位还有n-m位，那么就再算now+m排在第几位，以此类推直到找到最后的答案。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\">ll n;</div><div class=\"line\"><span class=\"keyword\">int</span> r;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;ll&gt; p;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;ll&gt; f;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getprime</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">61</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>; j &lt;= <span class=\"built_in\">sqrt</span>(i + <span class=\"number\">0.5</span>); j++) <span class=\"keyword\">if</span> (i % j == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            flag = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flag) p.push_back(-i);<span class=\"comment\">//, cout&lt;&lt;i&lt;&lt;endl;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getfac</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    f.clear();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size() &amp;&amp; <span class=\"built_in\">abs</span>(p[i]) &lt;= r; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num = f.size();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; num; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(f[j] * p[i]) &gt; <span class=\"number\">63</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">//2的64次就已经超过了最大值</span></div><div class=\"line\">            f.push_back(f[j] * p[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        f.push_back(p[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">cal</span><span class=\"params\">(ll n)</span> </span>&#123;</div><div class=\"line\">    ll res = n;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; f.size(); i++) &#123;</div><div class=\"line\">        ll p = (ll)<span class=\"built_in\">pow</span>(n + <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span> / <span class=\"built_in\">abs</span>(f[i])) - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f[i] &gt; <span class=\"number\">0</span>) res += p;</div><div class=\"line\">        <span class=\"keyword\">else</span> res -= p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res - <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    getprime();</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%I64d%d\"</span>, &amp;n, &amp;r);</div><div class=\"line\">        getfac();</div><div class=\"line\">        ll now = n, ans;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            ans = cal(now);</div><div class=\"line\">            <span class=\"keyword\">if</span> (ans == n) <span class=\"keyword\">break</span>;</div><div class=\"line\">            now += n - ans;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, now);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">10</span></div><div class=\"line\"><span class=\"comment\">20000000000000000 63</span></div><div class=\"line\"><span class=\"comment\">*/</span></div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14238099  2015-07-29 15:31:11 Accepted    5297    358MS   1580K   1221 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["数论","容斥","迭代"]},{"title":"HDU 4957 Poor Mitsui（贪心, 大数, 想法）","url":"http://yoursite.com/2015/07/27/hdu 4957/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4957\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4957</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个水龙头，单位时间出水为V。有n个破的水桶，每个水桶漏水的速度为ai，每个水桶要接到bi的水。现在问能否在某一时刻使得各个水桶符合条件，求最小的该时刻。<br>其中1≤n,v,ai,bi≤40</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>考虑两个水桶，第一个为ai,bi，第二个为aj,bj。<br>把第一个排在前面的时间为： $\\frac{b_j}{v-a_j}+\\frac{\\frac{a_i*b_j}{v-a_j}+b_i}{v-a_i}$</p>\n<p>把第二个排在前面的时间为： $\\frac{b_i}{v-a_i}+\\frac{\\frac{a_j*b_i}{v-a_i}+b_j}{v-a_j}$</p>\n<p>所以可以发现只需要比较 ${b_i}\\times{a_j}$ 和 ${b_j}\\times{a_i}$</p>\n<p>的大小即可</p>\n<p>这道题有几个坑点：</p>\n<ol>\n<li>如果水桶需要的水量不为零，且水桶漏水的速度大于v不行</li>\n<li>如果水桶需要的水量为0时，所需要的时间应该是为0.</li>\n<li>这道题的最后的答案可能非常大，超double了。我用了java中的BigDecimal</li>\n</ol>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">BigDecimal除一个数得到无限循环小数时会有问题，用：</span></div><div class=\"line\"><span class=\"keyword\"> </span>   <span class=\"keyword\">BigDecimal.divide(BigDecimal, </span>k, <span class=\"keyword\">BigDecimal.ROUND_HALF_UP); </span>来保留k为小数</div><div class=\"line\"><span class=\"keyword\">BigDecimal四舍五入：</span></div><div class=\"line\"><span class=\"keyword\"> </span>   <span class=\"keyword\">BigDecimal.setScale(0, </span><span class=\"keyword\">BigDecimal.ROUND_HALF_UP);</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.*;</div><div class=\"line\">import java.math.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Main</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> final <span class=\"keyword\">int</span> N = <span class=\"number\">50</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String args[]</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</div><div class=\"line\">         <span class=\"keyword\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</div><div class=\"line\">        Scanner <span class=\"keyword\">in</span> = <span class=\"keyword\">new</span> Scanner(System.<span class=\"keyword\">in</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> test_count = <span class=\"keyword\">in</span>.nextInt();</div><div class=\"line\">        <span class=\"keyword\">int</span> n, v;</div><div class=\"line\">        <span class=\"keyword\">while</span> (test_count -- &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            n = <span class=\"keyword\">in</span>.nextInt();</div><div class=\"line\">            v = <span class=\"keyword\">in</span>.nextInt();</div><div class=\"line\">            <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">                a[i] = <span class=\"keyword\">in</span>.nextInt();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">                b[i] = <span class=\"keyword\">in</span>.nextInt();</div><div class=\"line\">                <span class=\"keyword\">if</span> (a[i] &gt;= v &amp;&amp; b[i] != <span class=\"number\">0</span>) flag = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.println(<span class=\"number\">-1</span>);</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (b[i] * a[j] &gt;= b[j] * a[i]) &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> tmp;</div><div class=\"line\">                        tmp = a[i]; a[i] = a[j]; a[j] = tmp;</div><div class=\"line\">                        tmp = b[i]; b[i] = b[j]; b[j] = tmp;</div><div class=\"line\">                        <span class=\"comment\">//swap(a[i], a[j]);</span></div><div class=\"line\">                        <span class=\"comment\">//swap(b[i], b[j]);</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            BigDecimal tot = BigDecimal.ZERO;</div><div class=\"line\">            BigDecimal now;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (b[i] == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                now = tot.multiply(BigDecimal.valueOf(a[i])).<span class=\"keyword\">add</span>(BigDecimal.valueOf(b[i]));</div><div class=\"line\">                now = now.divide(BigDecimal.valueOf(v - a[i]), <span class=\"number\">200</span>, BigDecimal.ROUND_HALF_UP);</div><div class=\"line\">                tot = tot.<span class=\"keyword\">add</span>(now);</div><div class=\"line\">            &#125;</div><div class=\"line\">            tot =  tot.setScale(<span class=\"number\">0</span>, BigDecimal.ROUND_HALF_UP);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(tot);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14209027  2015-07-27 23:02:04 Accepted    4957    436MS   13616K  1672 B  Java    SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["想法","大数","贪心"]},{"title":"HDU 4932 Miaomiao's Geometry（想法）","url":"http://yoursite.com/2015/07/27/hdu 4932/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4932\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4932</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一些点，要用一些等长的线段去覆盖这些点。问这些线段最长可以为多少？这些线段不能够相交，并且点只能够在线段的两个端点。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>我一上来就是二分。wa成狗。。<br>其实二分是不对的，如0,1,4,5 答案为3，但是2不行<br>仔细想想，其实会发现答案一定其中两个相邻点之间距离或者距离的一半。因为如果距离小于一半，那么可以扩大，扩到一半，这样两个线段相交。如果大于一半，小于该距离，同样可以扩大到该距离位置。对每个可行值进行判断即可。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-7</span></div><div class=\"line\"><span class=\"keyword\">int</span> t, n;</div><div class=\"line\"><span class=\"keyword\">double</span> a[<span class=\"number\">100</span>];</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> now = a[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (now == a[i]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] - now &gt;= x) now = a[i];</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i] + x &lt;= a[i + <span class=\"number\">1</span>]) now = a[i] + x;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>, a + i);</div><div class=\"line\">        sort(a, a + n);</div><div class=\"line\">        <span class=\"comment\">/*  二分有问题</span></div><div class=\"line\"><span class=\"comment\">        double l = 1.0, r = a[n - 1] * 1.0 - a[0], mid;</span></div><div class=\"line\"><span class=\"comment\">        while(fabs(l - r) &gt; eps) &#123;</span></div><div class=\"line\"><span class=\"comment\">            mid = (l + r) / 2;</span></div><div class=\"line\"><span class=\"comment\">            if (check(mid)) l = mid;</span></div><div class=\"line\"><span class=\"comment\">            else r = mid;</span></div><div class=\"line\"><span class=\"comment\">        &#125;</span></div><div class=\"line\"><span class=\"comment\">        */</span></div><div class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">double</span> tmp = a[i] - a[i - <span class=\"number\">1</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (check(tmp)) ans = max(ans, tmp);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (check(tmp / <span class=\"number\">2</span>)) ans = max(ans, tmp / <span class=\"number\">2</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3f\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14208548  2015-07-27 22:17:31 Accepted    4932    15MS    1608K   1022B   G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["想法"]},{"title":"HDU 5312 Sequence（想法, 三角形数）","url":"http://yoursite.com/2015/07/27/BC1st-3 hdu 5312/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5312\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5312</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个数列，第n(n≥1)项是3n*(n-1)+1. 现在他想知道对于一个给定的整数m, 是否可以表示成若干项上述数列的和. 如果可以, 那么需要的最小项数是多少?<br>其中1≤m≤1e9</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><img src=\"http://siofive.qiniudn.com/hdu5312.png\" alt=\"\"><br>神奇：一个自然数最多只需要3个三角形数即可表示。<br>我一开始用mp处理，然后T了。。mp果然速度慢。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200000</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> t, m, cnt;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; ; i++) &#123;</div><div class=\"line\">        a[cnt++] = <span class=\"number\">3</span> * i * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[cnt - <span class=\"number\">1</span>] &gt; <span class=\"number\">1e9</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">if</span> (m % <span class=\"number\">6</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"6\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (m % <span class=\"number\">6</span> == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> id = lower_bound(a, a + cnt, m) - a;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[id] == m) <span class=\"built_in\">puts</span>(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"7\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (m % <span class=\"number\">6</span> == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"number\">2</span> * a[i] &lt;= m; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> id = lower_bound(a, a + cnt, m - a[i]) - a;</div><div class=\"line\">                <span class=\"keyword\">if</span> (a[id] == m - a[i]) &#123;</div><div class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">\"2\"</span>);</div><div class=\"line\">                    flag = <span class=\"literal\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!flag) <span class=\"built_in\">puts</span>(<span class=\"string\">\"8\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, m % <span class=\"number\">6</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14208127  2015-07-27 21:45:34 Accepted    5312    1014MS  1656K   1075 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["想法","三角形数"]},{"title":"HDU 5313 Bipartite Graph（二分图染色, dp, bitset）","url":"http://yoursite.com/2015/07/27/BC1st-4 hdu 5313/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5313\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5313</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一张图，有n个点，m条边，保证其连通的部分是二分图。问要使该图成为完全二分图，问最多能够加多少条边。<br>其中2≤n≤10000,0≤m≤100000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先，当点数固定时，两点之间越接近，完全二分图的边数越大。所以对每一个子图进行二分图染色，得到[ai, bi]的对。其中在X部有ai点，在Y部有bi点。把单一的点处理成[1, 0]。<br>用bitset<n>dp来表示状态，一开始dp[0] = 1，表示X部选了0个点是可行的。然后每次考虑pair对，转移方程为dp = (dp &lt;&lt; ai) | (dp &lt;&lt; aj)。即X部可以加上ai或者aj个点。最后选择差值最小的即可。</n></p>\n<p>我比赛的时候用set来处理，结果在BC的评测平台上T了。赛后HDU上过了。。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bitset&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">bool</span> has[maxn];</div><div class=\"line\"><span class=\"keyword\">int</span> in[maxn];</div><div class=\"line\"><span class=\"keyword\">int</span> od, ev, cc;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g[maxn];</div><div class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; gg[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!in[v]) &#123;</div><div class=\"line\">            in[v] = in[u] + <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (in[v] == <span class=\"number\">3</span>) in[v] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (in[v] == <span class=\"number\">2</span>) ev++;</div><div class=\"line\">            <span class=\"keyword\">else</span> od++;</div><div class=\"line\">            dfs(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; dp;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) g[i].clear(), has[i] = <span class=\"literal\">false</span>, in[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v ;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            g[u].pb(v), g[v].pb(u);</div><div class=\"line\">            has[u] = has[v] = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> cc = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = <span class=\"number\">1</span>; u &lt;= n; u++) <span class=\"keyword\">if</span> (!in[u] &amp;&amp; has[u]) &#123;</div><div class=\"line\">                od = <span class=\"number\">1</span>, ev = <span class=\"number\">0</span>;</div><div class=\"line\">                in[u] = <span class=\"number\">1</span>;</div><div class=\"line\">                dfs(u);</div><div class=\"line\">                gg[cc++] = &#123;od, ev&#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//bitset优化</span></div><div class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"keyword\">if</span> (!has[i]) gg[cc++] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cc; i++)</div><div class=\"line\">            dp = (dp &lt;&lt; gg[i].first) | (dp &lt;&lt; gg[i].second);</div><div class=\"line\">        <span class=\"keyword\">int</span> ans;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n/ <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dp[i]) &#123;</div><div class=\"line\">                ans = i;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans * (n - ans) - m);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14206240  2015-07-27 20:14:49 Accepted    5313    546MS   3280K   1767 B  C++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["dp","二分图染色","bitset"]},{"title":"HDU 5293 Tree chain problem（树dp，lca，树状数组）","url":"http://yoursite.com/2015/07/27/hdu 5293/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5293\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5293</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定n个点的树，其中m条链有权值。现在需要选择一些链，使得其和最大。并且任意两条链之间没有公共点。1 ≤ n, m ≤ 100000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>题解：<br><img src=\"http://siofive.qiniudn.com/hdu5293.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(linker, <span class=\"meta-string\">\"/STACK:1024000000,1024000000\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> t, n, m, cnt, lev;</div><div class=\"line\"><span class=\"keyword\">int</span> l[N], r[N], dep[N];</div><div class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">20</span>][N];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    l[u] = ++cnt;</div><div class=\"line\">    dep[u] = dep[fa] + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (fa != <span class=\"number\">0</span>) f[<span class=\"number\">0</span>][u] = fa;</div><div class=\"line\">    <span class=\"keyword\">else</span> f[<span class=\"number\">0</span>][u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        dfs(v, u);</div><div class=\"line\">    &#125;</div><div class=\"line\">    r[u] = ++cnt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">st</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; <span class=\"number\">1</span> &lt;&lt; j &lt; n; j++)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">            f[j][i] = f[j - <span class=\"number\">1</span>][f[j - <span class=\"number\">1</span>][i]];</div><div class=\"line\">    lev = j - <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dep[x] &lt; dep[y]) swap(x, y);</div><div class=\"line\">    <span class=\"keyword\">int</span> d = dep[x] - dep[y];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lev; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">        <span class=\"keyword\">if</span> (d &gt;&gt; i &amp; <span class=\"number\">1</span>)</div><div class=\"line\">            x = f[i][x];</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">return</span> x;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lev; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">        <span class=\"keyword\">if</span> (f[i][x] != f[i][y])</div><div class=\"line\">            x = f[i][x], y = f[i][y];</div><div class=\"line\">    <span class=\"keyword\">return</span> f[<span class=\"number\">0</span>][x];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> cs[N * <span class=\"number\">2</span>], cd[N * <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> sum[N], d[N];</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> u, v, lca, val;</div><div class=\"line\">&#125;p[N];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; e[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &amp; (-x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> va, <span class=\"keyword\">int</span> *c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(p &lt;= <span class=\"number\">2</span> * n) &#123;</div><div class=\"line\">        c[p] += va;</div><div class=\"line\">        p += lowbit(p);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getsum</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> *c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(p) &#123;</div><div class=\"line\">        res += c[p];</div><div class=\"line\">        p -= lowbit(p);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    sum[u] = d[u] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        solve(v, u);</div><div class=\"line\">        sum[u] += d[v];</div><div class=\"line\">    &#125;</div><div class=\"line\">    d[u] = sum[u];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; e[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = p[e[u][i]].u;</div><div class=\"line\">        <span class=\"keyword\">int</span> y = p[e[u][i]].v;</div><div class=\"line\">        <span class=\"keyword\">int</span> tmp = getsum(l[x], cs) + getsum(l[y], cs) - getsum(l[x], cd) - getsum(l[y], cd) + sum[u];</div><div class=\"line\">        d[u] = max(d[u], tmp + p[e[u][i]].val);</div><div class=\"line\">    &#125;</div><div class=\"line\">    add(l[u], d[u], cd);</div><div class=\"line\">    add(r[u], -d[u], cd);</div><div class=\"line\">    add(l[u], sum[u], cs);</div><div class=\"line\">    add(r[u], -sum[u], cs);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        cs[<span class=\"number\">0</span>] = cd[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * i - <span class=\"number\">1</span>;</div><div class=\"line\">            cs[j] = cs[j + <span class=\"number\">1</span>] = cd[j] = cd[j + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">            g[i].clear();</div><div class=\"line\">            e[i].clear();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            g[u].pb(v); g[v].pb(u);</div><div class=\"line\">        &#125;</div><div class=\"line\">        cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        dep[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        dfs(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        st();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;p[i].u, &amp;p[i].v, &amp;p[i].val);</div><div class=\"line\">            p[i].lca = lca(p[i].u, p[i].v);</div><div class=\"line\">            e[p[i].lca].pb(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        solve(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, d[<span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14199151  2015-07-27 15:26:38 Accepted    5293    1388MS  22824K  2513 B  C++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["树状数组","LCA","倍增法","树dp"]},{"title":"CF 313C Gerald and Giant Chess（组合数学+dp）","url":"http://yoursite.com/2015/07/25/CF313C/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/contest/559/problem/C\" target=\"_blank\" rel=\"external\">http://codeforces.com/contest/559/problem/C</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一张H*W的网格图，有N个坏点，求左上角走到右下角对10^9+7取模。<br>1 ≤ H , W ≤ 10^5， 1 ≤ n ≤ 2000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p><img src=\"http://siofive.qiniudn.com/CF313C.png\" alt=\"\"><br>来自：<a href=\"http://blog.csdn.net/popoqqq/article/details/46121519\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/popoqqq/article/details/46121519</a><br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"=====================\"</span>);</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">int</span> h, w, n;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">&#125;p[<span class=\"number\">2010</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node s, node v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s.x == v.x) <span class=\"keyword\">return</span> s.y &lt; v.y;</div><div class=\"line\">    <span class=\"keyword\">return</span> s.x &lt; v.x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200100</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> ll mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</div><div class=\"line\">ll inv[N], f[N], ff[N], dp[<span class=\"number\">2010</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    inv[<span class=\"number\">0</span>] = inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    f[<span class=\"number\">0</span>] = f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    ff[<span class=\"number\">0</span>] = ff[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        f[i] = f[i - <span class=\"number\">1</span>] * i % mod;</div><div class=\"line\">        inv[i] = inv[mod % i] * (mod - mod / i) % mod;</div><div class=\"line\">        ff[i] = ff[i - <span class=\"number\">1</span>] * inv[i] % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (f[n] * ff[m] % mod) * ff[n - m] % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;h&gt;&gt;w&gt;&gt;n;</div><div class=\"line\">    init(h + w);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;p[i].x, &amp;p[i].y);</div><div class=\"line\">        p[i].x--, p[i].y--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    p[n].x = h - <span class=\"number\">1</span>, p[n].y = w - <span class=\"number\">1</span>;</div><div class=\"line\">    sort(p, p + n + <span class=\"number\">1</span>, cmp);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        dp[i] = C(p[i].x + p[i].y, p[i].x);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p[j].y &gt; p[i].y) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            dp[i] = (dp[i] - C(p[i].x + p[i].y - p[j].x - p[j].y, p[i].x - p[j].x) * dp[j] % mod + mod) % mod;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//cout&lt;&lt;dp[i]&lt;&lt;endl;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[n]&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>12220472  2015-07-25 05:40:33 SIO__Five#  C - Gerald and Giant Chess  GNU C++ Accepted    139 ms  4700 KB</li>\n</ul>\n","categories":["ACM"],"tags":["dp","组合数学"]},{"title":"HDU 5296 Annoying problem（LCA+点到链的最短距离）","url":"http://yoursite.com/2015/07/22/hdu 5296/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5296\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5296</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定n个点的树，q个询问。维护一个集合s，有两种操作<br>1 u，表示选中树上的点u，加入集合<br>2 u，表示取消选中点u，从集合中删除<br>对于每个操作输出：<br>使得选中的点联通的边权和是多少。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>题解：<br><img src=\"http://siofive.qiniudn.com/hdu 5296.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100010</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> dep[N], dfn[N], rdfn[N], f[<span class=\"number\">17</span>][N], lev, dist[N];</div><div class=\"line\"><span class=\"keyword\">bool</span> in[N];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt; pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; g[N];</div><div class=\"line\"><span class=\"keyword\">int</span> T, n, q, cnt;</div><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    dfn[u] = ++cnt;</div><div class=\"line\">    rdfn[cnt] = u;</div><div class=\"line\">    dep[u] = dep[fa] + <span class=\"number\">1</span>;</div><div class=\"line\">    f[<span class=\"number\">0</span>][u] = fa;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = g[u][i].fi, w = g[u][i].se;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        dist[v] = dist[u] + w;</div><div class=\"line\">        dfs(v, u);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">st</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; <span class=\"number\">1</span> &lt;&lt; j &lt; n; j++)</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">            f[j][i] = f[j - <span class=\"number\">1</span>][f[j - <span class=\"number\">1</span>][i]];</div><div class=\"line\">    lev = j - <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dep[x] &lt; dep[y]) swap(x, y);</div><div class=\"line\">    <span class=\"keyword\">int</span> d = dep[x] - dep[y];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lev; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">        <span class=\"keyword\">if</span> (d &gt;&gt; i &amp; <span class=\"number\">1</span>)</div><div class=\"line\">            x = f[i][x];</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">return</span> x;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lev; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">        <span class=\"keyword\">if</span> (f[i][x] != f[i][y])</div><div class=\"line\">            x = f[i][x], y = f[i][y];</div><div class=\"line\">    <span class=\"keyword\">return</span> f[<span class=\"number\">0</span>][x];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; :: iterator it = s.lower_bound(dfn[u]), it1 = it;</div><div class=\"line\">    it1--;</div><div class=\"line\">    <span class=\"keyword\">if</span> (it == s.begin() || it == s.end()) &#123;</div><div class=\"line\">        it = s.begin();</div><div class=\"line\">        it1 = s.end();</div><div class=\"line\">        it1--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = *it, y = *it1;</div><div class=\"line\">    x = rdfn[x], y =rdfn[y];</div><div class=\"line\">    <span class=\"keyword\">return</span> dist[u] - dist[lca(x, u)] - dist[lca(y, u)] + dist[lca(x, y)];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cas = <span class=\"number\">1</span>; cas &lt;= T; cas++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) g[i].clear(), in[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;u, &amp;v, &amp;w);</div><div class=\"line\">            g[u].pb(&#123;v, w&#125;);</div><div class=\"line\">            g[v].pb(&#123;u, w&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d:\\n\"</span>, cas);</div><div class=\"line\">        cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        dfs(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        st();</div><div class=\"line\">        s.clear();</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(q--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;v, &amp;u);</div><div class=\"line\">            <span class=\"keyword\">if</span> (v == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!in[u]) &#123;</div><div class=\"line\">                    ans += add(u);</div><div class=\"line\">                    s.insert(dfn[u]);</div><div class=\"line\">                    in[u] = <span class=\"literal\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (in[u]) &#123;</div><div class=\"line\">                    s.erase(dfn[u]);</div><div class=\"line\">                    ans -= add(u);</div><div class=\"line\">                    in[u] = <span class=\"literal\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14120982    2015-07-22 22:49:10 Accepted    5296    2433MS  21724K  2510 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["LCA","倍增法","点到链的最短距离"]},{"title":"HDU 5289 Assignment（st表 单调队列）","url":"http://yoursite.com/2015/07/22/hdu 5289/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5289\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5289</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给你n个数和一个数k，求存在多少个区间，区间内最大值减最小值小于k<br>其中 n ≤ 100000; a[i], k ≤ 10^9</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>st表：<br>用st表来维护区间最小值最大值。维护一个队列，从左往右开始遍历，每次要将一个数放进队列时，判断是否符合条件，符合则加入，不符合则将队首的元素移出，直到符合位置。每次要移出元素时，答案加上当前队列个数。<br>也可以用二分+st表来实现的，对于每一个数，二分查找其最靠右的符合条件的数，但复杂度略高。</p>\n<p>单调队列：<br>维护两个单调队列，一个递增，一个递减。从左往右遍历，每次将数字加入两个队列队尾。然后判断队首的最大、最小值是否符合条件，符合则加入，不符合则将排在前面的数字移出队列，每次移出是更新答案。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>st表：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iomanip&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> inf 1000000000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-8</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> seed 131</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> T, n, k;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N];</div><div class=\"line\"><span class=\"keyword\">int</span> maxsum[<span class=\"number\">20</span>][N], minsum[<span class=\"number\">20</span>][N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rmq</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i != <span class=\"number\">20</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= num; j++)</div><div class=\"line\">        <span class=\"keyword\">if</span> (j + (<span class=\"number\">1</span> &lt;&lt; i) - <span class=\"number\">1</span> &lt;= num) &#123;</div><div class=\"line\">            maxsum[i][j] = max(maxsum[i - <span class=\"number\">1</span>][j], maxsum[i - <span class=\"number\">1</span>][j + (<span class=\"number\">1</span> &lt;&lt; i &gt;&gt; <span class=\"number\">1</span>)]);</div><div class=\"line\">            minsum[i][j] = min(minsum[i - <span class=\"number\">1</span>][j], minsum[i - <span class=\"number\">1</span>][j + (<span class=\"number\">1</span> &lt;&lt; i &gt;&gt; <span class=\"number\">1</span>)]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getmx</span><span class=\"params\">(<span class=\"keyword\">int</span> st, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> k = (<span class=\"keyword\">int</span>) log2(ed - st + <span class=\"number\">1.0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> mx = max(maxsum[k][st], maxsum[k][ed - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> mx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getmn</span><span class=\"params\">(<span class=\"keyword\">int</span> st, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> k = (<span class=\"keyword\">int</span>) log2(ed - st + <span class=\"number\">1.0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> mn = min(minsum[k][st], minsum[k][ed - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> mn;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> mx, mn;</div><div class=\"line\">ll ans;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &gt; r) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    mx = getmx(l, r), mn = getmn(l, r);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(x - mx) &lt; k &amp;&amp; <span class=\"built_in\">abs</span>(x - mn) &lt; k) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;T;</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;k);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">            minsum[<span class=\"number\">0</span>][i] = maxsum[<span class=\"number\">0</span>][i] = a[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        rmq(n);</div><div class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(!q.empty()) q.pop();</div><div class=\"line\">        q.push(a[<span class=\"number\">1</span>]);</div><div class=\"line\">        ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (check(l, r, a[i])) &#123;</div><div class=\"line\">                q.push(a[i]);</div><div class=\"line\">                r++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">while</span>(!q.empty()) &#123;</div><div class=\"line\">                    ans += q.size();</div><div class=\"line\">                    q.pop();</div><div class=\"line\">                    l++;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (check(l, r, a[i])) <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                q.push(a[i]);</div><div class=\"line\">                r++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ll tmp = q.size();</div><div class=\"line\">        ans += tmp * (tmp + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>单调队列：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"built_in\">deque</span>&lt; pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; q1, q2;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100010</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, k, T, a[N];</div><div class=\"line\">ll ans;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;k);</div><div class=\"line\">        <span class=\"keyword\">while</span>(!q1.empty()) q1.pop_back();</div><div class=\"line\">        <span class=\"keyword\">while</span>(!q2.empty()) q2.pop_back();</div><div class=\"line\">        ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> head = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">            <span class=\"keyword\">while</span>(!q1.empty()) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (q1.back().first &lt; a[i]) q1.pop_back();</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            q1.push_back(&#123;a[i], i&#125;);</div><div class=\"line\">            <span class=\"keyword\">while</span>(!q2.empty()) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (q2.back().first &gt; a[i]) q2.pop_back();</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            q2.push_back(&#123;a[i], i&#125;);</div><div class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (q1.front().first - q2.front().first &lt; k) <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (q1.front().second &lt; q2.front().second) &#123;</div><div class=\"line\">                        head = q1.front().second + <span class=\"number\">1</span>;</div><div class=\"line\">                        q1.pop_front();</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        head = q2.front().second + <span class=\"number\">1</span>;</div><div class=\"line\">                        q2.pop_front();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            ans += i - head + <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14110637  2015-07-22 15:29:58 Accepted    5289    374MS   12444K  2211 B  G++ SIO__Five st表</li>\n<li>14113375  2015-07-22 16:33:02 Accepted    5289    468MS   1940K   1105 B  G++ SIO__Five 单调队列</li>\n</ul>\n","categories":["ACM"],"tags":["想法","单调队列","st表"]},{"title":"HDU 5288 OO’s Sequence（数学）","url":"http://yoursite.com/2015/07/22/hdu 5288/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5288\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5288</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>在闭区间[l,r]内有一个数a[i]，a[i]不能整除除去自身以外的其他的数，f(l,r)表示在这区间内a[i]这样的数的个数，，现给你n个数，求所有区间的f(l,r)的和。<br>其中 n ≤ 100000; a[i] ≤ 10000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>对于一个数a[i]，找到两端离他最近的因子l[i], r[i]，那么它能够贡献的答案就是(r[i] - i) * (i - l[i])。枚举每一个数的因子，然后用该数更行l，r数组。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N], l[N], r[N], n, p[<span class=\"number\">10010</span>];</div><div class=\"line\">ll ans;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">        <span class=\"built_in\">memset</span>(p, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(p));</div><div class=\"line\">        ans = <span class=\"number\">0</span>;</div><div class=\"line\">        p[a[<span class=\"number\">0</span>]] = <span class=\"number\">0</span>, l[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> q = <span class=\"built_in\">sqrt</span>(a[i] + <span class=\"number\">0.5</span>);</div><div class=\"line\">            l[i] = <span class=\"number\">-1</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= q; j++) <span class=\"keyword\">if</span> (a[i] % j == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                l[i] = max(l[i], p[a[i] / j]);</div><div class=\"line\">                l[i] = max(l[i], p[j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (l[i] == <span class=\"number\">-1</span>) l[i] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> l[i]++;</div><div class=\"line\">            p[a[i]] = i;</div><div class=\"line\">            <span class=\"comment\">//cout&lt;&lt;l[i]&lt;&lt;endl;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(p, INF, <span class=\"keyword\">sizeof</span>(p));</div><div class=\"line\">        p[a[n - <span class=\"number\">1</span>]] = n - <span class=\"number\">1</span>, r[n - <span class=\"number\">1</span>] = n - <span class=\"number\">1</span>;</div><div class=\"line\">        ans = (n - <span class=\"number\">1</span> - l[n - <span class=\"number\">1</span>] + <span class=\"number\">1</span>) * (r[n - <span class=\"number\">1</span>] - (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"comment\">//cout&lt;&lt;ans&lt;&lt;endl;</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> q = <span class=\"built_in\">sqrt</span>(a[i] + <span class=\"number\">0.5</span>);</div><div class=\"line\">            r[i] = INF;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= q; j++) <span class=\"keyword\">if</span> (a[i] % j == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                r[i] = min(r[i], p[a[i] / j]);</div><div class=\"line\">                r[i] = min(r[i], p[j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (r[i] == INF) r[i] = n - <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> r[i]--;</div><div class=\"line\">            p[a[i]] = i;</div><div class=\"line\">            <span class=\"comment\">//cout&lt;&lt;r[i]&lt;&lt;endl;</span></div><div class=\"line\">            ans =(ans + (ll)(i - l[i] + <span class=\"number\">1</span>) * (r[i] - i + <span class=\"number\">1</span>)) % mod;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14110337  2015-07-22 15:23:36 Accepted    5288    967MS   2788K   1324 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["想法"]},{"title":"HDU 5294 Tricks Device（网络流 最短路）","url":"http://yoursite.com/2015/07/22/hdu 5294/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5294\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5294</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一张图，其中n个点，m条双向边，边有权值。所以从起点1走到终点n有一个最短时间。问：<br>（1）最少去掉多少条边，使得从起点到终点的时间大于最短时间（走不到也算）<br>（2）最多去掉多少条边，使得从起点到终点的时间仍然为最短时间。<br>其中 n ≤ 2000; m ≤ 60000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>spfa时找到最少边数的最短路，总边数减去最少变数即为第二问答案。<br>第一问中，根据在最短路的边构造边流量为1的新图，对新图求最大流即为第一问答案。</p>\n<p>比赛的时候思路非常清晰，但是看到n和m这么大，感觉网络流肯定T，然后就没有敲。。。实际上新图的规模很小</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2010</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">60010</span>;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt; pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; G[N];</div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2010</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">60010</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> v;    <span class=\"comment\">// vertex</span></div><div class=\"line\">    <span class=\"keyword\">int</span> cap;    <span class=\"comment\">// capacity</span></div><div class=\"line\">    <span class=\"keyword\">int</span> flow;   <span class=\"comment\">// current flow in this arc</span></div><div class=\"line\">    <span class=\"keyword\">int</span> nxt;</div><div class=\"line\">&#125; e[maxm * <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> g[maxn], cnt;</div><div class=\"line\"><span class=\"keyword\">int</span> st, ed;</div><div class=\"line\"><span class=\"keyword\">int</span> dd[maxn], cc[maxn];</div><div class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; Q;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> st, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</div><div class=\"line\">    dd[st] = cc[st] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">bool</span> in[maxn] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty()) Q.pop();</div><div class=\"line\">    in[st] = <span class=\"literal\">true</span>;</div><div class=\"line\">    Q.push(st);</div><div class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty()) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = Q.front(); Q.pop();</div><div class=\"line\">        in[u] = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[u].size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = G[u][i].first, c = G[u][i].second;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dd[u] + c == dd[v]) cc[v] = min(cc[v], cc[u] + <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (dd[u] + c &lt; dd[v]) &#123;</div><div class=\"line\">                cc[v] = cc[u] + <span class=\"number\">1</span>;</div><div class=\"line\">                dd[v] = dd[u] + c;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!in[v]) Q.push(v), in[v] = <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c)</span> </span>&#123;</div><div class=\"line\">    e[++cnt].v = v;</div><div class=\"line\">    e[cnt].cap = c;</div><div class=\"line\">    e[cnt].flow = <span class=\"number\">0</span>;</div><div class=\"line\">    e[cnt].nxt = g[u];</div><div class=\"line\">    g[u] = cnt;</div><div class=\"line\"></div><div class=\"line\">    e[++cnt].v = u;</div><div class=\"line\">    e[cnt].cap = <span class=\"number\">0</span>;</div><div class=\"line\">    e[cnt].flow = <span class=\"number\">0</span>;</div><div class=\"line\">    e[cnt].nxt = g[v];</div><div class=\"line\">    g[v] = cnt;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(g, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(g));</div><div class=\"line\">    cnt = <span class=\"number\">1</span>;</div><div class=\"line\">    st = <span class=\"number\">1</span>, ed = n;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = <span class=\"number\">1</span>; u &lt;= n; u++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[u].size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dd[u] + G[u][i].second == dd[G[u][i].first]) add(u, G[u][i].first, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> dist[maxn], numbs[maxn], q[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rev_bfs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> font = <span class=\"number\">0</span>, rear = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123; <span class=\"comment\">//n为总点数</span></div><div class=\"line\">        dist[i] = maxn;</div><div class=\"line\">        numbs[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    q[font] = ed;</div><div class=\"line\">    dist[ed] = <span class=\"number\">0</span>;</div><div class=\"line\">    numbs[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(font != rear) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = q[font++];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = g[u]; i; i = e[i].nxt) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (e[i ^ <span class=\"number\">1</span>].cap == <span class=\"number\">0</span> || dist[e[i].v] &lt; maxn) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            dist[e[i].v] = dist[u] + <span class=\"number\">1</span>;</div><div class=\"line\">            ++numbs[dist[e[i].v]];</div><div class=\"line\">            q[rear++] = e[i].v;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxflow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    n += <span class=\"number\">3</span>;</div><div class=\"line\">    rev_bfs();</div><div class=\"line\">    <span class=\"keyword\">int</span> u, totalflow = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> curg[maxn], revpath[maxn];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; ++i) curg[i] = g[i];</div><div class=\"line\">    u = st;</div><div class=\"line\">    <span class=\"keyword\">while</span>(dist[st] &lt; n) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(u == ed) &#123;   <span class=\"comment\">// find an augmenting path</span></div><div class=\"line\">            <span class=\"keyword\">int</span> augflow = INF;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st; i != ed; i = e[curg[i]].v)</div><div class=\"line\">                augflow = min(augflow, e[curg[i]].cap);</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st; i != ed; i = e[curg[i]].v) &#123;</div><div class=\"line\">                e[curg[i]].cap -= augflow;</div><div class=\"line\">                e[curg[i] ^ <span class=\"number\">1</span>].cap += augflow;</div><div class=\"line\">                e[curg[i]].flow += augflow;</div><div class=\"line\">                e[curg[i] ^ <span class=\"number\">1</span>].flow -= augflow;</div><div class=\"line\">            &#125;</div><div class=\"line\">            totalflow += augflow;</div><div class=\"line\">            u = st;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> i;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = curg[u]; i; i = e[i].nxt)</div><div class=\"line\">            <span class=\"keyword\">if</span>(e[i].cap &gt; <span class=\"number\">0</span> &amp;&amp; dist[u] == dist[e[i].v] + <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i) &#123;   <span class=\"comment\">// find an admissible arc, then Advance</span></div><div class=\"line\">            curg[u] = i;</div><div class=\"line\">            revpath[e[i].v] = i ^ <span class=\"number\">1</span>;</div><div class=\"line\">            u = e[i].v;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;    <span class=\"comment\">// no admissible arc, then relabel this vertex</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">0</span> == (--numbs[dist[u]])) <span class=\"keyword\">break</span>;    <span class=\"comment\">// GAP cut, Important!</span></div><div class=\"line\">            curg[u] = g[u];</div><div class=\"line\">            <span class=\"keyword\">int</span> mindist = n;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = g[u]; j; j = e[j].nxt)</div><div class=\"line\">                <span class=\"keyword\">if</span>(e[j].cap &gt; <span class=\"number\">0</span>) mindist = min(mindist, dist[e[j].v]);</div><div class=\"line\">            dist[u] = mindist + <span class=\"number\">1</span>;</div><div class=\"line\">            ++numbs[dist[u]];</div><div class=\"line\">            <span class=\"keyword\">if</span>(u != st)</div><div class=\"line\">                u = e[revpath[u]].v;    <span class=\"comment\">// Backtrack</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    n -= <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> totalflow;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            G[i].clear();</div><div class=\"line\">            dd[i] = cc[i] = INF;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, l;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;u, &amp;v, &amp;l);</div><div class=\"line\">            G[u].push_back(&#123;v, l&#125;);</div><div class=\"line\">            G[v].push_back(&#123;u, l&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        spfa(<span class=\"number\">1</span>, n);</div><div class=\"line\">        init();</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, maxflow(), m - cc[n]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14108329  2015-07-22 14:29:43 Accepted    5294    93MS    4992K   3960 B  C++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["最短路","网络流"]},{"title":"HDU 4909 String（组合数学）","url":"http://yoursite.com/2015/07/20/BC3-3 hdu 4909/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4909\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4909</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有长度为n的由小写字母组成字符串，其中可能有一个’?’或没有。求其非空子串（包括自身）的个数，且子串必须满足其中出现的字符的个数均为偶数。如果有’?’，则可以将其删去或者变为任意一个字母。其中 1 ≤ n ≤ 20000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>将每个字符表示为二进制中的一位，如果出现偶数个，则其异或后为0.<br>假如字符串不包含’?’，则求每一个前缀的异或值，如果两个前缀异或之后为0，这表示两者相差的字符串为符合条件的串。所以只需要对每种异或值求C(n, 2)并累加即可。<br>如果字符串包含’?’，那么有三种情况：</p>\n<ol>\n<li>子串在?之前</li>\n<li>子串在?之后</li>\n<li>子串包括?<br>对于前两种计算方式和不包含’?’的相同，第三种情况中，?可以有27种情况，变为26个字母或为空。枚举一下即可</li>\n</ol>\n<p>注意：<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">不能用ans += mp[<span class=\"keyword\">x</span>] 这种写法。虽然mp[<span class=\"keyword\">x</span>]为<span class=\"number\">0</span>时也正确，但是mp[<span class=\"keyword\">x</span>]每次都会把<span class=\"keyword\">x</span>加入到map中</div><div class=\"line\">应该用 if(mp.count(<span class=\"keyword\">x</span>)) ans += mp[<span class=\"keyword\">x</span>]<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp2;</div><div class=\"line\"><span class=\"keyword\">int</span> T, n;</div><div class=\"line\"><span class=\"keyword\">int</span> w[<span class=\"number\">30</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">20010</span>;</div><div class=\"line\"><span class=\"keyword\">char</span> s[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s);</div><div class=\"line\">        mp.clear();</div><div class=\"line\">        mp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        n = <span class=\"built_in\">strlen</span>(s);</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, i, cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'?'</span>) &#123;</div><div class=\"line\">                flag = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            x = x ^ (<span class=\"number\">1</span> &lt;&lt; (s[i] - <span class=\"string\">'a'</span>));</div><div class=\"line\">            mp[x]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; :: iterator it;</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (it = mp.begin(); it != mp.end(); it++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> t = (*it).second;</div><div class=\"line\">            <span class=\"comment\">//cout&lt;&lt;(*it).first&lt;&lt;\" \"&lt;&lt;(*it).second&lt;&lt;endl;</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (t &lt; <span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            ans += t * (t - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!flag) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        i++;</div><div class=\"line\">        <span class=\"keyword\">int</span> xx = <span class=\"number\">0</span>;</div><div class=\"line\">        mp2.clear();</div><div class=\"line\">        mp2[<span class=\"number\">0</span>]++;</div><div class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; n; i++) &#123;</div><div class=\"line\">            xx = xx ^ (<span class=\"number\">1</span> &lt;&lt; (s[i] - <span class=\"string\">'a'</span>));</div><div class=\"line\">            mp2[xx]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//puts(\"-------------\");</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (it = mp2.begin(); it != mp2.end(); it++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> t = (*it).second;</div><div class=\"line\">            <span class=\"comment\">//cout&lt;&lt;(*it).first&lt;&lt;\" \"&lt;&lt;(*it).second&lt;&lt;endl;</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (t &lt; <span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            ans += t * (t - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">27</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (it = mp.begin(); it != mp.end(); it++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> tmp = x ^ (<span class=\"number\">1</span> &lt;&lt; i);</div><div class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">26</span>) tmp = x;</div><div class=\"line\">                <span class=\"comment\">//cout&lt;&lt;(*it).first&lt;&lt;\" \"&lt;&lt;(*it).second&lt;&lt;\" \"&lt;&lt;mp2[tmp ^ (*it).first]&lt;&lt;endl;</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mp2.count(tmp ^ (*it).first))</div><div class=\"line\">                    ans += (*it).second * (mp2[tmp ^ (*it).first]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14079251  2015-07-20 19:50:08 Accepted    4909    1216MS  3132K   1948 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["组合数学","map","异或"]},{"title":"HDU 4908 BestCoder Sequence（数学）","url":"http://yoursite.com/2015/07/20/BC3-2 hdu 4908/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4908\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4908</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有n个数的序列，求其连续的、且中位数为M的、长度为奇数的子序列个数。其中 1 ≤ n ≤ 40000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>只需要将大于M的数标记为+1，小于M的为-1，M为0。然后从M左边开始长度为奇数（偶数）的子序列与M右边开始长度为奇数（偶数）的子序列的和为0，组成的序列便是一个答案。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, a[<span class=\"number\">40010</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> odd[<span class=\"number\">40010</span> * <span class=\"number\">2</span>], even[<span class=\"number\">40010</span> * <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[i] == m) x = i, a[i] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i] &gt; m) a[i] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> a[i] = <span class=\"number\">-1</span>;</div><div class=\"line\">            odd[i] = odd[i + n] = <span class=\"number\">0</span>;</div><div class=\"line\">            even[i] = even[i + n] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x + <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            a[i] = a[i - <span class=\"number\">1</span>] + a[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> ((i - x) % <span class=\"number\">2</span> == <span class=\"number\">1</span>) odd[a[i] + n]++;</div><div class=\"line\">            <span class=\"keyword\">else</span> even[a[i] + n]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ans += even[n];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            a[i] = a[i + <span class=\"number\">1</span>] + a[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> ((x - i) % <span class=\"number\">2</span> == <span class=\"number\">1</span>) ans += odd[n - a[i]];</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                ans += even[n - a[i]];</div><div class=\"line\">                <span class=\"keyword\">if</span> (a[i] == <span class=\"number\">0</span>) ans++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14073501  2015-07-20 15:18:25 Accepted    4908    171MS   2344K   855 B   G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["数学","想法"]},{"title":"HDU 4885 TIANKENG’s travel（三点共线 最短路）","url":"http://yoursite.com/2015/07/20/BC2-3 hdu 4885/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4885\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4885</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给你一个起点，一个终点和n个加油站。只能走直线，只能到达这三种点，经过加油站必须加油，一次加油可以走L的距离，问最少经过加油站几次可以从起点到达终点。1 ≤ n ≤ 1000</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>只需要把距离小于等于L的两个点连一条边，然后跑最短路即可。<br>需要注意的是，有可能出现三点共线，此时从这三点的一端到另一端，要经过三个点。所以必须要处理三点共线的情况。<br>方法是：<br>将所有的点按照x从小到大排序，然后对于每个点，维护一个set。对于第i个点，只需要判断它后面的点与其构成线段的斜率是否已经存在，已存在则不加入。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi pair<span class=\"meta-string\">&lt;int, int&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x, y, id;</div><div class=\"line\">&#125;p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node s, node v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s.x &lt; v.x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> T, n, l;</div><div class=\"line\"><span class=\"keyword\">int</span> head[N], nxt[N * N], pre[N * N], e;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (n + <span class=\"number\">5</span>));</div><div class=\"line\">    e = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    pre[e] = v, nxt[e] = head[u], head[u] = e++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dis</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> L = <span class=\"built_in\">sqrt</span>(x * x + y * y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> dist[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (n + <span class=\"number\">5</span>));</div><div class=\"line\">    dist[s] = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//    priority_queue&lt; pair&lt;int, int&gt; &gt; q;</span></div><div class=\"line\"><span class=\"comment\">//    q.push(&#123;0, s&#125;);</span></div><div class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\">    q.push(s);</div><div class=\"line\">    <span class=\"keyword\">while</span>(!q.empty()) &#123;</div><div class=\"line\"><span class=\"comment\">//        int u = q.top().first; q.pop();</span></div><div class=\"line\"><span class=\"comment\">//        if (u == e) return dist[e];</span></div><div class=\"line\">        <span class=\"keyword\">int</span> u = q.front(); q.pop();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; i != <span class=\"number\">-1</span>; i = nxt[i]) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = pre[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> (dist[u] + <span class=\"number\">1</span> &lt; dist[v]) &#123;</div><div class=\"line\">                dist[v] = dist[u] + <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"comment\">//q.push(&#123;dist[v], v&#125;);</span></div><div class=\"line\">                q.push(v);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> dist[e];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;l);</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;p[<span class=\"number\">0</span>].x, &amp;p[<span class=\"number\">0</span>].y);</div><div class=\"line\">        p[<span class=\"number\">0</span>].id = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;p[n + <span class=\"number\">1</span>].x, &amp;p[n + <span class=\"number\">1</span>].y);</div><div class=\"line\">        p[n + <span class=\"number\">1</span>].id = n + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;p[i].x, &amp;p[i].y);</div><div class=\"line\">            p[i].id = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(p, p + n + <span class=\"number\">2</span>, cmp);</div><div class=\"line\">        init();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">set</span>&lt; pi &gt; s;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n + <span class=\"number\">1</span>; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> dx = p[j].x - p[i].x, dy = p[j].y - p[i].y;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!dis(dx, dy)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> gcd = <span class=\"built_in\">abs</span>(__gcd(dx, dy));</div><div class=\"line\">                pi tmp = make_pair(dx / gcd, dy / gcd);</div><div class=\"line\">                <span class=\"keyword\">if</span> (s.count(tmp)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">                add(i, j);</div><div class=\"line\">                add(j, i);</div><div class=\"line\">                s.insert(tmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> s, e;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p[i].id == <span class=\"number\">0</span>) s = i;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p[i].id == n + <span class=\"number\">1</span>) e = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = bfs(s, e);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ans == INF) <span class=\"built_in\">puts</span>(<span class=\"string\">\"impossible\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans - <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14070053  2015-07-20 11:56:32 Accepted    4885    93MS    1716K   2073 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["计算几何","最短路"]},{"title":"HDU 4886 TIANKENG’s restaurant(Ⅱ)","url":"http://yoursite.com/2015/07/19/BC2-4 hdu 4886 TIANKENG’s restaurant(Ⅱ)/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4886\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4886</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个字符串S。只有ABCDEFGH这八个字符组成。现在需要找一个最小的由这八个字符组成的子串T，使其不是S的子串。<br>数据范围：1 ≤ n ≤ 1000000 其中n为S的长度</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>假设结果长度为L，那么当8^L &gt;= Length(S)时必有结果，所以可以确定L的最大值。暴力枚举长度为1，长度为2…长度为L。在枚举过程中，先对S中所有枚举长度的子串求hash值，然后再搜索对应长度的所有子串，O(1)判断即可。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> T, n, len, a[<span class=\"number\">100</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">char</span> s[N];</div><div class=\"line\"><span class=\"keyword\">bool</span> ha[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//cout&lt;&lt;k&lt;&lt;\" \"&lt;&lt;x&lt;&lt;endl;</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (k == len) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!ha[x]) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</div><div class=\"line\">        a[k] = i;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dfs(k + <span class=\"number\">1</span>, x * <span class=\"number\">8</span> + i)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s);</div><div class=\"line\">        n = <span class=\"built_in\">strlen</span>(s);</div><div class=\"line\">        <span class=\"keyword\">for</span> (len = <span class=\"number\">1</span>; ; len++) &#123;</div><div class=\"line\">            <span class=\"built_in\">memset</span>(ha, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ha));</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i + len - <span class=\"number\">1</span> &lt; n; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len; j++)</div><div class=\"line\">                    x *= <span class=\"number\">8</span>, x += s[i + j] - <span class=\"string\">'A'</span>;</div><div class=\"line\">                ha[x] = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"comment\">//cout&lt;&lt;x&lt;&lt;endl;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, <span class=\"string\">'A'</span> + a[i]);</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14049001  2015-07-18 12:23:03 Accepted    4886    1466MS  3536K   1092 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["枚举","哈希"]},{"title":"HDU 4884 TIANKENG's rice shop（模拟）","url":"http://yoursite.com/2015/07/19/BC2-2 hdu 4884 TIANKENG’s rice shop/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4884\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4884</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一家餐厅，有n种炒饭，每次炒一次饭需要t时间，其中炒一次饭有k碗。有m个人来到在某一个时间来到餐厅，他点了num碗第id种的炒饭。问每一个客人最早离开餐厅的时间。<br>在炒饭过程中，保证先来先服务。但是每次炒会炒尽可能多的份数，不过不会有多余的。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>这道模拟题特别恶心。。<br>举个例子，比如每次可以炒5份，每次5分钟。<br>第一个顾客08:00进来，点了2份A，<br>第二个顾客08:04进来，点了3份A。<br>在08:00开始炒的话，由于这个时候第二个顾客还没进来，所以就只炒2份，第一个顾客在08:05离开，这时才炒第二个的3份，所以第二个离开时间是08:10。</p>\n<p>同样是每次可以炒5份，每次5分钟。<br>第一个顾客08:00进来，点了6份A，<br>第二个顾客08:01进来，点了5份B，<br>第三个顾客08:02进来，点了4份A。<br>同样地，先炒5份给第一个，还差一份，这是已经是08:05了，第三个顾客也进来了，所以这时直接炒5份A（因为会尽可能多地炒），08：10第一个和第三个可以同时离开。接着才炒第二个的。</p>\n<p>我的做法时，每次服务某个客人时，判断最多能够多炒几份饭，然后分给后来的客人。<br>这道题还有一个坑的地方是，客人最后离开的时间可能会超过24小时，需要取模。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> T, n, t, k, m;</div><div class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">1010</span>], id[<span class=\"number\">1010</span>], num[<span class=\"number\">1010</span>], out[<span class=\"number\">1010</span>], kind[<span class=\"number\">1010</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;n ,&amp;t, &amp;k, &amp;m);</div><div class=\"line\">        <span class=\"comment\">//memset(kind, 0, sizeof(kind));</span></div><div class=\"line\">        <span class=\"keyword\">int</span> x, y, now = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d:%d%d%d\"</span>, &amp;x, &amp;y, &amp;id[i], &amp;num[i]);</div><div class=\"line\">            a[i] = x * <span class=\"number\">60</span> + y;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!i) now = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> now = max(now, a[i - <span class=\"number\">1</span>]);</div><div class=\"line\">            <span class=\"comment\">//cout&lt;&lt;num[i]&lt;&lt;endl;</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!num[i]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            now = out[i] = max(now, a[i]) + (num[i] + k - <span class=\"number\">1</span>) / k * t;</div><div class=\"line\">            <span class=\"keyword\">int</span> tmp = k - num[i] % k;</div><div class=\"line\">            <span class=\"keyword\">if</span> (tmp == k) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; m; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (a[j] &gt; out[i] - t) <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (id[j] == id[i]) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (num[j] &lt;= tmp) &#123;</div><div class=\"line\">                        tmp -= num[j];</div><div class=\"line\">                        num[j] = <span class=\"number\">0</span>;</div><div class=\"line\">                        out[j] = max(out[i], a[j]);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        num[j] -= tmp;</div><div class=\"line\">                        tmp = <span class=\"number\">0</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//cout&lt;&lt;j&lt;&lt;\"-------------\"&lt;&lt;tmp&lt;&lt;endl;</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (!tmp) <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%02d:%02d\\n\"</span>, (out[i] % <span class=\"number\">1440</span>) / <span class=\"number\">60</span>, (out[i] % <span class=\"number\">1440</span>) % <span class=\"number\">60</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (T) <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14055192  2015-07-18 21:42:51 Accepted    4884    93MS    1608K   1565 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["模拟"]},{"title":"HDU 4883 TIANKENG's restaurant","url":"http://yoursite.com/2015/07/19/BC2-1 hdu 4883 TIANKENG’s restaurant/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4883\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4883</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一家餐厅，有n组人，每组包括Xi个人，在某一个时间段来到餐厅。问餐厅最少需要多少张凳子可以让每一个时刻所有在餐厅的人都有位子。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>把到达的和离开的时间按照从小到大排序，遇到到达时加上来的人数，遇到离开时减去离开的人数，遍历求出最大值即可。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">10000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, t;</div><div class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; a[N + N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">int</span> c, x, xx, y, yy, cnt;</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d:%d%d:%d\"</span>, &amp;c, &amp;x, &amp;xx, &amp;y, &amp;yy);</div><div class=\"line\">            a[cnt++] = make_pair(x * <span class=\"number\">60</span> + xx, c);</div><div class=\"line\">            a[cnt++] = make_pair(y * <span class=\"number\">60</span> + yy, -c);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(a, a + cnt);</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++) &#123;</div><div class=\"line\">            sum += a[i].second;</div><div class=\"line\">            ans = max(ans, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14040955  2015-07-17 16:01:31 Accepted    4883    577MS   1748K   643 B   G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["想法"]},{"title":"HDU 4858 项目管理（分块）","url":"http://yoursite.com/2015/07/19/BC1-2 hdu 4858 项目管理(分块)/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4858\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4858</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个项目有n个点，项目是连通的。有m条边，可能有重边，但没有自环。<br>接下来有Q次询问，每次询问分两种操作，操作符为0，表示给某一个点加上一个值。操作符为1，询问某一个点相邻项目值之和（如果多条边就算多次）<br>数据范围：1 ≤ n ≤ 100000，1 ≤ m ≤ n + 10</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>我只想到了暴力的方法，刚好可以水过。。<br>正确的姿势是采用分块的思想，由于这个图比较稀疏，总度数为2<em>m，又由于整个图是连通的，所以每个点的度数至少为1。这是还剩下2</em>m-n个度数可以分配，故度数大于sqrt(n)的点的个数和sqrt(n)比较接近。<br>因此我们将点分为两类，度数大于sqrt(n)的点为重点，度数小于sqrt(n)的点为轻点。每个重点维护与其相邻的所有轻点值之和。</p>\n<ol>\n<li>每次修改轻点时，更新自己的值，并且更新与其相邻的所有重点相邻轻点和。复杂度为O(sqrt(n))</li>\n<li>每次修改重点时，只更新自己的值。复杂度为O(1)</li>\n<li>每次询问轻点时，只需要把与轻点的邻居相加。复杂度为O(sqrt(n))</li>\n<li>每次询问重点时，只需要把与其相连的重点的值相加，再加上维护的其相邻轻点的和即可。复杂度为O(sqrt(n))</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, T;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g[N], gb[N];</div><div class=\"line\"><span class=\"keyword\">int</span> d[N], sum[N], w[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            g[i].clear(), gb[i].clear();</div><div class=\"line\">            d[i] = sum[i] = w[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            g[u].pb(v); g[v].pb(u);</div><div class=\"line\">            d[u]++, d[v]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> sq = <span class=\"built_in\">sqrt</span>(n) + <span class=\"number\">1.0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; g[i].size(); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> r = g[i][j];</div><div class=\"line\">                <span class=\"keyword\">if</span> (d[r] &gt; sq) gb[i].pb(r);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> Q, op;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;Q);</div><div class=\"line\">        <span class=\"keyword\">while</span>(Q--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;op);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!op) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">                w[u] += v;</div><div class=\"line\">                <span class=\"keyword\">if</span> (d[u] &lt;= sq) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; gb[u].size(); j++) sum[gb[u][j]] += v;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;u);</div><div class=\"line\">                <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (d[u] &lt;= sq) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; g[u].size(); j++) ans += w[g[u][j]];</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    ans += sum[u];</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; gb[u].size(); j++) ans += w[gb[u][j]];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>13943476  2015-07-02 16:54:16 Accepted    4858    514MS   12008K  1646 B  G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["分块"]},{"title":"HDU 4857 逃生（拓扑排序 逆向思考）","url":"http://yoursite.com/2015/07/19/BC1-1 hdu 4857 逃生(拓扑排序 逆向思考)/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4857\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4857</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>现在有n个人，从1标号到n。要把他们排成一排。同时有m个约束条件，每个都形如：a必须在b之前。此外这些人中1号最富，2号第二富，以此类推。在排顺序时，尽量让越有钱的人越靠前。即先让1尽量靠前，再让2尽量靠前，以此类推。求出这个序列。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先肯定想到拓扑排序。但是按照正常的拓扑排序之后得到的是字典序最小的序列。无法保证让越富有的人越靠前的情况。<br>举个例子：有4个人，2个限制：1在4之前，4在2之前。<br>按照正常的拓扑排序得到：1 3 4 2<br>但是符合要求的序列则为：1 4 2 3<br>所以正确的想法是：建边时逆向建边，然后每次选取最大的数排在前面，这样子便可以保证小数（富有的人）尽可能的排在后面。然后逆序输出序列即可。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">30000</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> node &amp;T) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x &lt; T.x;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g[N];</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, du[N], out[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;t;</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        priority_queue&lt;node&gt; q;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) g[i].clear(), du[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</div><div class=\"line\">            g[v].push_back(u);</div><div class=\"line\">            du[u]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"keyword\">if</span> (!du[i]) q.push(&#123;i&#125;);</div><div class=\"line\">        <span class=\"keyword\">int</span> ct = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(!q.empty()) &#123;</div><div class=\"line\">            u = q.top().x;</div><div class=\"line\">            q.pop();</div><div class=\"line\">            out[ct++] = u;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class=\"line\">                v = g[u][i];</div><div class=\"line\">                du[v]--;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!du[v]) q.push(&#123;v&#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, out[i], i == <span class=\"number\">0</span> ? <span class=\"string\">'\\n'</span> : <span class=\"string\">' '</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>14037388  2015-07-17 11:07:34 Accepted    4857    436MS   4616K   937 B   G++ SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["拓扑排序","逆向思考"]},{"title":"CF练习赛4","url":"http://yoursite.com/2014/11/12/拉练4/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><ul>\n<li>Problem A [CodeForces 9A] Die Roll</li>\n<li>Problem B [CodeForces 8A] Train and Peter</li>\n<li>Problem C [CodeForces 7A] Kalevitch and Chess</li>\n<li>Problem D [CodeForces 7C] Line (扩展欧几里得)</li>\n<li>Problem E [CodeForces 8C] Looking for Order (bitmasks, dp)</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Problem-A-Die-Roll\"><a href=\"#Problem-A-Die-Roll\" class=\"headerlink\" title=\"Problem A Die Roll\"></a>Problem A Die Roll</h2><p>给定三个骰子，已知前两个的数字，问有多大的概率使得第三个骰子的值不小于前两个的最大值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;x&gt;&gt;y;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &gt; y) swap(x, y);</div><div class=\"line\">    x = <span class=\"number\">6</span> - y + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> g = __gcd(x, <span class=\"number\">6</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"0/1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;x / g&lt;&lt;<span class=\"string\">\"/\"</span>&lt;&lt;<span class=\"number\">6</span> / g&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Problem-B-Train-and-Peter\"><a href=\"#Problem-B-Train-and-Peter\" class=\"headerlink\" title=\"Problem B Train and Peter\"></a>Problem B Train and Peter</h2><p>给定三个字符串A，B，C。问B和C是否按照顺序出现在A中（B和C分别为A的子串，且不重复）<br>如果只有从左到右可以，输出forward<br>如果只有从右到左可以，输出backward<br>如果都可以，输出both<br>否则输出fantasy</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">char</span> <span class=\"built_in\">str</span>[N];</div><div class=\"line\"><span class=\"built_in\">char</span> a[<span class=\"number\">111</span>], b[<span class=\"number\">111</span>];</div><div class=\"line\"><span class=\"built_in\">int</span> n, la, lb;</div><div class=\"line\"><span class=\"built_in\">int</span> <span class=\"built_in\">get</span>(<span class=\"built_in\">char</span> a[], <span class=\"built_in\">char</span> b[], <span class=\"built_in\">char</span> <span class=\"built_in\">str</span>[]) &#123;</div><div class=\"line\">    <span class=\"built_in\">char</span> *t = strstr(<span class=\"built_in\">str</span>, a);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!t) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (strstr(t + la, b)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">int</span> main () &#123;</div><div class=\"line\">    scanf(<span class=\"string\">\"%s%s%s\"</span>, <span class=\"built_in\">str</span>, a, b);</div><div class=\"line\">    n = strlen(<span class=\"built_in\">str</span>);</div><div class=\"line\">    la = strlen(a); lb = strlen(b);</div><div class=\"line\">    <span class=\"built_in\">int</span> x = <span class=\"built_in\">get</span>(a, b, <span class=\"built_in\">str</span>);</div><div class=\"line\">    <span class=\"built_in\">reverse</span>(<span class=\"built_in\">str</span>, <span class=\"built_in\">str</span> + n);</div><div class=\"line\">    <span class=\"built_in\">int</span> y = <span class=\"built_in\">get</span>(a, b, <span class=\"built_in\">str</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span> &amp;&amp; y == <span class=\"number\">1</span>) puts(<span class=\"string\">\"both\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span> &amp;&amp; y == <span class=\"number\">-1</span>) puts(<span class=\"string\">\"forward\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == <span class=\"number\">-1</span> &amp;&amp; y == <span class=\"number\">1</span>) puts(<span class=\"string\">\"backward\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> puts(<span class=\"string\">\"fantasy\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Problem-C-Kalevitch-and-Chess\"><a href=\"#Problem-C-Kalevitch-and-Chess\" class=\"headerlink\" title=\"Problem C Kalevitch and Chess\"></a>Problem C Kalevitch and Chess</h2><p>给定一张8X8的地图，一开始全是白色，每次可以选择一行或一列将其全部染为黑色。现给定一个最终状态的地图，问最少需要染色多少次。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">int mp[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">int b[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">int main () &#123;</div><div class=\"line\">    int tot = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">16</span>;</div><div class=\"line\">    int mn = <span class=\"number\">100</span>;</div><div class=\"line\">    char ch;</div><div class=\"line\">    rep(i, <span class=\"number\">0</span>, <span class=\"number\">8</span>) &#123;</div><div class=\"line\">        rep(j, <span class=\"number\">0</span>, <span class=\"number\">8</span>) &#123;</div><div class=\"line\">            cin&gt;&gt;ch;</div><div class=\"line\">            if (ch == 'B') mp[i][j] = <span class=\"number\">1</span>;</div><div class=\"line\">            else mp[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for (int i = <span class=\"number\">0</span>; i &lt; tot; i++) &#123;</div><div class=\"line\">        memset(b, <span class=\"number\">0</span>, sizeof(b));</div><div class=\"line\">        int t = <span class=\"number\">0</span>;</div><div class=\"line\">        for (int j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">16</span>; j++) if ((i &gt;&gt; j) &amp; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            t++;</div><div class=\"line\">            if (j &gt;= <span class=\"number\">8</span>) for (int l = <span class=\"number\">0</span>; l &lt; <span class=\"number\">8</span>; l++) b[l][j - <span class=\"number\">8</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">            else rep(l, <span class=\"number\">0</span>, <span class=\"number\">8</span>) b[j][l] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (t &lt; mn) &#123;</div><div class=\"line\">            bool ok = <span class=\"number\">1</span>;</div><div class=\"line\">            rep(l, <span class=\"number\">0</span>, <span class=\"number\">8</span>) rep(q, <span class=\"number\">0</span>, <span class=\"number\">8</span>) if (mp[l][q] != b[l][q]) &#123;</div><div class=\"line\">                ok = <span class=\"number\">0</span>;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (ok) mn = t;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    cout&lt;&lt;mn&lt;&lt;endl;</div><div class=\"line\">    return <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Problem-D-Line-扩展欧几里得\"><a href=\"#Problem-D-Line-扩展欧几里得\" class=\"headerlink\" title=\"Problem D Line (扩展欧几里得)\"></a>Problem D Line (扩展欧几里得)</h2><p>给定一条直线：$Ax+By+C=0$。请在$[-5{\\cdot}10^{18},5{\\cdot}10^{18}]$的范围内找到任意一个在该直线上的整点，否则输出-1<br>数据范围：$-2{\\cdot}10^9{\\leq}A,B,C{\\leq}2{\\cdot}10^9$</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>扩展欧几里得，如果C % gcd(A, B) != 0，无整数点，否则有解。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">ll x, y;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">extend_gcd</span><span class=\"params\">(ll a, ll b, ll &amp;x, ll &amp;y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ll r = extend_gcd(b, a % b, y, x);</div><div class=\"line\">        y -= x * (a / b);</div><div class=\"line\">        <span class=\"keyword\">return</span> r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ll A, B, C;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;C;</div><div class=\"line\">    <span class=\"keyword\">if</span> (A == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (C % B) <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;-C / B&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (B == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (C % A) <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;-C / A&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ll d = __gcd(A, B);</div><div class=\"line\">        <span class=\"keyword\">if</span> (C % d) <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            extend_gcd(A, B, x, y);</div><div class=\"line\">            ll tx = x * (-C / d), ty = y * (-C / d);</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;tx&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;ty&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Problem-E-Exposition-bitmasks-dp\"><a href=\"#Problem-E-Exposition-bitmasks-dp\" class=\"headerlink\" title=\"Problem E Exposition (bitmasks, dp)\"></a>Problem E Exposition (bitmasks, dp)</h2><p>给定起点，以及$n$个物品的位置。现在规定每次从起点出发，可以选择一个物品，并且将其带回起点；或者选择两个物品，先后走到两个物品处，将其带回起点。问将所有物品带回起点的最少时间，每段路程的时间为该路程值的平方。<br>数据范围：$1{\\leq}n{\\leq}24$<br><a href=\"http://siofive.github.io/2014/11/12/拉练4_E/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/12/拉练4_E/</a></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-12 AK</li>\n</ul>\n","categories":["ACM","Contest"],"tags":[]},{"title":"CF 8C Looking for Order (bitmasks, dp)","url":"http://yoursite.com/2014/11/12/拉练4_E/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/problemset/problem/8/C\" target=\"_blank\" rel=\"external\">http://codeforces.com/problemset/problem/8/C</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定起点，以及$n$个物品的位置。现在规定每次从起点出发，可以选择一个物品，并且将其带回起点；或者选择两个物品，先后走到两个物品处，将其带回起点。问将所有物品带回起点的最少时间，每段路程的时间为该路程值的平方。并且输出路径。<br>数据范围：$1{\\leq}n{\\leq}24$</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>用dp[i]表示i状态时所花的最短时间。<br>那么从i状态出发，可以选择一个没有选过的物品v，即$j = i | 1 &lt;&lt; v$, 转移方程为：$dp[j] = min(dp[j], dp[i] + dis[v] * 2)$<br>或者选择两个没有选过的物品v，l，即$j = i | 1 &lt;&lt; v | 1 &lt;&lt; l$, 转移方程为：$dp[j] = min(dp[j], dp[i] + dis[v] + a[v][l] + dis[l])$<br>但这样做还时间复杂度很大，会TLE。这里有个神奇的剪枝，因为所有的物品先取后取不影响结果，所以我们可以人为的规定一个取物品的顺序（从小到大）。（详见代码）</p>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) (x) * (x)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> sx, sy;</div><div class=\"line\"><span class=\"keyword\">int</span> x[<span class=\"number\">25</span>], y[<span class=\"number\">25</span>], n;</div><div class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>], pre[<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">24</span>][<span class=\"number\">24</span>], d[<span class=\"number\">25</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;sx, &amp;sy, &amp;n);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, x + i, y + i);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        d[i] = sqr(x[i] - sx) + sqr(y[i] - sy);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) a[i][j] = sqr(x[i] - x[j]) + sqr(y[i] - y[j]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"number\">1</span> &lt;&lt; n;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tot; i++) <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || dp[i]) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) <span class=\"keyword\">if</span> (!((i &gt;&gt; j) &amp; <span class=\"number\">1</span>))&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = i | (<span class=\"number\">1</span> &lt;&lt; j);</div><div class=\"line\">            <span class=\"keyword\">int</span> s = d[j] * <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!dp[v] || dp[v] &gt; dp[i] + s) dp[v] = dp[i] + s, pre[v] = i;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = j + <span class=\"number\">1</span>; l &lt; n; l++) <span class=\"keyword\">if</span> (!((i &gt;&gt; l) &amp; <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">                s = d[j] + a[j][l] + d[l];</div><div class=\"line\">                v = i | (<span class=\"number\">1</span> &lt;&lt; l) | (<span class=\"number\">1</span> &lt;&lt; j);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!dp[v] || dp[v] &gt; dp[i] + s) dp[v] = dp[i] + s, pre[v] = i;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>; <span class=\"comment\">//每次只选择最小的进行状态的更新，然后就跳出</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, dp[tot - <span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = tot - <span class=\"number\">1</span>; t; t = pre[t]) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> s = t ^ pre[t];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"keyword\">if</span> ((s &gt;&gt; i) &amp; <span class=\"number\">1</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;i + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-12 AC</li>\n</ul>\n","categories":["ACM"],"tags":["dp","bitmasks"]},{"title":"CF练习赛3","url":"http://yoursite.com/2014/11/09/拉练3/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><ul>\n<li>Problem A [CodeForces 6A] Triangle (水题)</li>\n<li>Problem B [CodeForces 6C] Alice, Bob and Chocolate (水题) </li>\n<li>Problem C [CodeForces 6B] President’s Office (水题)</li>\n<li>Problem D [CodeForces 5C] Longest Regular Bracket Sequence (贪心)</li>\n<li>Problem E [CodeForces 6E] Exposition (二分, RMQ)</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Problem-A-Triangle-水题\"><a href=\"#Problem-A-Triangle-水题\" class=\"headerlink\" title=\"Problem A Triangle (水题)\"></a>Problem A Triangle (水题)</h2><p>给出四个数字，从中任意选取三个，问能否构成三角形。如果不能，能否构成退化的三角形（即两边之和等于第三遍）</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>每次选出三个数字，试试看能否构成三角形。试的时候可以先将数字排序一下。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a, b, c, d;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &gt; y) swap(x, y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &gt; z) swap(x, z);</div><div class=\"line\">    <span class=\"keyword\">if</span> (y &gt; z) swap(y, z);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x + y &gt; z) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x + y == z) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</div><div class=\"line\">    <span class=\"keyword\">int</span> q = get(a, b, c);</div><div class=\"line\">    <span class=\"keyword\">int</span> w = get(a, b, d);</div><div class=\"line\">    <span class=\"keyword\">int</span> x = get(a, c, d);</div><div class=\"line\">    <span class=\"keyword\">int</span> y = get(b, c, d);</div><div class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"number\">1</span> || w == <span class=\"number\">1</span> || x == <span class=\"number\">1</span> || y == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"TRIANGLE\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (q == <span class=\"number\">0</span> || w == <span class=\"number\">0</span> || x == <span class=\"number\">0</span> || y == <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"SEGMENT\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"IMPOSSIBLE\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Problem-B-Alice-Bob-and-Chocolate-水题\"><a href=\"#Problem-B-Alice-Bob-and-Chocolate-水题\" class=\"headerlink\" title=\"Problem B Alice, Bob and Chocolate (水题)\"></a>Problem B Alice, Bob and Chocolate (水题)</h2><p>有一排巧克力，Alice和Bob分别从两头开始吃巧克力，Alice从左边，Bob右边。每个巧克力要消耗不同的时间，两个人不能同时吃一块巧克力。当两人要同时开始吃一块时，Bob会让Alice吃，问Alice和Bob各可以吃几块巧克力。</p>\n<h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>模拟一下就行。或者直接从中间时间找一下。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> a[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</div><div class=\"line\">    a[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">        a[i] = a[i - <span class=\"number\">1</span>] + x;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> id = lower_bound(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, a[n] / <span class=\"number\">2</span>) - a;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = max(id - <span class=\"number\">3</span>, <span class=\"number\">1</span>); j &lt;= min(id + <span class=\"number\">3</span>, n); j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[j - <span class=\"number\">1</span>] &gt; a[n] - a[j]) &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;j - <span class=\"number\">1</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;n - j + <span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Problem-C-President’s-Office-水题\"><a href=\"#Problem-C-President’s-Office-水题\" class=\"headerlink\" title=\"Problem C President’s Office (水题)\"></a>Problem C President’s Office (水题)</h2><p>给定一个地图，’R’表示boss的地盘，’.’表示空地，其他字符表示小怪的地盘。问与’R’相邻的小怪有多少种。</p>\n<h2 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>对于每个’R’，上下左右搜一下，统计一下小怪数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">char</span> mp[<span class=\"number\">111</span>][<span class=\"number\">111</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>&#125;, dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">char</span> p;</div><div class=\"line\"><span class=\"keyword\">int</span> pos[<span class=\"number\">10010</span>][<span class=\"number\">2</span>], cnt;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; has;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</div><div class=\"line\">    cnt = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</div><div class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;mp[i][j];</div><div class=\"line\">            <span class=\"keyword\">if</span> (mp[i][j] == p) &#123;</div><div class=\"line\">                pos[cnt][<span class=\"number\">0</span>] = i, pos[cnt++][<span class=\"number\">1</span>] = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    has.clear();</div><div class=\"line\">    has[p] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; cnt; t++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = pos[t][<span class=\"number\">0</span>], y = pos[t][<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> tx = x + dx[i], ty = y + dy[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> (POSIN(tx, ty) &amp;&amp; mp[tx][ty] != <span class=\"string\">'.'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> d = ++has[mp[tx][ty]];</div><div class=\"line\">                <span class=\"keyword\">if</span> (d == <span class=\"number\">1</span>) sum++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;sum&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Problem-D-Longest-Regular-Bracket-Sequence-贪心\"><a href=\"#Problem-D-Longest-Regular-Bracket-Sequence-贪心\" class=\"headerlink\" title=\"Problem D Longest Regular Bracket Sequence (贪心)\"></a>Problem D Longest Regular Bracket Sequence (贪心)</h2><p>给定一串括号，长度为$n$, 求最长的能够匹配的(符合规则)的子序列，输出最长的长度，以及该长度的个数。如果没有匹配的，输出0 1<br>数据范围：$1{\\leq}n{\\leq}10^6$<br><a href=\"http://siofive.github.io/2014/11/09/拉练3_D/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/09/拉练3_D/</a></p>\n<h2 id=\"Problem-E-Exposition-二分-RMQ-set\"><a href=\"#Problem-E-Exposition-二分-RMQ-set\" class=\"headerlink\" title=\"Problem E Exposition (二分, RMQ, set)\"></a>Problem E Exposition (二分, RMQ, set)</h2><p>给定$n$个数，每个数为$h_i$，以及一个$k$。求最长的区间，使得该区间内所有数字的差值不超过$k$。第一行输出区间长度以及区间的个数，第二行输出每个区间$[l_i, r_i]$<br>数据范围：$1{\\leq}n{\\leq}10^5, 0{\\leq}k, h_i{\\leq}10^6$<br><a href=\"http://siofive.github.io/2014/11/09/拉练3_E/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/09/拉练3_E/</a></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-9 AK</li>\n</ul>\n","categories":["ACM","Contest"],"tags":[]},{"title":"CF 6E Exposition (二分, RMQ, set)","url":"http://yoursite.com/2014/11/09/拉练3_E/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/problemset/problem/6/E\" target=\"_blank\" rel=\"external\">http://codeforces.com/problemset/problem/6/E</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定$n$个数，每个数为$h_i$，以及一个$k$。求最长的区间，使得该区间内所有数字的差值不超过$k$。第一行输出区间长度以及区间的个数，第二行输出每个区间$[l_i, r_i]$<br>数据范围：$1{\\leq}n{\\leq}10^5, 0{\\leq}k, h_i{\\leq}10^6$</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><h2 id=\"二分-RMQ\"><a href=\"#二分-RMQ\" class=\"headerlink\" title=\"二分 + RMQ\"></a>二分 + RMQ</h2><p>首先用RMQ预处理出任意区间[l, r]的最大值和最小值。然后二分答案，如果该长度下，存在最大值减最小值的差值不超过$k$，便有解。</p>\n<h2 id=\"Multiset\"><a href=\"#Multiset\" class=\"headerlink\" title=\"Multiset\"></a>Multiset</h2><p>也可以用Multiset来实现，从左到右依次将数字存入Multiset中。每加入一个数，如果此时出现最大值与最小值的差超过$k$，就要从头开始删数字，直到符合条件位置。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"二分-RMQ-1\"><a href=\"#二分-RMQ-1\" class=\"headerlink\" title=\"二分 + RMQ\"></a>二分 + RMQ</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, k, mx[<span class=\"number\">20</span>][maxn], mn[<span class=\"number\">20</span>][maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RMQ</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= log2(num) + <span class=\"number\">1</span>; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= num; j++) <span class=\"keyword\">if</span> (j + (<span class=\"number\">1</span> &lt;&lt; i) - <span class=\"number\">1</span> &lt;= num) &#123;</div><div class=\"line\">                mx[i][j] = max(mx[i - <span class=\"number\">1</span>][j], mx[i - <span class=\"number\">1</span>][j + (<span class=\"number\">1</span> &lt;&lt; i &gt;&gt; <span class=\"number\">1</span>)]);</div><div class=\"line\">                mn[i][j] = min(mn[i - <span class=\"number\">1</span>][j], mn[i - <span class=\"number\">1</span>][j + (<span class=\"number\">1</span> &lt;&lt; i &gt;&gt; <span class=\"number\">1</span>)]);</div><div class=\"line\">            &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> st, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> k = (<span class=\"keyword\">int</span>) log2(ed - st + <span class=\"number\">1.0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> mxans = max(mx[k][st], mx[k][ed - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"keyword\">int</span> mnans = min(mn[k][st], mn[k][ed - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> mxans - mnans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> mid)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - mid + <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (get(i, i + mid - <span class=\"number\">1</span>) &lt;= k) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;k);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;mx[<span class=\"number\">0</span>][i]);</div><div class=\"line\">        mn[<span class=\"number\">0</span>][i] = mx[<span class=\"number\">0</span>][i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    RMQ(n);</div><div class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = n, mid;</div><div class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r) &#123;</div><div class=\"line\">        mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (check(mid)) l = mid;</div><div class=\"line\">        <span class=\"keyword\">else</span> r = mid - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l + <span class=\"number\">1</span> == r) <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (check(r)) l = r;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; g;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - l + <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (get(i, i + l - <span class=\"number\">1</span>) &lt;= k) g.pb(make_pair(i, i + l - <span class=\"number\">1</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, l, g.size());</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g.size(); i++) <span class=\"built_in\">cout</span>&lt;&lt;g[i].first&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;g[i].second&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Multiset-1\"><a href=\"#Multiset-1\" class=\"headerlink\" title=\"Multiset\"></a>Multiset</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt; s;</div><div class=\"line\"><span class=\"keyword\">int</span> n, k, h[N], r[N], mx, cnt, t;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;k;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, h + i);</div><div class=\"line\">        s.insert(h[i]);</div><div class=\"line\">        <span class=\"keyword\">while</span>(*s.rbegin() - *s.begin() &gt; k) s.erase(s.find(h[t++]));</div><div class=\"line\">        <span class=\"keyword\">int</span> len = i - t + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (len &gt; mx) &#123;</div><div class=\"line\">            mx = len, cnt = <span class=\"number\">0</span>;</div><div class=\"line\">            r[cnt++] = t;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == mx) r[cnt++] = t;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;mx&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;cnt&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, r[i] + <span class=\"number\">1</span>, r[i] + mx);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-9 AC</li>\n</ul>\n","categories":["ACM"],"tags":["二分","RMQ","set"]},{"title":"CF 5C Longest Regular Bracket Sequence (贪心)","url":"http://yoursite.com/2014/11/09/拉练3_D/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/problemset/problem/5/C\" target=\"_blank\" rel=\"external\">http://codeforces.com/problemset/problem/5/C</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一串括号，长度为$n$, 求最长的能够匹配的(符合规则)的子序列，输出最长的长度，以及该长度的个数。如果没有匹配的，输出0 1<br>数据范围：$1{\\leq}n{\\leq}10^6$</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>对于字符串串中的每个’)’我们定义两个值：</p>\n<ol>\n<li>pos[i]表示’)’对应匹配的’(‘的位置，如果不匹配则为-1。pos[i]可以用栈来存储’(‘的位置实现。</li>\n<li>f[i]表示以该’)’结尾能够匹配的最长子序列。<br>首先，我们可以知道如果pos[i]不等于-1，那么(pos[i], i)这个子串一定可以。<br>其次，如果上述符合，再观察pos[i] - 1的位置，如果该位置也为’)’，且也被匹配到了，那么该子序列就可以继续向前匹配到f[pos[i] - 1]</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">const <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>e6 + <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\">char <span class=\"keyword\">str</span>[N]<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">pos</span>[N], f[N]<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">int</span> main () &#123;</div><div class=\"line\">    gets(<span class=\"keyword\">str</span>)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">strlen</span>(<span class=\"keyword\">str</span>)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> mx = <span class=\"number\">0</span>, m = <span class=\"number\">1</span>, <span class=\"keyword\">cnt</span> = <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span><span class=\"comment\">; i &lt;= n; i++) &#123;</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">str</span>[i - <span class=\"number\">1</span>] == <span class=\"string\">'('</span>) <span class=\"keyword\">pos</span>[++<span class=\"keyword\">cnt</span>] = i<span class=\"comment\">;</span></div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">cnt</span>) <span class=\"keyword\">continue</span><span class=\"comment\">;</span></div><div class=\"line\">            f[i] = f[<span class=\"keyword\">pos</span>[<span class=\"keyword\">cnt</span>] - <span class=\"number\">1</span>] + i - <span class=\"keyword\">pos</span>[<span class=\"keyword\">cnt</span>] + <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">            <span class=\"keyword\">cnt</span>--<span class=\"comment\">;</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (f[i] &gt; mx) mx = f[i], m = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == mx) m++<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    cout&lt;&lt;mx&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;m&lt;&lt;endl<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-9 AC</li>\n</ul>\n","categories":["ACM"],"tags":["dp","贪心"]},{"title":"CF练习赛2","url":"http://yoursite.com/2014/11/07/拉练2/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><ul>\n<li>Problem A [CodeForces 5A] Chat Server’s Outgoing Traffic (水题)</li>\n<li>Problem B [CodeForces 5B] Center Alignment (水题) </li>\n<li>Problem C [CodeForces 4D] Mysterious Present (dp, 最长上升子序列)</li>\n<li>Problem D [CodeForces 3B] Lorry (贪心)</li>\n<li>Problem E [CodeForces 2C] Commentator problem (几何, 模拟退火)</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Problem-A-Chat-Server’s-Outgoing-Traffic-水题\"><a href=\"#Problem-A-Chat-Server’s-Outgoing-Traffic-水题\" class=\"headerlink\" title=\"Problem A Chat Server’s Outgoing Traffic (水题)\"></a>Problem A Chat Server’s Outgoing Traffic (水题)</h2><p>有一个聊天系统，每次可以进来一个人，出去一个人，或是在系统内的一个人说一些话。而在系统内说的话，所有人（包括自己）的屏幕上都会出现。问所有人的屏幕上总共出现了多少字符。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>统计一下人数就好。总数就是每段话的字符串乘以人数的乘积和。</p>\n<h2 id=\"Problem-B-Center-Alignment-水题\"><a href=\"#Problem-B-Center-Alignment-水题\" class=\"headerlink\" title=\"Problem B Center Alignment (水题)\"></a>Problem B Center Alignment (水题)</h2><p>有一段文字，现在要把这段文字放在一个方框里，并且居中。如果不能绝对居中的，按照先靠左，再靠右的格式居中。</p>\n<h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>用一个变量来区分靠左还是靠右。</p>\n<h2 id=\"Problem-C-Mysterious-Present-dp-最长上升子序列\"><a href=\"#Problem-C-Mysterious-Present-dp-最长上升子序列\" class=\"headerlink\" title=\"Problem C Mysterious Present (dp, 最长上升子序列)\"></a>Problem C Mysterious Present (dp, 最长上升子序列)</h2><p>有一个明信片，宽度为$w$，高度为$h$。以及$n$个信封，每个的宽度为$w_i$，高度为$h_i$，信封$A$的宽度和高度均大于$B$时，$B$可以装进$A$。现在要把明信片装进信封里（规则与信封嵌套一样），且要求信封嵌套的层数最多。问最多能有多少层，并输出嵌套方案。<br>数据范围：$1{\\leq}n{\\leq}5000, 1{\\leq}w_i, h_i{\\leq}10^6$<br><a href=\"http://siofive.github.io/2014/11/07/拉练2_C/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/07/拉练2_C/</a></p>\n<h2 id=\"Problem-D-Lorry-贪心\"><a href=\"#Problem-D-Lorry-贪心\" class=\"headerlink\" title=\"Problem D Lorry (贪心)\"></a>Problem D Lorry (贪心)</h2><p>有两种船，$A$船的体积为$1$，$B$船的体积为$2$。而每条船的价值不同。现在有$n$条船，给出每条船的体积$t_i$和价值$p_i$。问一个体积为$v$的仓库，怎样存放可以使得价值最大。求最大的价值，并输出存放的船。<br>数据范围：$1{\\leq}n{\\leq}10^5, 1{\\leq}v{\\leq}10^9, 1{\\leq}t_i{\\leq}2, 1{\\leq}p_i{\\leq}10^4$</p>\n<h2 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>将$A$类型和$B$类型分开，然后按照价值排序。<br>如果按照正常的思路：如果两个$A$船的价值和大于$B$船，那么选择两个$A$船，否则选$B$。然后依次处理。<br>但上述方法需要处理很多细节，很容易出现问题。其实可以换个思路考虑，枚举选取的$A$船的个数，然后剩下的体积全部装$B$船，找出最大值即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">int</span> n, v;</div><div class=\"line\"><span class=\"keyword\">int</span> ca, cb;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ka</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> c, id;</div><div class=\"line\">&#125;a[N];</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sb</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> c, id;</div><div class=\"line\">&#125;b[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp1</span><span class=\"params\">(ka s, ka v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s.c &gt; v.c;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp2</span><span class=\"params\">(sb s, sb v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s.c &gt; v.c;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; g;</div><div class=\"line\"><span class=\"keyword\">int</span> s_a[N], s_b[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;v;</div><div class=\"line\">    <span class=\"keyword\">int</span> t, c;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;t, &amp;c);</div><div class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"number\">1</span>) a[ca].c = c, a[ca++].id = i + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> b[cb].c = c, b[cb++].id = i + <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    sort(a, a + ca, cmp1);</div><div class=\"line\">    sort(b, b + cb, cmp2);</div><div class=\"line\">    s_a[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ca; i++) &#123;</div><div class=\"line\">        s_a[i + <span class=\"number\">1</span>] = s_a[i] + a[i].c;</div><div class=\"line\">    &#125;</div><div class=\"line\">    s_b[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cb; i++) &#123;</div><div class=\"line\">        s_b[i + <span class=\"number\">1</span>] = s_b[i] + b[i].c;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> na = <span class=\"number\">0</span>, nb = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> mx = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= ca; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt; v) <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> les = (v - i) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (les &gt;= cb) les = cb;</div><div class=\"line\">        <span class=\"keyword\">int</span> tmp = s_a[i] + s_b[les];</div><div class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; mx) &#123;</div><div class=\"line\">            na = i, nb = les;</div><div class=\"line\">            mx = tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;mx&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; na; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a[i].id);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, b[i].id);</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Problem-E-Commentator-problem-几何-模拟退火\"><a href=\"#Problem-E-Commentator-problem-几何-模拟退火\" class=\"headerlink\" title=\"Problem E Commentator problem (几何, 模拟退火)\"></a>Problem E Commentator problem (几何, 模拟退火)</h2><p>给定三个圆的圆心坐标$(x_i, y_i)$和半径$r_i$，求点使得在该点看三个圆的视角相同，如果有多个点，取视角最大的点。<br>数据范围：$-10^3{\\leq}x_i, y_i{\\leq}10^3, 1{\\leq}r_i{\\leq}10^3$<br><a href=\"http://siofive.github.io/2014/11/07/拉练2_E/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/07/拉练2_E/</a></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-7 AK</li>\n</ul>\n","categories":["ACM","Contest"],"tags":[]},{"title":"CF 2C Commentator problem (几何, 模拟退火)","url":"http://yoursite.com/2014/11/07/拉练2_E/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/problemset/problem/2/C\" target=\"_blank\" rel=\"external\">http://codeforces.com/problemset/problem/2/C</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定三个圆的圆心坐标$(x_i, y_i)$和半径$r_i$，求点使得在该点看三个圆的视角相同，如果有多个点，取视角最大的点。<br>数据范围：$-10^3{\\leq}x_i, y_i{\\leq}10^3, 1{\\leq}r_i{\\leq}10^3$</p>\n<a id=\"more\"></a>\n<h1 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h1><p>从某个点观察某个圆的视角为：$2asin\\frac{r}{d}$，其中$r$为圆的半径，$d$为点到圆心的半径。<br>所以对于两个圆来说：<br>两者的半径相同，那么观察视角相同的点所形成的曲线为一条直线，即两圆心所在直线的垂直平分线。<br>两者的半径不同，那么曲线为圆。为什么为圆呢，将圆心所在的直线设为$x$轴，其中一个圆心为原点，然后设视角相同的点为$(x, y)$，根据前面提到的视角相同的条件列出方程，会发现$x^2, y^2$的系数相同且不为0。所以曲线为圆。<br>知道这个线索之后，接下来题目就容易了。(只是理论AC容易了好么..)<br>圆$1$，圆$2$的曲线和圆$2$，圆$3$的曲线的交点即是所求的点，如果有多个点，取视角最大的即可。<br>问题就是以下几个情况：</p>\n<ul>\n<li>两直线求交点</li>\n<li>直线和圆求交点</li>\n<li>圆和圆求交点</li>\n</ul>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">挖个坑，这个方法还没有<span class=\"keyword\">AC</span>。</div></pre></td></tr></table></figure>\n<h1 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h1><p>神奇的模拟退火！<br>模拟退火是一个随机算法，原理大致是：在某个局部解的周围随机的探测，如果有更优解，则更新。(这点和大多数贪心很相似)但与普通贪心不同的是，模拟退火有一个跳出局部解的机制，即会选择非最优解也进行进一步的探测。</p>\n<p>先来一份CF上看到的题解，选取重心为最开始的探测点，然后上下左右四个方向进行探测。但该方法没有一般性。后面有较为一般性的模拟退火<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) (x) * (x)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">double</span> x[<span class=\"number\">3</span>], y[<span class=\"number\">3</span>], r[<span class=\"number\">3</span>], g[<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">double</span> ax, <span class=\"keyword\">double</span> ay)</span> </span>&#123; <span class=\"comment\">//f函数是三个视角中两两差的平方和，用来衡量解的优劣</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</div><div class=\"line\">        g[i] = <span class=\"built_in\">sqrt</span>(sqr(x[i] - ax) + sqr(y[i] - ay)) / r[i];</div><div class=\"line\">    <span class=\"keyword\">double</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</div><div class=\"line\">        tmp += sqr(g[i] - g[(i + <span class=\"number\">1</span>) % <span class=\"number\">3</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> dt = <span class=\"number\">1</span>, ax = <span class=\"number\">0</span>, ay = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf%lf\"</span>, x + i, y + i, r + i);</div><div class=\"line\">        ax += x[i], ay += y[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    ax /= <span class=\"number\">3</span>, ay /= <span class=\"number\">3</span>; <span class=\"comment\">//选择重心进行探测</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(dt &gt; eps) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> fg = <span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">double</span> now = f(ax, ay);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123; <span class=\"comment\">//从四个方向进行探测</span></div><div class=\"line\">            <span class=\"keyword\">double</span> nxt = f(ax + dx[i] * dt, ay + dy[i] * dt);</div><div class=\"line\">            <span class=\"keyword\">if</span> (nxt &lt; now) now = nxt, fg = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fg == <span class=\"number\">-1</span>) dt *= <span class=\"number\">0.5</span>; <span class=\"comment\">//如果四个方向都没有找到最优解，则减小步长</span></div><div class=\"line\">        <span class=\"keyword\">else</span> ax += dx[fg] * dt, ay += dy[fg] * dt; <span class=\"comment\">//否则更新探测中心</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (f(ax, ay) &lt; eps) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5lf %.5lf\\n\"</span>, ax, ay);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述的探测方式没有一般性，下面是较为一般性的探测方式。(ps 还没有写完)<br><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">我又来挖坑了==<span class=\"string\">|</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-7 AC</li>\n</ul>\n","categories":["ACM"],"tags":["几何","模拟退火"]},{"title":"CF 4D Mysterious Present (dp, 最长上升子序列)","url":"http://yoursite.com/2014/11/07/拉练2_C/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/problemset/problem/4/D\" target=\"_blank\" rel=\"external\">http://codeforces.com/problemset/problem/4/D</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个明信片，宽度为$w$，高度为$h$。以及$n$个信封，每个的宽度为$w_i$，高度为$h_i$，信封$A$的宽度和高度均大于$B$时，$B$可以装进$A$。现在要把明信片装进信封里（规则与信封嵌套一样），且要求信封嵌套的层数最多。问最多能有多少层，并输出嵌套方案。<br>数据范围：$1{\\leq}n{\\leq}5000, 1{\\leq}w_i, h_i{\\leq}10^6$</p>\n<a id=\"more\"></a>\n<h1 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h1><p>由于n才5000，所以可以采用记忆化搜索来做，$dp[i]$表示以$i$信封为最内层，可以有多少层。<br>每搜到一个信封$i$，如果之前已经搜索过了，返回$dp[i]$。<br>否则先操作$dp[i] = 1$(因为一个信封为$1$层)。然后对其他所有信封进行搜索，如果其中有信封$j$能作为$i$信封的外层，且$dp[j] + 1 &gt; dp[i]$，更新$dp[i]$。<br>从明信片开始搜索。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5010</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, w[N], h[N], nxt[N], dp[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gao</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dp[x]) <span class=\"keyword\">return</span> dp[x];</div><div class=\"line\">    dp[x] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) <span class=\"keyword\">if</span> (w[i] &gt; w[x] &amp;&amp; h[i] &gt; h[x]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (gao(i) + <span class=\"number\">1</span> &gt; dp[x]) &#123;</div><div class=\"line\">            nxt[x] = i;</div><div class=\"line\">            dp[x] = dp[i] + <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> dp[x];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, w + i, h + i);</div><div class=\"line\">        nxt[i] = <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    gao(<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[<span class=\"number\">0</span>] - <span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = nxt[<span class=\"number\">0</span>]; i != <span class=\"number\">-1</span>; i = nxt[i]) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, i);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h1><p>首先先将信封进行筛选，即去除那些装不了明信片的。然后求二维偏序集$(x,y)$的最长上升子序列即可。<br>求法是：先按照其中一维进行从小到大排序，第一维相同，按第二维从小到大排序，这样排序的目的是保证只有排在后面的信封才有可能装排在前面的信封。<br>然后按照$O(N^2)$的思想找到最长上升子序列即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5010</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> w, h, id;</div><div class=\"line\">&#125;e[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node s, node v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s.w != v.w) <span class=\"keyword\">return</span> s.w &lt; v.w;</div><div class=\"line\">    <span class=\"keyword\">return</span> s.h &lt; v.h;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> dp[N], pre[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, w, h;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;n, &amp;w, &amp;h);</div><div class=\"line\">    <span class=\"keyword\">int</span> x, y, cnt = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;x, &amp;y);</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &gt; w &amp;&amp; y &gt; h) e[cnt++] = &#123;x, y, i + <span class=\"number\">1</span>&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    sort(e, e + cnt, cmp);</div><div class=\"line\">    <span class=\"keyword\">int</span> mx = <span class=\"number\">0</span>, fg = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++) &#123;</div><div class=\"line\">        pre[i] = <span class=\"number\">-1</span>;</div><div class=\"line\">        dp[i] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) <span class=\"keyword\">if</span> (e[j].w &lt; e[i].w &amp;&amp; e[j].h &lt; e[i].h) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dp[i] &lt; dp[j] + <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                dp[i] = dp[j] + <span class=\"number\">1</span>;</div><div class=\"line\">                pre[i] = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dp[i] &gt; mx) mx = dp[i], fg = i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;mx&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = fg; i != <span class=\"number\">-1</span>; i = pre[i]) v.pb(e[i].id);</div><div class=\"line\">    reverse(v.begin(), v.end());</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.size(); i++) <span class=\"built_in\">cout</span>&lt;&lt;v[i]&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (fg != <span class=\"number\">-1</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-7 AC</li>\n</ul>\n","categories":["ACM"],"tags":["dp","最长上升子序列"]},{"title":"BestCoder Round 16","url":"http://yoursite.com/2014/11/04/BC16/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=BestCoder+Round+%2316&amp;source=1&amp;searchmode=source\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/search.php?field=problem&amp;key=BestCoder+Round+%2316&amp;source=1&amp;searchmode=source</a></p>\n<ul>\n<li>5086 Revenge of Segment Tree (水题)</li>\n<li>5087 Revenge of LIS II (dp)</li>\n<li>5088 Revenge of Nim II (高斯消元)</li>\n<li>5089 Revenge of iSea (数学 概率)</li>\n</ul>\n<p>BC第16场，感觉题目质量还可以。最近状态不太好，以前组队赛太依赖孟神的dp了，导致现在完全不会dp。。这是个忧伤的故事</p>\n<a id=\"more\"></a>\n<h1 id=\"1001-Revenge-of-Segment-Tree-水题\"><a href=\"#1001-Revenge-of-Segment-Tree-水题\" class=\"headerlink\" title=\"1001 Revenge of Segment Tree (水题)\"></a>1001 Revenge of Segment Tree (水题)</h1><p>求一个序列的所有连续子序列的序列和的和。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>考虑每个数出现在多少个子序列之中，假设第i个数为$A_i$，区间为[L,R]。那么包含$A_i$的区间满足$L{\\leq}i{\\bigcap}R{\\geq}i$。累加$(L+1){\\times}(N−R){\\times}A[i]$就可以了。<br>复杂度：O(N)<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">447000</span> + <span class=\"number\">30</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1000000007</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        ll ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> k;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</div><div class=\"line\">            ll s = i, ed = (n - i) + <span class=\"number\">1</span>;</div><div class=\"line\">            ll p = (((s * ed) % mod) * k) % mod;</div><div class=\"line\">            ans = (ans + p) % mod;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"1002-Revenge-of-LIS-II-dp\"><a href=\"#1002-Revenge-of-LIS-II-dp\" class=\"headerlink\" title=\"1002 Revenge of LIS II (dp)\"></a>1002 Revenge of LIS II (dp)</h1><p>求序列第二长的上升子序列。<br><a href=\"http://siofive.github.io/2014/11/04/BC16_2/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/04/BC16_2/</a></p>\n<h1 id=\"Revenge-of-Nim-II-高斯消元\"><a href=\"#Revenge-of-Nim-II-高斯消元\" class=\"headerlink\" title=\"Revenge of Nim II (高斯消元)\"></a>Revenge of Nim II (高斯消元)</h1><p>Nim游戏的后手作弊移走一些整堆的物体（不能全拿走），可以保证先手必败吗？<br><a href=\"http://siofive.github.io/2014/11/04/BC16_3/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/04/BC16_3/</a></p>\n<h1 id=\"Revenge-of-iSea-数学-概率\"><a href=\"#Revenge-of-iSea-数学-概率\" class=\"headerlink\" title=\"Revenge of iSea (数学 概率)\"></a>Revenge of iSea (数学 概率)</h1><p>给出N道难度递增的题目，难度用可能做出的百分比表示，选出K道题目使得做出K-1道题目的概率最大。<br><a href=\"http://siofive.github.io/2014/11/04/BC16_4/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/04/BC16_4/</a></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-4 AK</li>\n</ul>\n","categories":["ACM","Contest"],"tags":[]},{"title":"hdu 5089 Revenge of iSea (数学 概率)","url":"http://yoursite.com/2014/11/04/BC16_4/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5089\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5089</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给出N道难度递增的题目，难度用可能做出的百分比表示，选出K道题目使得做出K-1道题目的概率最大。</p>\n<a id=\"more\"></a>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>假设最优解已经包含了k-1个了，现在来选取最后一个。K-1个全部做出的概率是$P_a(k-1)$，有一道未做出的概率是$P_l(k−1)$，现在选取的是$P_k$，那么做出K-1道的概率是<br>$P_a(k−1){\\times}(1−P_k)+P_l(k−1){\\times}P_k=P_a(k−1)+P_k{\\times}(P_l(k−1)−P_a(k−1))$<br>这是一个关于$P_k$的一次函数，如果$P_l(k−1)−P_a(k−1)$为正，选取最大的$P_k$，否则选取最小的。<br>这样，可以证明答案一定是选取两边的概率，枚举比较一下就可以算出最大的概率了。<br>还有最后一个问题，需要求字典序最小的。对于左边选取的$P_i$，当然index越小越好，对于右边的，如果存在相同的value，应该选取index较小的。比如90 80 30 30，如果答案是第一个和最后一个，为了取得最小的字典序，需要用第三个来替换一下第四个。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-8</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">double</span> p[<span class=\"number\">50</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">50</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t, n, k;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;k);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>, p + i);</div><div class=\"line\">            p[i] /= <span class=\"number\">100</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</div><div class=\"line\">        <span class=\"keyword\">int</span> pos[<span class=\"number\">50</span>], cnt = <span class=\"number\">0</span>, tot = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">            cnt = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) pos[cnt++] = j;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; k - i; j++) pos[cnt++] = n - j - <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">double</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; cnt; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">double</span> tmp = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; cnt; l++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (l != j) tmp *= p[pos[l]];</div><div class=\"line\">                    <span class=\"keyword\">else</span> tmp *= (<span class=\"number\">1</span> - p[pos[l]]);</div><div class=\"line\">                &#125;</div><div class=\"line\">                res += tmp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//cout&lt;&lt;res&lt;&lt;endl;</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (res - ans &gt; -eps) &#123; <span class=\"comment\">//这里为-eps是为了保证选的为最小字典序</span></div><div class=\"line\">                ans = res;</div><div class=\"line\">                tot = i;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tot; i++) vis[i] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> now;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - (k - tot); i &lt; n; i++) &#123;</div><div class=\"line\">            now = i;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= <span class=\"number\">0</span>; j--) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (vis[j] || p[j] &gt; p[i]) <span class=\"keyword\">break</span>;</div><div class=\"line\">                now = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">            vis[now] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (vis[i]) &#123;</div><div class=\"line\">                j++;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, i + <span class=\"number\">1</span>, j == k ? <span class=\"string\">'\\n'</span> : <span class=\"string\">' '</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-4 AK</li>\n</ul>\n","categories":["ACM"],"tags":["数学","概率"]},{"title":"hdu 5088 Revenge of Nim II (高斯消元)","url":"http://yoursite.com/2014/11/04/BC16_3/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5088\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5088</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>Nim游戏的后手作弊移走一些整堆的物体（不能全拿走），可以保证先手必败吗？</p>\n<a id=\"more\"></a>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>Nim游戏先手必败的条件是$XORSum(a[i])=0$。后手的目的就是找到这样的一个非空子集。把这里的a[i]看做一个每位为0或1的行，所有的数字组成一个矩阵，矩阵空间的运算是XOR。<br>可以发现，$10^{12}$最多为40位二进制，所以当数字个数大于40时，对该矩阵高斯消元之后，一定有某些行全为0，代表着该数字和其他数字异或之后为0。<br>当数字个数小于等于40时，对该矩阵进行高斯消元，如果矩阵的秩小于数字个数，代表能异或为0。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">65</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</div><div class=\"line\">ll a[N];</div><div class=\"line\"><span class=\"keyword\">int</span> b[maxn][maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnk</span><span class=\"params\">(<span class=\"keyword\">int</span> a[maxn][maxn], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, pivot = <span class=\"number\">0</span>; i &lt; n &amp;&amp; pivot &lt; m; ++pivot) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[j][pivot] == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                pos = j;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pos != i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = pivot; j &lt; m; j++) swap(a[i][j], a[pos][j]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ++ret;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[j][pivot] &amp;&amp; j != i) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = pivot; k &lt; m; k++) a[j][k] ^= a[i][k];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t, n;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        ll sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%I64d\"</span>, a + i);</div><div class=\"line\">            sum ^= a[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &gt; maxn || sum == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"Yes\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; maxn; j++) &#123;</div><div class=\"line\">                b[i][j] = a[i] &gt;&gt; j &amp; <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (rnk(b, n, maxn) &lt; n) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Yes\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"No\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-4 AK</li>\n</ul>\n","categories":["ACM"],"tags":["博弈","高斯消元"]},{"title":"hdu 5087 Revenge of LIS II (dp)","url":"http://yoursite.com/2014/11/04/BC16_2/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5087\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5087</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>求序列第二长的上升子序列。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>LIS的$O(N^2)$做法是$dp[i]=max(dp[j]|a[j]&lt;a[i])+1$。如果需要第二大的，额外开一维，记录到该位的最大长度能否由多个序列得到。<br>复杂度：$O(N^2)$</p>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxn], dp[maxn][<span class=\"number\">2</span>], mx, ok, n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</div><div class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</div><div class=\"line\">        mx = <span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>, dp[i][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) <span class=\"keyword\">if</span> (a[i] &gt; a[j]) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (dp[i][<span class=\"number\">0</span>] &lt; dp[j][<span class=\"number\">0</span>] + <span class=\"number\">1</span>) dp[i][<span class=\"number\">0</span>] = dp[j][<span class=\"number\">0</span>] + <span class=\"number\">1</span>, dp[i][<span class=\"number\">1</span>] = dp[j][<span class=\"number\">1</span>];</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dp[i][<span class=\"number\">0</span>] == dp[j][<span class=\"number\">0</span>] + <span class=\"number\">1</span>) dp[i][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//cout&lt;&lt;dp[i][0]&lt;&lt;\" \"&lt;&lt;dp[i][1]&lt;&lt;endl;</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (dp[i][<span class=\"number\">0</span>] &gt; mx) mx = dp[i][<span class=\"number\">0</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        ok = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> has = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"keyword\">if</span> (dp[i][<span class=\"number\">0</span>] == mx) &#123;</div><div class=\"line\">            ok++;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dp[i][<span class=\"number\">1</span>]) has = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ok &gt; <span class=\"number\">1</span> || has) <span class=\"built_in\">cout</span>&lt;&lt;mx&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;mx - <span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">6</span></div><div class=\"line\"><span class=\"comment\">3 5 2 5 1 6</span></div><div class=\"line\"><span class=\"comment\">*/</span></div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-4 AC</li>\n</ul>\n","categories":["ACM"],"tags":["dp","最长上升子序列"]},{"title":"CF练习赛1","url":"http://yoursite.com/2014/11/02/拉练1/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hust.edu.cn/vjudge/contest/view.action?cid=61581#overview\" target=\"_blank\" rel=\"external\">http://acm.hust.edu.cn/vjudge/contest/view.action?cid=61581#overview</a></p>\n<ul>\n<li>Problem A Before an Exam (水题)</li>\n<li>Problem B The least round way (DP)</li>\n<li>Problem C Tic-tac-toe (模拟)</li>\n<li>Problem D    Ancient Berland Circus (几何)</li>\n<li>Problem E    Least Cost Bracket Sequence (贪心)</li>\n</ul>\n<p>这场比赛做的很挫，水过A之后，看到学弟出了D，就去看D，发现可敲（不知道怎么发现的。。）敲一半不知道怎么处理圆心角了（赛后发现n才100！NM呀，这么重要的范围我竟然自动跳过了。n这么小枚举即可）。之后去做B，发现是个水DP（我这个不搞DP的都会，一定是水DP），但是在记录路径的时候写错坐标了。。一直没发现错。。然后听说C是模拟，便去看C。脑洞大开，以为接下来不管双方怎么走都赢不了才算平局，没什么太好的办法，只能二进制枚举一下。。然后死活不对。。最后时刻被告之是理解错题了。。sad。E比赛时候没时间看了。</p>\n<a id=\"more\"></a>\n<h1 id=\"Problem-A-Before-an-Exam\"><a href=\"#Problem-A-Before-an-Exam\" class=\"headerlink\" title=\"Problem A Before an Exam\"></a>Problem A Before an Exam</h1><p>给定$d$天，每天可以学习$[min_i,max_i]$个小时，问如果一共学习了$sum$个小时，能否合理安排每天的学习，使得满足要求。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>求一下最小值和，最大值和，如果sum在之间，一定满足。</p>\n<h1 id=\"Problem-B-The-least-round-way\"><a href=\"#Problem-B-The-least-round-way\" class=\"headerlink\" title=\"Problem B The least round way\"></a>Problem B The least round way</h1><p>给定一个$n × n$的矩阵，每个格子上有一个数字。现在从左上角走到右下角，规定每次只能向右、向下走，每走到一格，得到该格子上的数字。问怎么走，能够使得这些数字的乘积末尾0最少。给出最少的0和路径。</p>\n<h1 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>对于每一个数字，进行处理，我们只需要知道这个数字分别是2、5的多少次方。<br>先每次走的时候，先保证取2最小，（2一样的时候，5要最小），且在走的过程中记录路径。<br>然后反着来一遍，先保证取5最小，（5一样的时候，2要最小），且在走的过程中记录路径。<br>最后的答案就是上面两个的最小值。<br>这道题有个trick：有可能数字为0。如果起点或终点为0，乘积一定为0，否则上述得到的最小值大于1，那么便不取，而是选择走0那条路径。<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">#include&lt;map&gt;</div><div class=\"line\">#include&lt;set&gt;</div><div class=\"line\">#include&lt;queue&gt;</div><div class=\"line\">#include&lt;stack&gt;</div><div class=\"line\">#include&lt;cmath&gt;</div><div class=\"line\">#include&lt;cstdio&gt;</div><div class=\"line\">#include&lt;vector&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;fstream&gt;</div><div class=\"line\">#include&lt;cstring&gt;</div><div class=\"line\">#include&lt;ctype.h&gt;</div><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">#include&lt;algorithm&gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define <span class=\"symbol\">INF</span> (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>)</div><div class=\"line\">#define <span class=\"symbol\">LINF</span> (<span class=\"number\">1</span><span class=\"symbol\">LL</span> &lt;&lt; <span class=\"number\">60</span>)</div><div class=\"line\">#define <span class=\"symbol\">PI</span> acos(<span class=\"number\">-1.0</span>)</div><div class=\"line\">#define mem(a, b) memset(a, b, sizeof(a))</div><div class=\"line\">#define rep(i, a, n) for (int i = a; i &lt; n; i++)</div><div class=\"line\">#define per(i, a, n) for (int i = n - <span class=\"number\">1</span>; i &gt;= a; i--)</div><div class=\"line\">#define eps <span class=\"number\">1e-6</span></div><div class=\"line\">#define debug puts(<span class=\"string\">\"===============\"</span>)</div><div class=\"line\">#define pb push_back</div><div class=\"line\">#define mkp make_pair</div><div class=\"line\">#define all(x) (x).begin(),(x).end()</div><div class=\"line\">#define fi first</div><div class=\"line\">#define se second</div><div class=\"line\">#define <span class=\"symbol\">SZ</span>(x) ((int)(x).size())</div><div class=\"line\">#define <span class=\"symbol\">POSIN</span>(x,y) (<span class=\"number\">0</span> &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; <span class=\"number\">0</span> &lt;= (y) &amp;&amp; (y) &lt; m)</div><div class=\"line\">typedef long long ll;</div><div class=\"line\">typedef unsigned long long <span class=\"symbol\">ULL</span>;</div><div class=\"line\">const int <span class=\"symbol\">N</span> = <span class=\"number\">1000</span> + <span class=\"number\">10</span>;</div><div class=\"line\">int a[<span class=\"symbol\">N</span>][<span class=\"symbol\">N</span>][<span class=\"number\">2</span>];</div><div class=\"line\">int dp[<span class=\"symbol\">N</span>][<span class=\"symbol\">N</span>];</div><div class=\"line\">int ss[<span class=\"symbol\">N</span>][<span class=\"symbol\">N</span>];</div><div class=\"line\">int pre[<span class=\"symbol\">N</span>][<span class=\"symbol\">N</span>][<span class=\"number\">2</span>];</div><div class=\"line\">int pre1[<span class=\"symbol\">N</span>][<span class=\"symbol\">N</span>][<span class=\"number\">2</span>];</div><div class=\"line\">string str;</div><div class=\"line\">void out(int o, int x, int y) &#123;</div><div class=\"line\">    //cout&lt;&lt;x&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;y&lt;&lt;endl;</div><div class=\"line\">    if (x == <span class=\"number\">-1</span> &amp;&amp; y == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        reverse(str.begin(), str.end());</div><div class=\"line\">        cout&lt;&lt;str&lt;&lt;endl;</div><div class=\"line\">        return ;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        if (o == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            int tx = pre[x][y][<span class=\"number\">0</span>], ty = pre[x][y][<span class=\"number\">1</span>];</div><div class=\"line\">            if (tx == <span class=\"number\">-1</span> || ty == <span class=\"number\">-1</span>) ;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                if (tx == x - <span class=\"number\">1</span>) str += <span class=\"string\">'D'</span>;</div><div class=\"line\">                else str += <span class=\"string\">'R'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            out(<span class=\"number\">2</span>, tx, ty);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            int tx = pre1[x][y][<span class=\"number\">0</span>], ty = pre1[x][y][<span class=\"number\">1</span>];</div><div class=\"line\">            if (tx == <span class=\"number\">-1</span> || ty == <span class=\"number\">-1</span>) ;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                if (tx == x - <span class=\"number\">1</span>) str += <span class=\"string\">'D'</span>;</div><div class=\"line\">                else str += <span class=\"string\">'R'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            out(<span class=\"number\">1</span>, tx, ty);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int main () &#123;</div><div class=\"line\">    int n;</div><div class=\"line\">    cin &gt;&gt; n;</div><div class=\"line\">    int sx = <span class=\"number\">-1</span>, sy = <span class=\"number\">-1</span>;</div><div class=\"line\">    for (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        for (int j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">            int x, s = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</div><div class=\"line\">            scanf(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">            while(x <span class=\"comment\">% 2 == 0 &amp;&amp; x) &#123;</span></div><div class=\"line\">                s++;</div><div class=\"line\">                x /= <span class=\"number\">2</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            while(x <span class=\"comment\">% 5 == 0 &amp;&amp; x) &#123;</span></div><div class=\"line\">                b++;</div><div class=\"line\">                x /= <span class=\"number\">5</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (x == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                sx = i, sy = j;</div><div class=\"line\">                a[i][j][<span class=\"number\">0</span>] = <span class=\"symbol\">INF</span>, a[i][j][<span class=\"number\">1</span>] = <span class=\"symbol\">INF</span>;</div><div class=\"line\">            &#125;a[i][j][<span class=\"number\">0</span>] = s, a[i][j][<span class=\"number\">1</span>] = b;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (a[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"symbol\">INF</span> || a[n - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"symbol\">INF</span>) &#123;</div><div class=\"line\">        cout&lt;&lt;<span class=\"number\">1</span>&lt;&lt;endl;</div><div class=\"line\">        for (int i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) cout&lt;&lt;<span class=\"string\">\"D\"</span>;</div><div class=\"line\">        for (int i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) cout&lt;&lt;<span class=\"string\">\"R\"</span>;</div><div class=\"line\">        return <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>], ss[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>];</div><div class=\"line\">    for (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        for (int j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">            if (!i &amp;&amp; !j) continue;</div><div class=\"line\">            dp[i][j] = <span class=\"symbol\">INF</span>, ss[i][j] = <span class=\"symbol\">INF</span>;</div><div class=\"line\">            if (i) &#123;</div><div class=\"line\">                if ((dp[i][j] &gt; dp[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">0</span>]) || ((dp[i][j] == dp[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">0</span>]) &amp;&amp; ss[i][j] &gt; ss[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">1</span>]))&#123;</div><div class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">0</span>];</div><div class=\"line\">                    ss[i][j] = ss[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">1</span>];</div><div class=\"line\">                    pre[i][j][<span class=\"number\">0</span>] = i - <span class=\"number\">1</span>, pre[i][j][<span class=\"number\">1</span>] = j;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (j) &#123;</div><div class=\"line\">                if ((dp[i][j] &gt; dp[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">0</span>]) || ((dp[i][j] == dp[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">0</span>]) &amp;&amp; ss[i][j] &gt; ss[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">1</span>]))&#123;</div><div class=\"line\">                    dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">0</span>];</div><div class=\"line\">                    ss[i][j] = ss[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">1</span>];</div><div class=\"line\">                    pre[i][j][<span class=\"number\">0</span>] = i, pre[i][j][<span class=\"number\">1</span>] = j - <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int mx1 = min(dp[n - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>], ss[n - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>]);</div><div class=\"line\"></div><div class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>], ss[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>];</div><div class=\"line\">    for (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        for (int j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">            if (!i &amp;&amp; !j) continue;</div><div class=\"line\">            dp[i][j] = <span class=\"symbol\">INF</span>, ss[i][j] = <span class=\"symbol\">INF</span>;</div><div class=\"line\">            if (i) &#123;</div><div class=\"line\">                if ((dp[i][j] &gt; dp[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">1</span>]) || ((dp[i][j] == dp[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">1</span>]) &amp;&amp; ss[i][j] &gt; ss[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">0</span>]))&#123;</div><div class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">1</span>];</div><div class=\"line\">                    ss[i][j] = ss[i - <span class=\"number\">1</span>][j] + a[i][j][<span class=\"number\">0</span>];</div><div class=\"line\">                    pre1[i][j][<span class=\"number\">0</span>] = i - <span class=\"number\">1</span>, pre1[i][j][<span class=\"number\">1</span>] = j;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (j) &#123;</div><div class=\"line\">                if ((dp[i][j] &gt; dp[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">1</span>]) || ((dp[i][j] == dp[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">1</span>]) &amp;&amp; ss[i][j] &gt; ss[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">0</span>]))&#123;</div><div class=\"line\">                    dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">1</span>];</div><div class=\"line\">                    ss[i][j] = ss[i][j - <span class=\"number\">1</span>] + a[i][j][<span class=\"number\">0</span>];</div><div class=\"line\">                    pre1[i][j][<span class=\"number\">0</span>] = i, pre1[i][j][<span class=\"number\">1</span>] = j - <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int mx2 = min(dp[n - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>], ss[n - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>]);</div><div class=\"line\">    int mx = min(mx1, mx2);</div><div class=\"line\">    if (sx != <span class=\"number\">-1</span> &amp;&amp; mx &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        cout&lt;&lt;<span class=\"number\">1</span>&lt;&lt;endl;</div><div class=\"line\">        for (int i = <span class=\"number\">0</span>; i &lt; sx; i++) cout&lt;&lt;<span class=\"string\">\"D\"</span>;</div><div class=\"line\">        for (int i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) cout&lt;&lt;<span class=\"string\">\"R\"</span>;</div><div class=\"line\">        for (int i = sx; i &lt; n - <span class=\"number\">1</span>; i++) cout&lt;&lt;<span class=\"string\">\"D\"</span>;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        pre[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = pre[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</div><div class=\"line\">        pre1[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = pre1[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</div><div class=\"line\">        cout&lt;&lt;mx&lt;&lt;endl;</div><div class=\"line\">        if (mx1 == mx) out(<span class=\"number\">2</span>, n - <span class=\"number\">1</span>, n - <span class=\"number\">1</span>);</div><div class=\"line\">        else out(<span class=\"number\">1</span>, n - <span class=\"number\">1</span>, n - <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Problem-C-Tic-tac-toe\"><a href=\"#Problem-C-Tic-tac-toe\" class=\"headerlink\" title=\"Problem C Tic-tac-toe\"></a>Problem C Tic-tac-toe</h1><p>有一个游戏，给定一个3 X 3的棋盘，两个人连续在棋盘上放棋子（第一个人为X，第二个人为0），如果出现某行某列或者对角线上全为同样的棋子，那么该人获胜。<br>现在的问题是：给定一个棋盘，以及棋盘上的状态（空为.），问分别为以下哪种情况？</p>\n<ul>\n<li>illegal 棋盘不可能出现这种情况</li>\n<li>the first player won 第一个人赢</li>\n<li>the second player won 第二个人赢</li>\n<li>draw 平局</li>\n<li>first 接下来轮到第一个人走</li>\n<li>second 接下来轮到第二个人走 -</li>\n</ul>\n<h1 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>其实理解对题意了，就是道很水的题。。<br>主要illegal的情况比较多：</p>\n<ul>\n<li>双方棋子数不符合规则</li>\n<li>双方都赢了</li>\n<li>先手赢了，后手还放棋子</li>\n<li>后手赢了，先手还放棋子<br>然后是判断先手赢、后手赢或是平局（摆满了才有平局。。）最后都不符合，判断该谁走。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">char</span> mp[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> fi, se;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">win</span><span class=\"params\">(<span class=\"keyword\">char</span> mp[<span class=\"number\">4</span>][<span class=\"number\">4</span>], <span class=\"keyword\">int</span> t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch;</div><div class=\"line\">    <span class=\"keyword\">if</span> (t == <span class=\"number\">1</span>) ch = <span class=\"string\">'X'</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> ch = <span class=\"string\">'0'</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mp[i][j] == ch) x++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mp[i][j] == ch) x++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mp[i][i] == ch) x++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    x = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mp[i][<span class=\"number\">2</span> - i] == ch) x++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = win(mp, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> y = win(mp, <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"comment\">//cout&lt;&lt;x&lt;&lt;\" \"&lt;&lt;y&lt;&lt;endl;</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span> &amp;&amp; y == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span> &amp;&amp; fi == se) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"number\">1</span> &amp;&amp; fi == se + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (fi + se == <span class=\"number\">9</span>) <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    fi = se = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</div><div class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;mp[i][j];</div><div class=\"line\">            <span class=\"keyword\">if</span> (mp[i][j] == <span class=\"string\">'X'</span>) fi++;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mp[i][j] == <span class=\"string\">'0'</span>) se++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((fi &gt; se + <span class=\"number\">1</span>) || (fi &lt; se)) &#123;</div><div class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">\"illegal\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> dd = check();</div><div class=\"line\">    <span class=\"keyword\">if</span> (dd == <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"illegal\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dd == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"the first player won\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dd == <span class=\"number\">2</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"the second player won\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dd == <span class=\"number\">3</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"draw\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fi == se) <span class=\"built_in\">puts</span>(<span class=\"string\">\"first\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"second\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Problem-D-Ancient-Berland-Circus\"><a href=\"#Problem-D-Ancient-Berland-Circus\" class=\"headerlink\" title=\"Problem D     Ancient Berland Circus\"></a>Problem D     Ancient Berland Circus</h1><p>有一个正多边形(3&lt;=n&lt;=100)，现在只知道其中的三个顶点，问这个正多边形最小可能的面积。<br><a href=\"http://siofive.github.io/2014/11/02/拉练1_D/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/02/拉练1_D/</a></p>\n<h1 id=\"Problem-E-Least-Cost-Bracket-Sequence\"><a href=\"#Problem-E-Least-Cost-Bracket-Sequence\" class=\"headerlink\" title=\"Problem E     Least Cost Bracket Sequence\"></a>Problem E     Least Cost Bracket Sequence</h1><p>有一串字符串，每个字符为’(‘, ‘)’ 或’?’。现在需要将其中的’?’替换为’(‘或’)’，使得最后的括号匹配。每个’?’替换成相应的括号都有一个花费。如果最后不能匹配，输出-1。否则输出最少的花费。<br><a href=\"http://siofive.github.io/2014/11/02/拉练1_E/\" target=\"_blank\" rel=\"external\">http://siofive.github.io/2014/11/02/拉练1_E/</a></p>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-2 AK</li>\n</ul>\n","categories":["ACM","Contest"],"tags":[]},{"title":"CF 3D Least Cost Bracket Sequence (贪心)","url":"http://yoursite.com/2014/11/02/拉练1_E/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/problemset/problem/3/D\" target=\"_blank\" rel=\"external\">http://codeforces.com/problemset/problem/3/D</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一串字符串，每个字符为’(‘, ‘)’ 或’?’。现在需要将其中的’?’替换为’(‘或’)’，使得最后的括号匹配。每个’?’替换成相应的括号都有一个花费。如果最后不能匹配，输出-1。否则输出最少的花费。</p>\n<p>#思路<br>首先要知道，对于每个’)’而言，只要它之前的所有’)’都被匹配了，且它本身也有’(‘与它匹配，那么该表达式一定成立。<br>所以可以从头到尾的处理，一开始有个值now = 0，花费cost = 0，以及一个优先队列<br>碰到’(‘, now++。<br>碰到’)’, now–。<br>碰到’?’，将问号变成’)’，同时now++和cost += b (假设 ‘?’-&gt;’(‘ 费用为a，’?’-&gt;’)’ 费用为b)，然后将pair(b-a,i)放入优先队列。（i为位置）<br>发现此时now &lt; 0，即左括号比右括号少时，如果优先队列为空，说明前面已经没有有效的’?’了。即匹配失败。否则从优先队列里挑选一个能最大降低cost的’?’，转化为’(‘。<br>最后看now是否为0即可。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">50000</span> + <span class=\"number\">10</span>;</div><div class=\"line\">priority_queue&lt; pii &gt; q;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> str[N];</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, str);</div><div class=\"line\">    ll c = <span class=\"number\">0</span>, now = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; str[i]; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (str[i] == <span class=\"string\">'('</span>) now++;</div><div class=\"line\">        <span class=\"keyword\">else</span> now--;</div><div class=\"line\">        <span class=\"keyword\">if</span> (str[i] == <span class=\"string\">'?'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> a, b;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</div><div class=\"line\">            str[i] = <span class=\"string\">')'</span>;</div><div class=\"line\">            q.push(mkp(b - a, i));</div><div class=\"line\">            c += b;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flag &amp;&amp; now &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (q.empty()) flag = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                pii x = q.top(); q.pop();</div><div class=\"line\">                str[x.second] = <span class=\"string\">'('</span>;</div><div class=\"line\">                c -= x.first;</div><div class=\"line\">                now += <span class=\"number\">2</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (now != <span class=\"number\">0</span> || !flag) <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;c&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;str&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-2 AC</li>\n</ul>\n","categories":["ACM"],"tags":["贪心"]},{"title":"CF 1C Ancient Berland Circus (几何)","url":"http://yoursite.com/2014/11/02/拉练1_D/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/problemset/problem/1/C\" target=\"_blank\" rel=\"external\">http://codeforces.com/problemset/problem/1/C</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一个正多边形(3&lt;=n&lt;=100)，现在只知道其中的三个顶点，问这个正多边形最小可能的面积。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先可以知道，这个正多边形一定是有一个外接圆的。可以通过给定的三个点，构造三角形，然后求得外接圆。<br>外接圆的求法：<br>  用余弦定理得到角A，然后用正弦定理得到 a / sinA = 2 * R<br>之后可以得到每条边对应的圆心角。这三个圆心角一定是正多边形每条边对应圆心角的整数倍。由于n范围很小，才100。只要枚举一下n，找到最小的答案即可。<br>  我看网上还有种做法：三个圆心角A，B，C。那么正多边形每条边对应圆心角 = gcd(A, B, C) = gcd(gcd(A, B), C)<br>  这里用到了辗转相减法来求double的gcd，机智的做法（这就可以解决n很大的问题了）</p>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">ID: wuqi9395@126.com</span></div><div class=\"line\"><span class=\"comment\">PROG:</span></div><div class=\"line\"><span class=\"comment\">LANG: C++</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF (1 &lt;&lt; 30)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINF (1LL &lt;&lt; 60)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof(a))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, n) for (int i = a; i &lt; n; i++)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, n) for (int i = n - 1; i &gt;= a; i--)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug puts(<span class=\"meta-string\">\"===============\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mkp make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(),(x).end()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) ((int)(x).size())</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POSIN(x,y) (0 &lt;= (x) &amp;&amp; (x) &lt; n &amp;&amp; 0 &lt;= (y) &amp;&amp; (y) &lt; m)</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ULL;</div><div class=\"line\"><span class=\"keyword\">double</span> px[<span class=\"number\">3</span>], py[<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">double</span> a, b, c;</div><div class=\"line\"><span class=\"keyword\">double</span> A, B, C;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dis</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> x = px[i] - px[j], y = py[i] - py[j];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x * x + y * y);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">double</span> c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">acos</span>((b * b + c * c - a * a) / (<span class=\"number\">2</span> * b * c));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> e = <span class=\"number\">2</span> * PI / n;</div><div class=\"line\">    <span class=\"comment\">//cout&lt;&lt;e&lt;&lt;\"---------\";</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x = (A + eps) / e, y = (B + eps) / e, z = (C + eps) / e;</div><div class=\"line\">    <span class=\"comment\">//cout&lt;&lt;n&lt;&lt;\" \"&lt;&lt;x&lt;&lt;\" \"&lt;&lt;y&lt;&lt;\" \"&lt;&lt;z&lt;&lt;\" \"&lt;&lt;endl;</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>((x + y + z) * e - <span class=\"number\">2</span> * PI) &lt; <span class=\"number\">1e-6</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">double</span> R)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> ans = R * R * <span class=\"built_in\">sin</span>(<span class=\"number\">2</span> * PI / n) / <span class=\"number\">2</span> * n;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf\"</span>, &amp;px[i], &amp;py[i]);</div><div class=\"line\">    a = dis(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    b = dis(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    c = dis(<span class=\"number\">2</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"comment\">//cout&lt;&lt;a&lt;&lt;\" \"&lt;&lt;b&lt;&lt;\" \"&lt;&lt;c&lt;&lt;\" \"&lt;&lt;endl;</span></div><div class=\"line\">    <span class=\"comment\">//余弦定理得到三角形的角度</span></div><div class=\"line\">    A = get(a, b, c);</div><div class=\"line\">    B = get(b, a, c);</div><div class=\"line\">    C = get(c, a, b);</div><div class=\"line\">    <span class=\"keyword\">double</span> R = a / <span class=\"built_in\">sin</span>(A) / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"comment\">//转化为圆心角</span></div><div class=\"line\">    A *= <span class=\"number\">2</span>, B *= <span class=\"number\">2</span>, C *= <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"comment\">//cout&lt;&lt;A&lt;&lt;\" \"&lt;&lt;B&lt;&lt;\" \"&lt;&lt;C&lt;&lt;\" \"&lt;&lt;R&lt;&lt;endl;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> n;</div><div class=\"line\">    <span class=\"keyword\">for</span> (n = <span class=\"number\">3</span>; n &lt;= <span class=\"number\">100</span>; n++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (check(n)) <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//cout&lt;&lt;n&lt;&lt;endl;</span></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.10lf\\n\"</span>, cal(n, R));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-11-2 AC</li>\n</ul>\n","categories":["ACM"],"tags":["几何"]},{"title":"POJ 3225 Help with Intervals（线段树）","url":"http://yoursite.com/2014/10/31/poj 3225 线段树/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://poj.org/problem?id=3225\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=3225</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>规定集合的交并补差等操作：<br><img src=\"http://siofive.qiniudn.com/poj 3225_1.png\" alt=\"\"><br>现在给定一个区间S,范围为[0, 65535],一开始全为0。<br>可以对该集合进行下面五种操作，问最后操作之后有哪些区间为1<br><img src=\"http://siofive.qiniudn.com/poj 3225_2.png\" alt=\"\"><br>其中T可以有4种形式：$(a,b) (a,b] [a, b) [a, b]$<br>数据范围：$(a, b ∈ Z, 0 ≤ a ≤ b ≤ 65,535)$</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>U：把区间$[l,r]$置为1<br>I：把$[-∞,l),(r,∞]$置成0<br>D：把区间$[l,r]$置为0<br>C：把$[-∞,l),(r,∞]$置成0, 且$[l,r]$区间0/1互换<br>S：$[l,r]$区间0/1互换<br>成段替换比较好实现，互换的操作可以用一个XOR[]数组来进行标记。需要注意的是，如果该区间又有替换又有互换的话，只需要做等价的替换操作即可。<br>将区间扩大两倍，就能够处理开、闭区间。<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">    U：把区间[l,r]置为1</span></div><div class=\"line\"><span class=\"comment\">    I：把[-∞,l)(r,∞]置成0</span></div><div class=\"line\"><span class=\"comment\">    D：把区间[l,r]置为0</span></div><div class=\"line\"><span class=\"comment\">    C：把[-∞,l)(r,∞]置成0, 且[l,r]区间0/1互换</span></div><div class=\"line\"><span class=\"comment\">    S；[l,r]区间0/1互换</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m, rt &lt;&lt; 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">65535</span> * <span class=\"number\">2</span> + <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> col[maxn &lt;&lt; <span class=\"number\">2</span>], XOR[maxn &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> has[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FXOR</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (col[rt] != <span class=\"number\">-1</span>) col[rt] ^= <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> XOR[rt] ^= <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (col[rt] != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        col[rt &lt;&lt; <span class=\"number\">1</span>] = col[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] = col[rt];</div><div class=\"line\">        XOR[rt &lt;&lt; <span class=\"number\">1</span>] = XOR[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        col[rt] = <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (XOR[rt]) &#123;</div><div class=\"line\">        FXOR(rt &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">        FXOR(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>);</div><div class=\"line\">        XOR[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">char</span> op, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"string\">'U'</span>) col[rt] = <span class=\"number\">1</span>, XOR[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"string\">'D'</span>) col[rt] = <span class=\"number\">0</span>, XOR[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"string\">'C'</span> || op == <span class=\"string\">'S'</span>) FXOR(rt);</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pushdown(rt);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) update(op, L, R, lson);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"string\">'I'</span> || op == <span class=\"string\">'C'</span>) col[rt &lt;&lt; <span class=\"number\">1</span>] = XOR[rt &lt;&lt; <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) update(op, L, R, rson);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"string\">'I'</span> || op == <span class=\"string\">'C'</span>) col[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] = XOR[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (col[rt] == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt;= r; i++) has[i] = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (col[rt] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) <span class=\"keyword\">return</span> ;</div><div class=\"line\">    pushdown(rt);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    query(lson);</div><div class=\"line\">    query(rson);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    col[<span class=\"number\">1</span>] = XOR[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> op, lq, rq;</div><div class=\"line\">    <span class=\"keyword\">int</span> l, r;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c %c%d,%d%c\\n\"</span>, &amp;op, &amp;lq, &amp;l, &amp;r, &amp;rq)) &#123;</div><div class=\"line\">        l &lt;&lt;= <span class=\"number\">1</span>, r &lt;&lt;= <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (lq == <span class=\"string\">'('</span>) l++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (rq == <span class=\"string\">')'</span>) r--;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l &gt; r) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (op == <span class=\"string\">'I'</span> || op == <span class=\"string\">'C'</span>) col[<span class=\"number\">1</span>] = XOR[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> update(op, l, r, <span class=\"number\">0</span>, maxn, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    query(<span class=\"number\">0</span>, maxn, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> st = <span class=\"number\">-1</span>, ed;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= maxn; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (has[i]) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (st == <span class=\"number\">-1</span>) st = i;</div><div class=\"line\">            ed = i;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (st != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (flag) <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</div><div class=\"line\">                flag = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c%d,%d%c\"</span>, st &amp; <span class=\"number\">1</span> ? <span class=\"string\">'('</span> : <span class=\"string\">'['</span>, st &gt;&gt; <span class=\"number\">1</span>, (ed + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>, ed &amp; <span class=\"number\">1</span> ? <span class=\"string\">')'</span> : <span class=\"string\">']'</span>);</div><div class=\"line\">                st = <span class=\"number\">-1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!flag) <span class=\"built_in\">puts</span>(<span class=\"string\">\"empty set\"</span>);</div><div class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>13585854    SIO__Five    3225    Accepted    2848K    1188MS    G++    2546B    2014-10-31 21:03:40</li>\n</ul>\n","categories":["ACM"],"tags":["数据结构","线段树"]},{"title":"POJ 2528 Mayor's posters（线段树）","url":"http://yoursite.com/2014/10/30/poj 2528 线段树/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://poj.org/problem?id=2528\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=2528</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有一块长度为$1e7$的板子，现在有$n$张海报，依次贴上板子，后面的海报会覆盖前面的海报。每张海报占据[l, r]的区间。<br>求最后能够在板子上看到多少张海报。<br>数据范围：$1{\\leq}n{\\leq}1e4$, $1{\\leq}l,r{\\leq}1e7$</p>\n<p>如图所示<br><img src=\"http://siofive.qiniudn.com/2528_1.jpg\" alt=\"\"><br>5<br>1 4<br>2 6<br>8 10<br>3 4<br>7 10<br>答案为4</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>由于区间范围很大，但海报数相对较少，所以可以将海报的坐标离散化。<br>离散化之后再用线段树维护。<br>线段树成段更新，update：成段修改    query：区间求种类数<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m, rt &lt;&lt; 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">11111</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> col[maxn &lt;&lt; <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> x[maxn &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> l[maxn], r[maxn], ans;</div><div class=\"line\"><span class=\"keyword\">bool</span> has[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (col[rt] != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        col[rt &lt;&lt; <span class=\"number\">1</span>] = col[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] = col[rt];</div><div class=\"line\">        col[rt] = <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        col[rt] = c;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pushdown(rt);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) update(L, R, c, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) update(L, R, c, rson);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (col[rt] != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!has[col[rt]]) ans++;</div><div class=\"line\">        has[col[rt]] = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) <span class=\"keyword\">return</span> ;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    query(lson);</div><div class=\"line\">    query(rson);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T, n;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, l + i, r + i);</div><div class=\"line\">            x[cnt++] = l[i], x[cnt++] = r[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(x, x + cnt);</div><div class=\"line\">        cnt = unique(x, x + cnt) - x;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(col, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(col));</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> a = lower_bound(x, x + cnt, l[i]) - x;</div><div class=\"line\">            <span class=\"keyword\">int</span> b = lower_bound(x, x + cnt, r[i]) - x;</div><div class=\"line\">            update(a, b, i, <span class=\"number\">0</span>, cnt, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(has, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(has));</div><div class=\"line\">        query(<span class=\"number\">0</span>, cnt, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>13582214    SIO__Five    2528    Accepted    1536K    63MS    G++    1718B    2014-10-30 20:42:27</li>\n</ul>\n","categories":["ACM"],"tags":["数据结构","线段树"]},{"title":"POJ 3468 A Simple Problem with Integers（线段树）","url":"http://yoursite.com/2014/10/29/poj 3468 线段树/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://poj.org/problem?id=3468\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=3468</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给出一个有$n$个元素的数组，元素一开始有初值。<br>现在有$q$次操作，每次操作有两个选择：<br>“C a b c”：将[a, b]的所有元素加上c<br>“Q a b”：查询[a, b]所有元素的和<br>数据范围：$1{\\leq}N,Q{\\leq}1e5$, $-1e9{\\leq}a_i{\\leq}1e9$, $-1e4{\\leq}c{\\leq}1e4$</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>线段树成段更新，update：成段增减    query：区间求和<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m, rt &lt;&lt; 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">111111</span>;</div><div class=\"line\">ll sum[maxn &lt;&lt; <span class=\"number\">2</span>], add[maxn &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    sum[rt] = sum[rt &lt;&lt; <span class=\"number\">1</span>] + sum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    add[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;sum[rt]);</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    build(lson);</div><div class=\"line\">    build(rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> m)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (add[rt]) &#123;</div><div class=\"line\">        add[rt &lt;&lt; <span class=\"number\">1</span>] += add[rt];</div><div class=\"line\">        add[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += add[rt];</div><div class=\"line\">        sum[rt &lt;&lt; <span class=\"number\">1</span>] += (m - (m &gt;&gt; <span class=\"number\">1</span>)) * add[rt];</div><div class=\"line\">        sum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += (m &gt;&gt; <span class=\"number\">1</span>) * add[rt];</div><div class=\"line\">        add[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        add[rt] += c;</div><div class=\"line\">        sum[rt] += c * (r - l + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pushdown(rt, r - l + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) update(L, R, c, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) update(L, R, c, rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class=\"keyword\">return</span> sum[rt];</div><div class=\"line\">    pushdown(rt, r - l + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    ll ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) ret += query(L, R, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) ret += query(L, R, rson);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, q;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch[<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> l, r, c;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</div><div class=\"line\">    build(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span>(q--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, ch);</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;l, &amp;r);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(l, r, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>));</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;c);</div><div class=\"line\">            update(l, r, c, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>13579810    SIO__Five    3468    Accepted    4776K    2579MS    G++    1770B    2014-10-29 23:52:08</li>\n</ul>\n","categories":["ACM"],"tags":["数据结构","线段树"]},{"title":"HDU 1698 Just a Hook（线段树）","url":"http://yoursite.com/2014/10/29/hdu 1698 Just a Hook/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1698\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=1698</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给出一个有$n$个元素的数组，有$q$次操作：<br>    set(L, R, v)把区间{L, R}的值全部修改为 $v$(1,2,3)。<br>一开始所有值都为1。求最后所有元素的和。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>线段树成段更新，要理解lazy的使用。update：成段替换<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson l, m, rt &lt;&lt; 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">111111</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> sum[maxn &lt;&lt; <span class=\"number\">2</span>], col[maxn &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    sum[rt] = sum[rt &lt;&lt; <span class=\"number\">1</span>] + sum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (col[rt]) &#123;</div><div class=\"line\">        col[rt &lt;&lt; <span class=\"number\">1</span>] = col[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] = col[rt];</div><div class=\"line\">        sum[rt &lt;&lt; <span class=\"number\">1</span>] = (m - (m &gt;&gt; <span class=\"number\">1</span>)) * col[rt];</div><div class=\"line\">        sum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] = (m &gt;&gt; <span class=\"number\">1</span>) * col[rt];</div><div class=\"line\">        col[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    col[rt] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</div><div class=\"line\">        sum[rt] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    build(lson);</div><div class=\"line\">    build(rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        col[rt] = c;</div><div class=\"line\">        sum[rt] = (r - l + <span class=\"number\">1</span>) * c;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pushdown(r - l + <span class=\"number\">1</span>, rt);</div><div class=\"line\">    <span class=\"keyword\">int</span> m = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= m) update(L, R, c, lson);</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; m) update(L, R, c, rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T, n, q;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cas = <span class=\"number\">1</span>; cas &lt;= T; cas++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</div><div class=\"line\">        build(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> x, y, z;</div><div class=\"line\">        <span class=\"keyword\">while</span>(q--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;x, &amp;y, &amp;z);</div><div class=\"line\">            update(x, y, z, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case %d: The total value of the hook is %d.\\n\"</span>, cas, sum[<span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>12011666    2014-10-29 22:01:13    Accepted    1698    687MS    2288K    1458 B    C++    SIO__Five</li>\n</ul>\n","categories":["ACM"],"tags":["数据结构","线段树"]},{"title":"UVa 1354 天平难题 (搜索)","url":"http://yoursite.com/2014/10/28/UVa 1354 天平难题 搜索/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://acm.bnu.edu.cn/v3/problem_show.php?pid=36971\" target=\"_blank\" rel=\"external\">http://acm.bnu.edu.cn/v3/problem_show.php?pid=36971</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给出房间的宽度$r$和$s$个挂坠的重量$w_i$。设计一个尽量宽（但宽度不能超过房间宽度$r$）的天平，挂着所有挂坠。<br>天平由一些长度为1的木棍组成。木棍的每一端要么挂着一个挂坠，要么挂着另外一个木棍。<br>挂坠的宽度忽略不计，且不同的子天平可以相互重叠。<br>数据范围：$(0&lt;r&lt;10, 1{\\leq}s{\\leq}6, 1{\\leq}w_i{\\leq}1000)$</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>把挂坠和木棍都作为结点，则一个天平对应一棵二叉树，可以容易的算出对应的宽度。<br>本题的核心任务就是枚举二叉树，采用回溯法即可。<br>枚举的方式是自顶向下构造，每次枚举左子树用到哪个子集，则右子树就是剩下的子集。</p>\n<h1 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h1><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">int</span> subset = (<span class=\"number\">1</span> &lt;&lt; <span class=\"built_in\">n</span>) - <span class=\"number\">1</span>; //全集</div><div class=\"line\">for (<span class=\"built_in\">int</span> <span class=\"built_in\">left</span> = (subset - <span class=\"number\">1</span>) &amp; subset; <span class=\"built_in\">left</span>; <span class=\"built_in\">left</span> = (<span class=\"built_in\">left</span> - <span class=\"number\">1</span>) &amp; subset) &#123;</div><div class=\"line\">\t<span class=\"built_in\">int</span> <span class=\"built_in\">right</span> = subset ^ <span class=\"built_in\">left</span>;  //<span class=\"built_in\">left</span>和<span class=\"built_in\">right</span>便是两个对应的子集</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">double</span> L, R;</div><div class=\"line\">    node() : L(<span class=\"number\">0</span>), R(<span class=\"number\">0</span>) &#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">1</span> &lt;&lt; N], n;</div><div class=\"line\"><span class=\"keyword\">double</span> w[N], sum[<span class=\"number\">1</span> &lt;&lt; N], r;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;node&gt; tree[<span class=\"number\">1</span> &lt;&lt; N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> subset)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (vis[subset]) <span class=\"keyword\">return</span> ;</div><div class=\"line\">    vis[subset] = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">bool</span> have_child = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> left = (subset - <span class=\"number\">1</span>) &amp; subset; left; left = (left - <span class=\"number\">1</span>) &amp; subset) &#123;</div><div class=\"line\">        have_child = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> right = subset ^ left;</div><div class=\"line\">        <span class=\"keyword\">double</span> d1 = sum[right] / sum[subset];</div><div class=\"line\">        <span class=\"keyword\">double</span> d2 = sum[left] / sum[subset];</div><div class=\"line\">        dfs(left); dfs(right);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tree[left].size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tree[right].size(); j++) &#123;</div><div class=\"line\">                node t;</div><div class=\"line\">                t.L = max(tree[left][i].L + d1, tree[right][j].L - d2);</div><div class=\"line\">                t.R = max(tree[right][j].R + d2, tree[left][i].R - d1);</div><div class=\"line\">                <span class=\"keyword\">if</span> (t.L + t.R &lt; r) tree[subset].push_back(t);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!have_child) tree[subset].push_back(node());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%d\"</span>, &amp;r, &amp;n);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>, w + i);</div><div class=\"line\">        <span class=\"keyword\">int</span> tot = <span class=\"number\">1</span> &lt;&lt; n;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tot; i++) &#123;</div><div class=\"line\">            sum[i] = <span class=\"number\">0</span>;</div><div class=\"line\">            tree[i].clear();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">                <span class=\"keyword\">if</span> (i &amp; (<span class=\"number\">1</span> &lt;&lt; j)) sum[i] += w[j];</div><div class=\"line\">        &#125;</div><div class=\"line\">        tot--;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</div><div class=\"line\">        dfs(tot);</div><div class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tree[tot].size(); i++)</div><div class=\"line\">            ans = max(ans, tree[tot][i].L + tree[tot][i].R);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.10lf\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>29 ms        1712 B    2014-10-28 17:51:13</li>\n</ul>\n","categories":["ACM","算法竞赛入门经典"],"tags":["搜索","枚举二叉树"]},{"title":"Project Euler 13 Large sum（大数）","url":"http://yoursite.com/2014/10/28/Project Euler 13/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=13\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=13</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定100个50位的大数，求和的前10位</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>大数<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> ra = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ten[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, ra, ra * ra, ra*ra * ra&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> radix = ra * ra * ra * ra;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> NV = <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">integer</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> d[NV];</div><div class=\"line\">    integer() &#123;</div><div class=\"line\">        *<span class=\"keyword\">this</span> = integer(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    integer(<span class=\"keyword\">int</span> x) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NV; i++) d[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!x) d[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">            d[++d[<span class=\"number\">0</span>]] = x % radix;</div><div class=\"line\">            x /= radix;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    integer(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NV; i++) d[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!x) d[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">            d[++d[<span class=\"number\">0</span>]] = x % radix;</div><div class=\"line\">            x /= radix;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    integer(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> s[]) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(s), i, j, k;</div><div class=\"line\">        d[<span class=\"number\">0</span>] = (len - <span class=\"number\">1</span>) / <span class=\"number\">4</span> + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; NV; i++) d[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            j = (len - i - <span class=\"number\">1</span>) / <span class=\"number\">4</span> + <span class=\"number\">1</span>;</div><div class=\"line\">            k = (len - i - <span class=\"number\">1</span>) % <span class=\"number\">4</span>;</div><div class=\"line\">            d[j] += ten[k] * (s[i] - <span class=\"string\">'0'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(d[<span class=\"number\">0</span>] &gt; <span class=\"number\">1</span> &amp;&amp; d[d[<span class=\"number\">0</span>]] == <span class=\"number\">0</span>) d[<span class=\"number\">0</span>]--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">tostring</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">string</span> s;</div><div class=\"line\">        <span class=\"keyword\">int</span> i, j, temp;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">3</span>; i &gt;= <span class=\"number\">1</span>; i--) <span class=\"keyword\">if</span> (d[d[<span class=\"number\">0</span>]] &gt;= ten[i]) <span class=\"keyword\">break</span>;</div><div class=\"line\">        temp = d[d[<span class=\"number\">0</span>]];</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = i; j &gt;= <span class=\"number\">0</span>; j--) &#123;</div><div class=\"line\">            s += (<span class=\"keyword\">char</span>) (temp / ten[j] + <span class=\"string\">'0'</span>);</div><div class=\"line\">            temp %= ten[j];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = d[<span class=\"number\">0</span>] - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            temp = d[i];</div><div class=\"line\">            <span class=\"keyword\">for</span> (j = <span class=\"number\">3</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</div><div class=\"line\">                s += (<span class=\"keyword\">char</span>) (temp / ten[j] + <span class=\"string\">'0'</span>);</div><div class=\"line\">                temp %= ten[j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> s;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; d, mid1[<span class=\"number\">15</span>];</div><div class=\"line\">integer <span class=\"keyword\">operator</span> +(<span class=\"keyword\">const</span> integer &amp;a, <span class=\"keyword\">const</span> integer &amp;b) &#123;</div><div class=\"line\">    integer c;</div><div class=\"line\">    c.d[<span class=\"number\">0</span>] = max(a.d[<span class=\"number\">0</span>], b.d[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">int</span> i, x = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= c.d[<span class=\"number\">0</span>]; i++) &#123;</div><div class=\"line\">        x += a.d[i] + b.d[i];</div><div class=\"line\">        c.d[i] = x % radix;</div><div class=\"line\">        x /= radix;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        c.d[++c.d[<span class=\"number\">0</span>]] = x % radix;</div><div class=\"line\">        x /= radix;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">110</span>][<span class=\"number\">60</span>] = &#123;</div><div class=\"line\">    <span class=\"string\">\"37107287533902102798797998220837590246510135740250\"</span>,</div><div class=\"line\">    <span class=\"string\">\"46376937677490009712648124896970078050417018260538\"</span>,</div><div class=\"line\">    <span class=\"string\">\"74324986199524741059474233309513058123726617309629\"</span>,</div><div class=\"line\">    <span class=\"string\">\"91942213363574161572522430563301811072406154908250\"</span>,</div><div class=\"line\">    <span class=\"string\">\"23067588207539346171171980310421047513778063246676\"</span>,</div><div class=\"line\">    <span class=\"string\">\"89261670696623633820136378418383684178734361726757\"</span>,</div><div class=\"line\">    <span class=\"string\">\"28112879812849979408065481931592621691275889832738\"</span>,</div><div class=\"line\">    <span class=\"string\">\"44274228917432520321923589422876796487670272189318\"</span>,</div><div class=\"line\">    <span class=\"string\">\"47451445736001306439091167216856844588711603153276\"</span>,</div><div class=\"line\">    <span class=\"string\">\"70386486105843025439939619828917593665686757934951\"</span>,</div><div class=\"line\">    <span class=\"string\">\"62176457141856560629502157223196586755079324193331\"</span>,</div><div class=\"line\">    <span class=\"string\">\"64906352462741904929101432445813822663347944758178\"</span>,</div><div class=\"line\">    <span class=\"string\">\"92575867718337217661963751590579239728245598838407\"</span>,</div><div class=\"line\">    <span class=\"string\">\"58203565325359399008402633568948830189458628227828\"</span>,</div><div class=\"line\">    <span class=\"string\">\"80181199384826282014278194139940567587151170094390\"</span>,</div><div class=\"line\">    <span class=\"string\">\"35398664372827112653829987240784473053190104293586\"</span>,</div><div class=\"line\">    <span class=\"string\">\"86515506006295864861532075273371959191420517255829\"</span>,</div><div class=\"line\">    <span class=\"string\">\"71693888707715466499115593487603532921714970056938\"</span>,</div><div class=\"line\">    <span class=\"string\">\"54370070576826684624621495650076471787294438377604\"</span>,</div><div class=\"line\">    <span class=\"string\">\"53282654108756828443191190634694037855217779295145\"</span>,</div><div class=\"line\">    <span class=\"string\">\"36123272525000296071075082563815656710885258350721\"</span>,</div><div class=\"line\">    <span class=\"string\">\"45876576172410976447339110607218265236877223636045\"</span>,</div><div class=\"line\">    <span class=\"string\">\"17423706905851860660448207621209813287860733969412\"</span>,</div><div class=\"line\">    <span class=\"string\">\"81142660418086830619328460811191061556940512689692\"</span>,</div><div class=\"line\">    <span class=\"string\">\"51934325451728388641918047049293215058642563049483\"</span>,</div><div class=\"line\">    <span class=\"string\">\"62467221648435076201727918039944693004732956340691\"</span>,</div><div class=\"line\">    <span class=\"string\">\"15732444386908125794514089057706229429197107928209\"</span>,</div><div class=\"line\">    <span class=\"string\">\"55037687525678773091862540744969844508330393682126\"</span>,</div><div class=\"line\">    <span class=\"string\">\"18336384825330154686196124348767681297534375946515\"</span>,</div><div class=\"line\">    <span class=\"string\">\"80386287592878490201521685554828717201219257766954\"</span>,</div><div class=\"line\">    <span class=\"string\">\"78182833757993103614740356856449095527097864797581\"</span>,</div><div class=\"line\">    <span class=\"string\">\"16726320100436897842553539920931837441497806860984\"</span>,</div><div class=\"line\">    <span class=\"string\">\"48403098129077791799088218795327364475675590848030\"</span>,</div><div class=\"line\">    <span class=\"string\">\"87086987551392711854517078544161852424320693150332\"</span>,</div><div class=\"line\">    <span class=\"string\">\"59959406895756536782107074926966537676326235447210\"</span>,</div><div class=\"line\">    <span class=\"string\">\"69793950679652694742597709739166693763042633987085\"</span>,</div><div class=\"line\">    <span class=\"string\">\"41052684708299085211399427365734116182760315001271\"</span>,</div><div class=\"line\">    <span class=\"string\">\"65378607361501080857009149939512557028198746004375\"</span>,</div><div class=\"line\">    <span class=\"string\">\"35829035317434717326932123578154982629742552737307\"</span>,</div><div class=\"line\">    <span class=\"string\">\"94953759765105305946966067683156574377167401875275\"</span>,</div><div class=\"line\">    <span class=\"string\">\"88902802571733229619176668713819931811048770190271\"</span>,</div><div class=\"line\">    <span class=\"string\">\"25267680276078003013678680992525463401061632866526\"</span>,</div><div class=\"line\">    <span class=\"string\">\"36270218540497705585629946580636237993140746255962\"</span>,</div><div class=\"line\">    <span class=\"string\">\"24074486908231174977792365466257246923322810917141\"</span>,</div><div class=\"line\">    <span class=\"string\">\"91430288197103288597806669760892938638285025333403\"</span>,</div><div class=\"line\">    <span class=\"string\">\"34413065578016127815921815005561868836468420090470\"</span>,</div><div class=\"line\">    <span class=\"string\">\"23053081172816430487623791969842487255036638784583\"</span>,</div><div class=\"line\">    <span class=\"string\">\"11487696932154902810424020138335124462181441773470\"</span>,</div><div class=\"line\">    <span class=\"string\">\"63783299490636259666498587618221225225512486764533\"</span>,</div><div class=\"line\">    <span class=\"string\">\"67720186971698544312419572409913959008952310058822\"</span>,</div><div class=\"line\">    <span class=\"string\">\"95548255300263520781532296796249481641953868218774\"</span>,</div><div class=\"line\">    <span class=\"string\">\"76085327132285723110424803456124867697064507995236\"</span>,</div><div class=\"line\">    <span class=\"string\">\"37774242535411291684276865538926205024910326572967\"</span>,</div><div class=\"line\">    <span class=\"string\">\"23701913275725675285653248258265463092207058596522\"</span>,</div><div class=\"line\">    <span class=\"string\">\"29798860272258331913126375147341994889534765745501\"</span>,</div><div class=\"line\">    <span class=\"string\">\"18495701454879288984856827726077713721403798879715\"</span>,</div><div class=\"line\">    <span class=\"string\">\"38298203783031473527721580348144513491373226651381\"</span>,</div><div class=\"line\">    <span class=\"string\">\"34829543829199918180278916522431027392251122869539\"</span>,</div><div class=\"line\">    <span class=\"string\">\"40957953066405232632538044100059654939159879593635\"</span>,</div><div class=\"line\">    <span class=\"string\">\"29746152185502371307642255121183693803580388584903\"</span>,</div><div class=\"line\">    <span class=\"string\">\"41698116222072977186158236678424689157993532961922\"</span>,</div><div class=\"line\">    <span class=\"string\">\"62467957194401269043877107275048102390895523597457\"</span>,</div><div class=\"line\">    <span class=\"string\">\"23189706772547915061505504953922979530901129967519\"</span>,</div><div class=\"line\">    <span class=\"string\">\"86188088225875314529584099251203829009407770775672\"</span>,</div><div class=\"line\">    <span class=\"string\">\"11306739708304724483816533873502340845647058077308\"</span>,</div><div class=\"line\">    <span class=\"string\">\"82959174767140363198008187129011875491310547126581\"</span>,</div><div class=\"line\">    <span class=\"string\">\"97623331044818386269515456334926366572897563400500\"</span>,</div><div class=\"line\">    <span class=\"string\">\"42846280183517070527831839425882145521227251250327\"</span>,</div><div class=\"line\">    <span class=\"string\">\"55121603546981200581762165212827652751691296897789\"</span>,</div><div class=\"line\">    <span class=\"string\">\"32238195734329339946437501907836945765883352399886\"</span>,</div><div class=\"line\">    <span class=\"string\">\"75506164965184775180738168837861091527357929701337\"</span>,</div><div class=\"line\">    <span class=\"string\">\"62177842752192623401942399639168044983993173312731\"</span>,</div><div class=\"line\">    <span class=\"string\">\"32924185707147349566916674687634660915035914677504\"</span>,</div><div class=\"line\">    <span class=\"string\">\"99518671430235219628894890102423325116913619626622\"</span>,</div><div class=\"line\">    <span class=\"string\">\"73267460800591547471830798392868535206946944540724\"</span>,</div><div class=\"line\">    <span class=\"string\">\"76841822524674417161514036427982273348055556214818\"</span>,</div><div class=\"line\">    <span class=\"string\">\"97142617910342598647204516893989422179826088076852\"</span>,</div><div class=\"line\">    <span class=\"string\">\"87783646182799346313767754307809363333018982642090\"</span>,</div><div class=\"line\">    <span class=\"string\">\"10848802521674670883215120185883543223812876952786\"</span>,</div><div class=\"line\">    <span class=\"string\">\"71329612474782464538636993009049310363619763878039\"</span>,</div><div class=\"line\">    <span class=\"string\">\"62184073572399794223406235393808339651327408011116\"</span>,</div><div class=\"line\">    <span class=\"string\">\"66627891981488087797941876876144230030984490851411\"</span>,</div><div class=\"line\">    <span class=\"string\">\"60661826293682836764744779239180335110989069790714\"</span>,</div><div class=\"line\">    <span class=\"string\">\"85786944089552990653640447425576083659976645795096\"</span>,</div><div class=\"line\">    <span class=\"string\">\"66024396409905389607120198219976047599490197230297\"</span>,</div><div class=\"line\">    <span class=\"string\">\"64913982680032973156037120041377903785566085089252\"</span>,</div><div class=\"line\">    <span class=\"string\">\"16730939319872750275468906903707539413042652315011\"</span>,</div><div class=\"line\">    <span class=\"string\">\"94809377245048795150954100921645863754710598436791\"</span>,</div><div class=\"line\">    <span class=\"string\">\"78639167021187492431995700641917969777599028300699\"</span>,</div><div class=\"line\">    <span class=\"string\">\"15368713711936614952811305876380278410754449733078\"</span>,</div><div class=\"line\">    <span class=\"string\">\"40789923115535562561142322423255033685442488917353\"</span>,</div><div class=\"line\">    <span class=\"string\">\"44889911501440648020369068063960672322193204149535\"</span>,</div><div class=\"line\">    <span class=\"string\">\"41503128880339536053299340368006977710650566631954\"</span>,</div><div class=\"line\">    <span class=\"string\">\"81234880673210146739058568557934581403627822703280\"</span>,</div><div class=\"line\">    <span class=\"string\">\"82616570773948327592232845941706525094512325230608\"</span>,</div><div class=\"line\">    <span class=\"string\">\"22918802058777319719839450180888072429661980811197\"</span>,</div><div class=\"line\">    <span class=\"string\">\"77158542502016545090413245809786882778948721859617\"</span>,</div><div class=\"line\">    <span class=\"string\">\"72107838435069186155435662884062257473692284509516\"</span>,</div><div class=\"line\">    <span class=\"string\">\"20849603980134001723930671666823555245252804609722\"</span>,</div><div class=\"line\">    <span class=\"string\">\"53503534226472524250874054075591789781264330331690\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">integer <span class=\"title\">A</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) A = A + integer(str[i]);</div><div class=\"line\">    <span class=\"built_in\">string</span> s = A.tostring();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) <span class=\"built_in\">cout</span>&lt;&lt;s[i];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 14:20.23</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":["大数"]},{"title":"Project Euler 12 Highly divisible triangular number（质因数分解）","url":"http://yoursite.com/2014/10/28/Project Euler 12/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=12\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=12</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>规定$f(n)=1+2+\\cdots+n$<br>求最小的$f(n)$使得其因子个数超过500</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>$N=2^{a_1}3^{a_2}5^{a_3}\\cdots$ 的因子个数为 $(a_1+1)(a_2+1)(a_3+1)\\cdots$<br>而$f(n)=\\frac{n(1+n)}{2}$ ，且相邻的两个数一定互质，所以$f(n)$的因子个数 = $\\frac{n}{2}$的因子个数 $*(1+n)$的因子个数（n为偶数）</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1111111</span></div><div class=\"line\"><span class=\"keyword\">int</span> a[maxn], b[maxn], tot = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">factor</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> b[], <span class=\"keyword\">int</span> &amp;tot)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp, now;</div><div class=\"line\">    tmp = (<span class=\"keyword\">int</span>)(<span class=\"built_in\">sqrt</span>(n) + <span class=\"number\">1</span>);</div><div class=\"line\">    tot = <span class=\"number\">0</span>;</div><div class=\"line\">    now = n;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= tmp; i++) <span class=\"keyword\">if</span> (now % i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        a[tot] = i, b[tot] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(now % i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            b[tot]++;</div><div class=\"line\">            now /= i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        tot++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (now != <span class=\"number\">1</span>) a[tot] = now, b[tot++] = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> f[maxn] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    f[x] = <span class=\"number\">1</span>;</div><div class=\"line\">    factor(x, a, b, tot);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tot; i++) f[x] *= b[i] + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">    f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>, f[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) x = i / <span class=\"number\">2</span>, y = i + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> x = (i + <span class=\"number\">1</span>) / <span class=\"number\">2</span>, y = i;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!f[x]) get(x);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!f[y]) get(y);</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = f[x] * f[y];</div><div class=\"line\">        <span class=\"keyword\">if</span> (ans &gt; <span class=\"number\">500</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;(x * y)&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 13:54.49</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":["数论","质因数分解"]},{"title":"Project Euler 11 Largest product in a grid（暴力）","url":"http://yoursite.com/2014/10/28/Project Euler 11/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=11\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=11</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个$20*20$的方格，求在同一条直线上（横、纵、对角）的四个数的最大乘积</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>直接暴力找就行<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include&lt;iostream&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;cmath&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"comment\">#include&lt;algorithm&gt;</span></div><div class=\"line\">using namespace std;</div><div class=\"line\">char str[] = &#123;\"08<span class=\"number\"> 02 </span>22<span class=\"number\"> 97 </span>38<span class=\"number\"> 15 </span>00<span class=\"number\"> 40 </span>00<span class=\"number\"> 75 </span>04<span class=\"number\"> 05 </span>07<span class=\"number\"> 78 </span>52<span class=\"number\"> 12 </span>50<span class=\"number\"> 77 </span>91<span class=\"number\"> 08 </span>49<span class=\"number\"> 49 </span>99<span class=\"number\"> 40 </span>17<span class=\"number\"> 81 </span>18<span class=\"number\"> 57 </span>60<span class=\"number\"> 87 </span>17<span class=\"number\"> 40 </span>98<span class=\"number\"> 43 </span>69<span class=\"number\"> 48 </span>04<span class=\"number\"> 56 </span>62<span class=\"number\"> 00 </span>81<span class=\"number\"> 49 </span>31<span class=\"number\"> 73 </span>55<span class=\"number\"> 79 </span>14<span class=\"number\"> 29 </span>93<span class=\"number\"> 71 </span>40<span class=\"number\"> 67 </span>53<span class=\"number\"> 88 </span>30<span class=\"number\"> 03 </span>49<span class=\"number\"> 13 </span>36<span class=\"number\"> 65 </span>52<span class=\"number\"> 70 </span>95<span class=\"number\"> 23 </span>04<span class=\"number\"> 60 </span>11<span class=\"number\"> 42 </span>69<span class=\"number\"> 24 </span>68<span class=\"number\"> 56 </span>01<span class=\"number\"> 32 </span>56<span class=\"number\"> 71 </span>37<span class=\"number\"> 02 </span>36<span class=\"number\"> 91 </span>22<span class=\"number\"> 31 </span>16<span class=\"number\"> 71 </span>51<span class=\"number\"> 67 </span>63<span class=\"number\"> 89 </span>41<span class=\"number\"> 92 </span>36<span class=\"number\"> 54 </span>22<span class=\"number\"> 40 </span>40<span class=\"number\"> 28 </span>66<span class=\"number\"> 33 </span>13<span class=\"number\"> 80 </span>24<span class=\"number\"> 47 </span>32<span class=\"number\"> 60 </span>99<span class=\"number\"> 03 </span>45<span class=\"number\"> 02 </span>44<span class=\"number\"> 75 </span>33<span class=\"number\"> 53 </span>78<span class=\"number\"> 36 </span>84<span class=\"number\"> 20 </span>35<span class=\"number\"> 17 </span>12<span class=\"number\"> 50 </span>32<span class=\"number\"> 98 </span>81<span class=\"number\"> 28 </span>64<span class=\"number\"> 23 </span>67<span class=\"number\"> 10 </span>26<span class=\"number\"> 38 </span>40<span class=\"number\"> 67 </span>59<span class=\"number\"> 54 </span>70<span class=\"number\"> 66 </span>18<span class=\"number\"> 38 </span>64<span class=\"number\"> 70 </span>67<span class=\"number\"> 26 </span>20<span class=\"number\"> 68 </span>02<span class=\"number\"> 62 </span>12<span class=\"number\"> 20 </span>95<span class=\"number\"> 63 </span>94<span class=\"number\"> 39 </span>63<span class=\"number\"> 08 </span>40<span class=\"number\"> 91 </span>66<span class=\"number\"> 49 </span>94<span class=\"number\"> 21 </span>24<span class=\"number\"> 55 </span>58<span class=\"number\"> 05 </span>66<span class=\"number\"> 73 </span>99<span class=\"number\"> 26 </span>97<span class=\"number\"> 17 </span>78<span class=\"number\"> 78 </span>96<span class=\"number\"> 83 </span>14<span class=\"number\"> 88 </span>34<span class=\"number\"> 89 </span>63<span class=\"number\"> 72 </span>21<span class=\"number\"> 36 </span>23<span class=\"number\"> 09 </span>75<span class=\"number\"> 00 </span>76<span class=\"number\"> 44 </span>20<span class=\"number\"> 45 </span>35<span class=\"number\"> 14 </span>00<span class=\"number\"> 61 </span>33<span class=\"number\"> 97 </span>34<span class=\"number\"> 31 </span>33<span class=\"number\"> 95 </span>78<span class=\"number\"> 17 </span>53<span class=\"number\"> 28 </span>22<span class=\"number\"> 75 </span>31<span class=\"number\"> 67 </span>15<span class=\"number\"> 94 </span>03<span class=\"number\"> 80 </span>04<span class=\"number\"> 62 </span>16<span class=\"number\"> 14 </span>09<span class=\"number\"> 53 </span>56<span class=\"number\"> 92 </span>16<span class=\"number\"> 39 </span>05<span class=\"number\"> 42 </span>96<span class=\"number\"> 35 </span>31<span class=\"number\"> 47 </span>55<span class=\"number\"> 58 </span>88<span class=\"number\"> 24 </span>00<span class=\"number\"> 17 </span>54<span class=\"number\"> 24 </span>36<span class=\"number\"> 29 </span>85<span class=\"number\"> 57 </span>86<span class=\"number\"> 56 </span>00<span class=\"number\"> 48 </span>35<span class=\"number\"> 71 </span>89<span class=\"number\"> 07 </span>05<span class=\"number\"> 44 </span>44<span class=\"number\"> 37 </span>44<span class=\"number\"> 60 </span>21<span class=\"number\"> 58 </span>51<span class=\"number\"> 54 </span>17<span class=\"number\"> 58 </span>19<span class=\"number\"> 80 </span>81<span class=\"number\"> 68 </span>05<span class=\"number\"> 94 </span>47<span class=\"number\"> 69 </span>28<span class=\"number\"> 73 </span>92<span class=\"number\"> 13 </span>86<span class=\"number\"> 52 </span>17<span class=\"number\"> 77 </span>04<span class=\"number\"> 89 </span>55<span class=\"number\"> 40 </span>04<span class=\"number\"> 52 </span>08<span class=\"number\"> 83 </span>97<span class=\"number\"> 35 </span>99<span class=\"number\"> 16 </span>07<span class=\"number\"> 97 </span>57<span class=\"number\"> 32 </span>16<span class=\"number\"> 26 </span>26<span class=\"number\"> 79 </span>33<span class=\"number\"> 27 </span>98<span class=\"number\"> 66 </span>88<span class=\"number\"> 36 </span>68<span class=\"number\"> 87 </span>57<span class=\"number\"> 62 </span>20<span class=\"number\"> 72 </span>03<span class=\"number\"> 46 </span>33<span class=\"number\"> 67 </span>46<span class=\"number\"> 55 </span>12<span class=\"number\"> 32 </span>63<span class=\"number\"> 93 </span>53<span class=\"number\"> 69 </span>04<span class=\"number\"> 42 </span>16<span class=\"number\"> 73 </span>38<span class=\"number\"> 25 </span>39<span class=\"number\"> 11 </span>24<span class=\"number\"> 94 </span>72<span class=\"number\"> 18 </span>08<span class=\"number\"> 46 </span>29<span class=\"number\"> 32 </span>40<span class=\"number\"> 62 </span>76<span class=\"number\"> 36 </span>20<span class=\"number\"> 69 </span>36<span class=\"number\"> 41 </span>72<span class=\"number\"> 30 </span>23<span class=\"number\"> 88 </span>34<span class=\"number\"> 62 </span>99<span class=\"number\"> 69 </span>82<span class=\"number\"> 67 </span>59<span class=\"number\"> 85 </span>74<span class=\"number\"> 04 </span>36<span class=\"number\"> 16 </span>20<span class=\"number\"> 73 </span>35<span class=\"number\"> 29 </span>78<span class=\"number\"> 31 </span>90<span class=\"number\"> 01 </span>74<span class=\"number\"> 31 </span>49<span class=\"number\"> 71 </span>48<span class=\"number\"> 86 </span>81<span class=\"number\"> 16 </span>23<span class=\"number\"> 57 </span>05<span class=\"number\"> 54 </span>01<span class=\"number\"> 70 </span>54<span class=\"number\"> 71 </span>83<span class=\"number\"> 51 </span>54<span class=\"number\"> 69 </span>16<span class=\"number\"> 92 </span>33<span class=\"number\"> 48 </span>61<span class=\"number\"> 43 </span>52<span class=\"number\"> 01 </span>89<span class=\"number\"> 19 </span>67 48\"&#125;;</div><div class=\"line\">int a[25][25];</div><div class=\"line\">int main () &#123;</div><div class=\"line\">    for (int i = 0; i &lt; 20; i++) &#123;</div><div class=\"line\">        for (int j = 0; j &lt; 20; j++) &#123;</div><div class=\"line\">            int k = i *<span class=\"number\"> 60 </span>+ j * 3;</div><div class=\"line\">            a[i][j] = (str[k] - '0') *<span class=\"number\"> 10 </span>+ str[k + 1] - '0';</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int mx = 0;</div><div class=\"line\">    int dx[4] = &#123;1, 1, 0, -1&#125;;</div><div class=\"line\">    int dy[4] = &#123;0, 1, 1, 1&#125;;</div><div class=\"line\">    for (int i = 0; i &lt; 20; i++) &#123;</div><div class=\"line\">        for (int j = 0; j &lt; 20; j++) &#123;</div><div class=\"line\">            for (int k = 0; k &lt; 4; k++) &#123;</div><div class=\"line\">                int ok = 1;</div><div class=\"line\">                int x = i, y = j, now = a[x][y];</div><div class=\"line\">                for (int l = 0; l &lt; 3; l++) &#123;</div><div class=\"line\">                    int tx = x + dx[k], ty = y + dy[k];</div><div class=\"line\">                    if (!(0 &lt;= tx &amp;&amp; tx &lt;<span class=\"number\"> 20 </span>&amp;&amp;<span class=\"number\"> 0 </span>&lt;= ty &amp;&amp; ty &lt; 20)) &#123;</div><div class=\"line\">                        ok = 0;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    now *= a[tx][ty];</div><div class=\"line\">                    x = tx, y = ty;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (ok) mx = max(now, mx);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    cout&lt;&lt;mx&lt;&lt;endl;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 12:13.31</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":[]},{"title":"Project Euler 10 Summation of primes（线性筛素数）","url":"http://yoursite.com/2014/10/28/Project Euler 10/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=10\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=10</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>求所有小于2000000的素数和</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>线性筛素数<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 2000010</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxn], valid[maxn], tot = <span class=\"number\">0</span>;</div><div class=\"line\">ll sum = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> &amp;tot, <span class=\"keyword\">int</span> ans[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!valid[i]) ans[tot++] = i, sum += i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot &amp;&amp; i * ans[j] &lt;= n; j++) &#123;</div><div class=\"line\">            valid[i * ans[j]] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i % ans[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    sum = <span class=\"number\">0</span>;</div><div class=\"line\">    getPrime(<span class=\"number\">2000000</span>, tot, ans);</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;sum&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 12:03.18</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":["线性筛素数","数论"]},{"title":"Project Euler 9 Special Pythagorean triplet（枚举）","url":"http://yoursite.com/2014/10/27/Project Euler 9/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=9\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=9</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>$a^2+b^2=c^2$<br>$a+b+c=1000$<br>且$a&lt;b&lt;c$<br>求$abc$</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>直接枚举a,b,c即可<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000</span> / <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= (<span class=\"number\">1000</span> - i) / <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> k = <span class=\"number\">1000</span> - i - j;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i * i + j * j == k * k) &#123;</div><div class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;i * j * k &lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">                <span class=\"keyword\">return</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    work();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 11:46</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":[]},{"title":"Project Euler 8 Largest product in a series（暴力）","url":"http://yoursite.com/2014/10/27/Project Euler 8/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=8\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=8</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一串数字，求相邻13个数字相乘的最大值</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>直接枚举子段的开头，如果碰到0可以跳到0后面<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></div><div class=\"line\"><span class=\"keyword\">char</span> str[] = &#123;<span class=\"string\">\"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\"</span>&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ll mx = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span> - <span class=\"number\">13</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> o = <span class=\"number\">-1</span>;</div><div class=\"line\">        ll t = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i + <span class=\"number\">13</span> &gt; <span class=\"number\">1000</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">13</span>; j++) &#123;</div><div class=\"line\">            t = t * (str[i + j] - <span class=\"string\">'0'</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (str[i + j] == <span class=\"string\">'0'</span>) o = i + j;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mx = max(t, mx);</div><div class=\"line\">        <span class=\"keyword\">if</span> (o != <span class=\"number\">-1</span>) i = o;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;mx&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 10:10</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":[]},{"title":"Project Euler 7 10001st prime（筛素数）","url":"http://yoursite.com/2014/10/27/Project Euler 7/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=7\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=7</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>求第10001个素数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>采用线性筛素数，复杂度为O(N)<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000000</span></div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxn], valid[maxn], tot = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> &amp;tot, <span class=\"keyword\">int</span> ans[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!valid[i]) ans[tot++] = i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot &amp;&amp; i * ans[j] &lt;= n; j++) &#123;</div><div class=\"line\">            valid[i * ans[j]] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i % ans[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    getPrime(<span class=\"number\">999999</span>, tot, ans);</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans[<span class=\"number\">10000</span>]&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 09:36</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":["线性筛素数","数论"]},{"title":"Project Euler 6 Sum square difference（公式）","url":"http://yoursite.com/2014/10/27/Project Euler 6/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=6\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=6</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>$f(x) = 1^2 + 2^2 + \\cdots + n^2$<br>$g(x) = (1 + 2 + \\cdots + n)^2$<br>求$g(x)-f(x)$</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>$f(x) = \\frac{n(n+1)(2n+1)}{6}$<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">100</span>;</div><div class=\"line\">    ll sum = (<span class=\"number\">2</span> * n + <span class=\"number\">1</span>) * n * (n + <span class=\"number\">1</span>) / <span class=\"number\">6</span>;</div><div class=\"line\">    ll sq = (<span class=\"number\">1</span> + n) * n / <span class=\"number\">2</span>;</div><div class=\"line\">    sq *= sq;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;sq - sum&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 06:45</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":["公式"]},{"title":"Project Euler 5 Smallest multiple（gcd）","url":"http://yoursite.com/2014/10/27/Project Euler 5/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=5\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=5</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>求一个最小的整数，使得该整数能够整除[1,20]的所有数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>lcm(a, b) = a * b / gcd(a, b)<br>要注意答案会超int<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ll ans = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">20</span>; i++) &#123;</div><div class=\"line\">        ans = ans * i / __gcd(ans, i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 06:20</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":[]},{"title":"Project Euler 4 Largest palindrome product（枚举）","url":"http://yoursite.com/2014/10/27/Project Euler 4/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=4\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=4</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>求最大的回文数，该数字由两个三位数相乘得到。</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>枚举两个三位数即可<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">string</span> s = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(x) &#123;</div><div class=\"line\">        s += x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>;</div><div class=\"line\">        x /= <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = s.length() - <span class=\"number\">1</span>; i &lt; j; i++, j--) <span class=\"keyword\">if</span> (s[i] != s[j]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> mx = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">999</span>; i &gt;= <span class=\"number\">100</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= <span class=\"number\">100</span>; j--) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> t = i * j;</div><div class=\"line\">            <span class=\"keyword\">if</span> (t &lt;= mx) <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (check(t)) mx = t;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;mx&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 03:41</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":[]},{"title":"Project Euler 3 Largest prime factor（pollard_rho大数分解）","url":"http://yoursite.com/2014/10/27/Project Euler 3/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=3\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=3</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个数（600851475143），求其最大的质因数</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>这个当然可以直接暴力搞定，不过用pollard_rho大数分解效率要高<br><a id=\"more\"></a></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">    给定一个数（600851475143），求其最大的质因数</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> S = <span class=\"number\">20</span>; <span class=\"comment\">//随机算法判定次数，S越大，判错概率越小</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算 (a*b)%c.   a,b都是long long的数，直接相乘可能溢出的</span></div><div class=\"line\"><span class=\"comment\">//  a,b,c &lt;2^63</span></div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">mult_mod</span><span class=\"params\">(ll a, ll b, ll c)</span> </span>&#123;</div><div class=\"line\">    a %= c;</div><div class=\"line\">    b %= c;</div><div class=\"line\">    ll ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(b) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(b &amp; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            ret += a;</div><div class=\"line\">            ret %= c;</div><div class=\"line\">        &#125;</div><div class=\"line\">        a &lt;&lt;= <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a &gt;= c)a %= c;</div><div class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算  x^n %c</span></div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll x, ll n, ll mod)</span> </span>&#123; <span class=\"comment\">//x^n%c</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> x % mod;</div><div class=\"line\">    x %= mod;</div><div class=\"line\">    ll tmp = x;</div><div class=\"line\">    ll ret = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(n) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) ret = mult_mod(ret, tmp, mod);</div><div class=\"line\">        tmp = mult_mod(tmp, tmp, mod);</div><div class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//以a为基,n-1=x*2^t      a^(n-1)=1(mod n)  验证n是不是合数</span></div><div class=\"line\"><span class=\"comment\">//一定是合数返回true,不一定返回false</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(ll a, ll n, ll x, ll t)</span> </span>&#123;</div><div class=\"line\">    ll ret = pow_mod(a, x, n);</div><div class=\"line\">    ll last = ret;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</div><div class=\"line\">        ret = mult_mod(ret, ret, n);</div><div class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">1</span> &amp;&amp; last != <span class=\"number\">1</span> &amp;&amp; last != n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">//合数</span></div><div class=\"line\">        last = ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ret != <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Miller_Rabin()算法素数判定</span></div><div class=\"line\"><span class=\"comment\">//是素数返回true.(可能是伪素数，但概率极小)</span></div><div class=\"line\"><span class=\"comment\">//合数返回false;</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Miller_Rabbin</span><span class=\"params\">(ll n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>((n &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//偶数</span></div><div class=\"line\">    ll x = n - <span class=\"number\">1</span>;</div><div class=\"line\">    ll t = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>((x &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        t++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; S; i++) &#123;</div><div class=\"line\">        ll a = rand() % (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>; <span class=\"comment\">//rand()需要stdlib.h头文件</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(check(a, n, x, t))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//合数</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ll factor[<span class=\"number\">100</span>];<span class=\"comment\">//质因数分解结果（刚返回时是无序的）</span></div><div class=\"line\"><span class=\"keyword\">int</span> tot;<span class=\"comment\">//质因数的个数。数组小标从0开始</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">gcd</span><span class=\"params\">(ll a, ll b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> gcd(-a, b);</div><div class=\"line\">    <span class=\"keyword\">while</span>(b) &#123;</div><div class=\"line\">        ll t = a % b;</div><div class=\"line\">        a = b;</div><div class=\"line\">        b = t;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ll <span class=\"title\">Pollard_rho</span><span class=\"params\">(ll x, ll c)</span> </span>&#123;</div><div class=\"line\">    ll i = <span class=\"number\">1</span>, k = <span class=\"number\">2</span>;</div><div class=\"line\">    ll x0 = rand() % x;</div><div class=\"line\">    ll y = x0;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        i++;</div><div class=\"line\">        x0 = (mult_mod(x0, x0, x) + c) % x;</div><div class=\"line\">        ll d = gcd(y - x0, x);</div><div class=\"line\">        <span class=\"keyword\">if</span>(d != <span class=\"number\">1</span> &amp;&amp; d != x) <span class=\"keyword\">return</span> d;</div><div class=\"line\">        <span class=\"keyword\">if</span>(y == x0) <span class=\"keyword\">return</span> x;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i == k) &#123;</div><div class=\"line\">            y = x0;</div><div class=\"line\">            k += k;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//对n进行素因子分解</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">findfac</span><span class=\"params\">(ll n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(Miller_Rabbin(n)) &#123; <span class=\"comment\">//素数</span></div><div class=\"line\">        factor[tot++] = n;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ll p = n;</div><div class=\"line\">    <span class=\"keyword\">while</span>(p &gt;= n) p = Pollard_rho(p, rand() % (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">    findfac(p);</div><div class=\"line\">    findfac(n / p);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ll n = <span class=\"number\">600851475143L</span>L;</div><div class=\"line\">    findfac(n);</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;factor[tot - <span class=\"number\">1</span>]&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>Completed on Mon, 27 Oct 2014, 02:36</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":["数论","pollard_rho大数分解"]},{"title":"Project Euler 2 Even Fibonacci numbers（递推）","url":"http://yoursite.com/2014/10/27/Project Euler 2/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://projecteuler.net/problem=2\" target=\"_blank\" rel=\"external\">https://projecteuler.net/problem=2</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>求不超过4000000的菲波那切偶数和</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>递推</p>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">    所有不超过4000000的菲波那切偶数和</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">40</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>, f[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</div><div class=\"line\">        f[i] = f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">2</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span> (f[i] &gt; <span class=\"number\">4000000</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>) sum += f[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;sum&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-10-27 AC</li>\n<li>开始做Project Euler</li>\n</ul>\n","categories":["ACM","Project Euler"],"tags":[]},{"title":"LA 3938 动态最大连续和（线段树）","url":"http://yoursite.com/2014/10/26/LA 3938 动态最大连续和 线段树/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;category=22&amp;problem=1939&amp;mosmsg=Submission+received+with+ID+1584539\" target=\"_blank\" rel=\"external\">https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;category=22&amp;problem=1939&amp;mosmsg=Submission+received+with+ID+1584539</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定一个序列，长度为n。有m个操作，每次操作给定(a,b)。求区间[a,b]之间的一段区间[l,r]，使得a ≤ l ≤ r ≤ b。且区间[l,r]为最大子段和。当有多组答案时，使l最小，l相同时，r最小。<br>数据范围：1 ≤ n,m ≤ 500000，序列元素的绝对值 ≤ 1e9</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>采用线段树来维护动态最大连续和。每个区间维护最大子段和sub[]，最大前缀和pre[]，最大后缀和[]。在建立线段树的时候，进行维护。当左右两个区间l，r进行合并时，维护的方式是：</p>\n<ul>\n<li>prefix  最大前缀和为max(pre[l], sum[l] + pre[r])</li>\n<li>suffix  最大后缀和为max(suf[r], sum[r] + suf[l])</li>\n<li>sub 最大子段和为max(max(sub[l], suf[l] + pre[r]), sub[r])<br>在维护的过程中，还要记录相应的坐标信息<br>查询相似</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;cmath&gt;</span></div><div class=\"line\">using namespace std;</div><div class=\"line\"><span class=\"comment\">#define ll long long</span></div><div class=\"line\"><span class=\"comment\">#define lson l, m, rt &lt;&lt; 1</span></div><div class=\"line\"><span class=\"comment\">#define rson m + 1, r, rt &lt;&lt; 1 | 1</span></div><div class=\"line\">const <span class=\"keyword\">int</span> maxn = <span class=\"number\">500100</span>;</div><div class=\"line\">ll <span class=\"function\"><span class=\"keyword\">sub</span>[<span class=\"title\">maxn</span> &lt;&lt; 2], <span class=\"title\">pre</span>[<span class=\"title\">maxn</span> &lt;&lt; 2], <span class=\"title\">suf</span>[<span class=\"title\">maxn</span> &lt;&lt; 2]</span>; //记录每段的最大子段和，最大前缀和，最大后缀和</div><div class=\"line\">ll sum[maxn &lt;&lt; <span class=\"number\">2</span>]; <span class=\"regexp\">//</span>记录每段的和</div><div class=\"line\">ll st[maxn &lt;&lt; <span class=\"number\">2</span>], ed[maxn &lt;&lt; <span class=\"number\">2</span>];  <span class=\"regexp\">//</span>记录最大子段和的起点、终点</div><div class=\"line\">ll pst[maxn &lt;&lt; <span class=\"number\">2</span>], ped[maxn &lt;&lt; <span class=\"number\">2</span>]; <span class=\"regexp\">//</span>记录最大前缀和的起点、终点</div><div class=\"line\">ll sst[maxn &lt;&lt; <span class=\"number\">2</span>], sed[maxn &lt;&lt; <span class=\"number\">2</span>]; <span class=\"regexp\">//</span>记录最大后缀和的起点、终点</div><div class=\"line\"><span class=\"keyword\">int</span> n, <span class=\"keyword\">m</span>;</div><div class=\"line\">void pushup(<span class=\"keyword\">int</span> rt) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> l = rt &lt;&lt; <span class=\"number\">1</span>, r = rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;</div><div class=\"line\">    sum[rt] = sum[l] + sum[r];</div><div class=\"line\">    //prefix</div><div class=\"line\">    ll maxt = pre[l];</div><div class=\"line\">    ll ss = pst[l], ee = ped[l];</div><div class=\"line\">    <span class=\"keyword\">if</span> (pre[l] &lt; sum[l] + pre[r])</div><div class=\"line\">        maxt = sum[l] + pre[r], ss = pst[l], ee = ped[r];</div><div class=\"line\">    pre[rt] = maxt, pst[rt] = ss, ped[rt] = ee;</div><div class=\"line\">    //suffix</div><div class=\"line\">    maxt = suf[r], ss = sst[r], ee = sed[r];</div><div class=\"line\">    <span class=\"keyword\">if</span> (suf[r] &lt;= sum[r] + suf[l])</div><div class=\"line\">        maxt = sum[r] + suf[l], ss = sst[l], ee = sed[r];</div><div class=\"line\">    suf[rt] = maxt, sst[rt] = ss, sed[rt] = ee;</div><div class=\"line\">    //<span class=\"function\"><span class=\"keyword\">sub</span></span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">maxt</span> = <span class=\"title\">sub</span>[<span class=\"title\">l</span>], <span class=\"title\">ss</span> = <span class=\"title\">st</span>[<span class=\"title\">l</span>], <span class=\"title\">ee</span> = <span class=\"title\">ed</span>[<span class=\"title\">l</span>]</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (maxt &lt; suf[l] + pre[r]) maxt = suf[l] + pre[r], ss = sst[l], ee = ped[r];</div><div class=\"line\">    <span class=\"keyword\">if</span> (maxt &lt; <span class=\"function\"><span class=\"keyword\">sub</span>[<span class=\"title\">r</span>]) <span class=\"title\">maxt</span> = <span class=\"title\">sub</span>[<span class=\"title\">r</span>], <span class=\"title\">ss</span> = <span class=\"title\">st</span>[<span class=\"title\">r</span>], <span class=\"title\">ee</span> = <span class=\"title\">ed</span>[<span class=\"title\">r</span>]</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">sub</span>[<span class=\"title\">rt</span>] = <span class=\"title\">maxt</span>, <span class=\"title\">st</span>[<span class=\"title\">rt</span>] = <span class=\"title\">ss</span>, <span class=\"title\">ed</span>[<span class=\"title\">rt</span>] = <span class=\"title\">ee</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\">void build(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</div><div class=\"line\">        scanf(<span class=\"string\">\"%lld\"</span>, sum + rt);</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">sub</span>[<span class=\"title\">rt</span>] = <span class=\"title\">pre</span>[<span class=\"title\">rt</span>] = <span class=\"title\">suf</span>[<span class=\"title\">rt</span>] = <span class=\"title\">sum</span>[<span class=\"title\">rt</span>]</span>;</div><div class=\"line\">        st[rt] = ed[rt] = pst[rt] = ped[rt] = sst[rt] = sed[rt] = l;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">m</span> = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    build(lson);</div><div class=\"line\">    build(rson);</div><div class=\"line\">    pushup(rt);</div><div class=\"line\">&#125;</div><div class=\"line\">struct node &#123;</div><div class=\"line\">    ll sum, l, <span class=\"keyword\">m</span>, r; <span class=\"regexp\">//sum</span>表示该段和，l，<span class=\"keyword\">m</span>，r分别表示最大前缀和、最大子段和、最大后缀和</div><div class=\"line\">    <span class=\"keyword\">int</span> ls, le, ms, me, rs, re; <span class=\"regexp\">//</span>分别表示l，<span class=\"keyword\">m</span>，r的起点、终点</div><div class=\"line\">&#125;;</div><div class=\"line\">node query(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rt) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class=\"line\">        node tp;</div><div class=\"line\">        tp.l = pre[rt], tp.m = <span class=\"function\"><span class=\"keyword\">sub</span>[<span class=\"title\">rt</span>], <span class=\"title\">tp</span>.<span class=\"title\">r</span> = <span class=\"title\">suf</span>[<span class=\"title\">rt</span>]</span>;</div><div class=\"line\">        tp.ls = pst[rt], tp.le = ped[rt];</div><div class=\"line\">        tp.ms = st[rt], tp.me = ed[rt];</div><div class=\"line\">        tp.rs = sst[rt], tp.re = sed[rt];</div><div class=\"line\">        tp.sum = sum[rt];</div><div class=\"line\">        <span class=\"keyword\">return</span> tp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    node tp, tp1, tp2;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">m</span> = (l + r) &gt;&gt; <span class=\"number\">1</span>, sl = <span class=\"number\">0</span>, sr = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (L &lt;= <span class=\"keyword\">m</span>) &#123;</div><div class=\"line\">        tp1 = query(L, R, lson);</div><div class=\"line\">        sl = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (R &gt; <span class=\"keyword\">m</span>) &#123;</div><div class=\"line\">        tp2 = query(L, R, rson);</div><div class=\"line\">        sr = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sl &amp;&amp; !sr) <span class=\"keyword\">return</span> tp1;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!sl &amp;&amp; sr) <span class=\"keyword\">return</span> tp2;</div><div class=\"line\">    //prefix</div><div class=\"line\">    tp.l = tp1.l, tp.ls = tp1.ls, tp.le = tp1.le;</div><div class=\"line\">    <span class=\"keyword\">if</span> (tp.l &lt; tp1.sum + tp2.l)</div><div class=\"line\">        tp.l = tp1.sum + tp2.l, tp.le = tp2.le;</div><div class=\"line\">    //suffix</div><div class=\"line\">    tp.r = tp2.r, tp.rs = tp2.rs, tp.re = tp2.re;</div><div class=\"line\">    <span class=\"keyword\">if</span> (tp.r &lt;= tp2.sum + tp1.r)</div><div class=\"line\">        tp.r = tp2.sum + tp1.r, tp.rs = tp1.rs;</div><div class=\"line\">    //<span class=\"function\"><span class=\"keyword\">sub</span></span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">tp</span>.<span class=\"title\">m</span> = <span class=\"title\">tp1</span>.<span class=\"title\">m</span>, <span class=\"title\">tp</span>.<span class=\"title\">ms</span> = <span class=\"title\">tp1</span>.<span class=\"title\">ms</span>, <span class=\"title\">tp</span>.<span class=\"title\">me</span> = <span class=\"title\">tp1</span>.<span class=\"title\">me</span></span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (tp.m &lt; tp1.r + tp2.l)</div><div class=\"line\">        tp.m = tp1.r + tp2.l, tp.ms = tp1.rs, tp.me = tp2.le;</div><div class=\"line\">    <span class=\"keyword\">if</span> (tp.m &lt; tp2.m)</div><div class=\"line\">        tp.m = tp2.m, tp.ms = tp2.ms, tp.me = tp2.me;</div><div class=\"line\">    tp.sum = tp1.sum + tp2.sum;</div><div class=\"line\">    <span class=\"keyword\">return</span> tp;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> main () &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> cas = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~scanf(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;<span class=\"keyword\">m</span>)) &#123;</div><div class=\"line\">        build(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">printf</span>(<span class=\"string\">\"Case %d:\\n\"</span>, cas++);</div><div class=\"line\">        <span class=\"keyword\">int</span> a, b;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">m</span>--) &#123;</div><div class=\"line\">            scanf(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</div><div class=\"line\">            node ans = query(a, b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, ans.ms, ans.me);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>2014-10-27 已AC </li>\n<li>3938    “Ray, Pass me the dishes!”    Accepted    C++11    0.219    2014-10-26 16:33:27</li>\n</ul>\n","categories":["ACM","算法竞赛训练指南"],"tags":["数据结构","线段树"]},{"title":"Codeforces Round 275","url":"http://yoursite.com/2014/10/25/cf275/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>源地址：<a href=\"http://codeforces.com/contest/482\" target=\"_blank\" rel=\"external\">http://codeforces.com/contest/482</a></p>\n<h1 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h1><a id=\"more\"></a>\n<h1 id=\"新技能get\"><a href=\"#新技能get\" class=\"headerlink\" title=\"新技能get\"></a>新技能get</h1><h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><ul>\n<li>挖个坑。</li>\n</ul>\n","categories":["ACM","Codeforces"],"tags":[]},{"title":"Hello World","url":"http://yoursite.com/hello-world 2.html","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"Hello World","url":"http://yoursite.com/hello-world.html","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"Books","url":"http://yoursite.com/books/index.html","content":"<p>记录一些想看和看过的书籍、课程信息。</p>\n<font color=\"green\">种草</font><br><font color=\"red\">未完成</font><br><font color=\"gray\">已完成</font>\n\n<style>\ntable {\n    width: 100%; /*表格宽度*/\n    max-width: 65em; /*表格最大宽度，避免表格过宽*/\n    border: 1px solid #dedede; /*表格外边框设置*/\n    margin: 15px auto; /*外边距*/\n    border-collapse: collapse; /*使用单一线条的边框*/\n    empty-cells: show; /*单元格无内容依旧绘制边框*/\n}\n\ntable th {\n    font-weight: bold; /*加粗*/\n    text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/\n    background: rgba(158,188,226,0.2); /*背景色*/\n}\ntable td {\n  height: 30px; /*统一每一行的默认高度*/\n  border: 1px solid #dedede; /*内部边框样式*/\n  padding: 0 10px; /*内边距*/\n}\ntable td:nth-child(1) {\n  height: 30px; /*统一每一行的默认高度*/\n  width: 250px;\n  border: 1px solid #dedede; /*内部边框样式*/\n  padding: 0 10px; /*内边距*/\n}\ntable td:nth-child(2) {\n  height: 30px; /*统一每一行的默认高度*/\n  width: 70px;\n  border: 1px solid #dedede; /*内部边框样式*/\n  padding: 0 10px; /*内边距*/\n}\n</style>\n\n<h2 id=\"数学类\"><a href=\"#数学类\" class=\"headerlink\" title=\"数学类\"></a>数学类</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://ocw.mit.edu/courses/mathematics/18-01-single-variable-calculus-fall-2006/video-lectures/\" target=\"_blank\" rel=\"external\"><font color=\"red\">MIT 18.01 Single Variable Calculus</font></a></td>\n<td style=\"text-align:left\">课程</td>\n<td style=\"text-align:left\">MIT课程，单变量微积分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://ocw.mit.edu/courses/mathematics/18-02-multivariable-calculus-fall-2007/video-lectures/\" target=\"_blank\" rel=\"external\"><font color=\"green\">MIT 18.02 Multivariable Calculus</font></a></td>\n<td style=\"text-align:left\">课程</td>\n<td style=\"text-align:left\">MIT课程，多变量微积分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/video-lectures/\" target=\"_blank\" rel=\"external\"><font color=\"red\">MIT 18.06 Linear Algebra</font></a></td>\n<td style=\"text-align:left\">课程</td>\n<td style=\"text-align:left\">MIT课程，线性代数，老爷子讲得非常好</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/%E9%99%88%E5%B8%8C%E5%AD%BA%E6%96%87%E9%9B%86%E2%80%A2%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1-%E9%99%88%E5%B8%8C%E5%AD%BA/dp/B00264GG56/ref=sr_1_5?ie=UTF8&amp;qid=1506236837&amp;sr=8-5&amp;keywords=%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1\" target=\"_blank\" rel=\"external\"><font color=\"red\">概率论与数理统计</font></a></td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">出之大师之手，深入浅出</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15213-s17/www/schedule.html\" target=\"_blank\" rel=\"external\"><font color=\"red\">CSAPP 深入理解计算机系统</font></a></td>\n<td style=\"text-align:left\">课程</td>\n<td style=\"text-align:left\">CMU最火的一门课程，强推！</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00EYSPGYE\" target=\"_blank\" rel=\"external\"><font color=\"gray\">汇编语言</font></a></td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">不愧是哲学家写得书，课程内容和课程实验都设计得很好。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/C%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7-%E5%87%AF%E5%B0%BC%E6%A0%BC/dp/B0012UMPBY/\" target=\"_blank\" rel=\"external\"><font color=\"gray\">C陷阱与缺陷</font></a></td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">深入C语言一些极易犯错的细节</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/C-Primer-%E6%96%AF%E5%9D%A6%E5%88%A9%C2%B7%E6%9D%8E%E6%99%AE%E6%9B%BC/dp/B00ESUIL0O/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1511603240&amp;sr=1-1&amp;keywords=C%2B%2Bprimer\" target=\"_blank\" rel=\"external\"><font color=\"red\">C++ Primer</font></a></td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">学习C++必备手册</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-Thomas-H-Cormen/dp/B00AK7BYJY/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1511603313&amp;sr=1-1&amp;keywords=%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA\" target=\"_blank\" rel=\"external\"><font color=\"red\">算法导论</font></a></td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">还是要抽时间啃完，可以搭配MIT的课程看</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.coursera.org/learn/algorithms-part1/home/welcome\" target=\"_blank\" rel=\"external\"><font color=\"gray\">Princeton Algorithms Part I</font></a></td>\n<td style=\"text-align:left\">课程</td>\n<td style=\"text-align:left\">深入浅出，老爷子讲得真的好，课程作业也不错</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"\"><font color=\"green\">Princeton Algorithms Part II</font></a></td>\n<td style=\"text-align:left\">课程</td>\n<td style=\"text-align:left\">Coursera上还没有更新</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00KVZ43PW/ref=sr_1_1?ie=UTF8&amp;qid=1506237322&amp;sr=8-1&amp;keywords=%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8\" target=\"_blank\" rel=\"external\"><font color=\"red\">算法竞赛入门经典</font></a></td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">当年打ACM的时候用的书</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8-%E8%AE%AD%E7%BB%83%E6%8C%87%E5%8D%97-%E5%88%98%E6%B1%9D%E4%BD%B3/dp/B009SJJGOU/ref=sr_1_2?ie=UTF8&amp;qid=1506237322&amp;sr=8-2&amp;keywords=%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8\" target=\"_blank\" rel=\"external\"><font color=\"red\">算法竞赛入门经典:训练指南</font></a>&emsp;&emsp;</td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">上一本的后续</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"机器学习-amp-深度学习\"><a href=\"#机器学习-amp-深度学习\" class=\"headerlink\" title=\"机器学习&amp;深度学习\"></a>机器学习&amp;深度学习</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-%E6%9D%8E%E8%88%AA/dp/B007TSFMTA/ref=sr_1_1?ie=UTF8&amp;qid=1506237627&amp;sr=8-1&amp;keywords=%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"external\"><font color=\"red\">统计学习方法</font></a></td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">机器学习入门经典</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/gp/product/B01ARKEV1G/ref=pd_sim_14_1?ie=UTF8&amp;psc=1&amp;refRID=A6J29BHNSH30X562TDHK\" target=\"_blank\" rel=\"external\"><font color=\"green\">机器学习</font></a></td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">🍉，种草</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00P6OJ09C/ref=sr_1_1?ie=UTF8&amp;qid=1506237803&amp;sr=8-1&amp;keywords=%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E\" target=\"_blank\" rel=\"external\"><font color=\"red\">数学之美</font></a>&emsp;&emsp;</td>\n<td style=\"text-align:left\">书籍</td>\n<td style=\"text-align:left\">机器学习科普类书籍，偏重于自然语言处理（NLP）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h2>","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]}]